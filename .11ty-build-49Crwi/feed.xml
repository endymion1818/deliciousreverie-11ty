<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>My Blog about Boats</title>
  <subtitle>I am writing about my experiences as a naval navel-gazer.</subtitle>
  <link href="https://example.com/feed.xml" rel="self"/>
  <link href="https://example.com/"/>
  <updated>2022-03-11T14:21:21Z</updated>
  <id>https://example.com/</id>
  <author>
    <name>Boaty McBoatFace</name>
    <email>me@example.com</email>
  </author>
  
  <entry>
    <title>Code really is Poetry</title>
    <link href="https://example.com/posts/code-is-poetry/"/>
    <updated>2015-02-06T14:21:21Z</updated>
    <id>https://example.com/posts/code-is-poetry/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;m not sure if you remember the early days of the web. I can. I remember when my friend and I would sit at home, bored of talking about &lt;em&gt;Babylon 5&lt;/em&gt; (yes, really) and yet not wanting to part company again.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Let&#39;s try to get on the internet!&amp;quot; I would excitedly yelp, and plug in the 14.4k modem, dial into Apple&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/EWorld&quot; title=&quot;eworld on Wikipedia&quot;&gt;eWorld&lt;/a&gt; online community, and download an early version of Mosaic or Netscape.&lt;/p&gt;
&lt;p&gt;It never worked.&lt;/p&gt;
&lt;p&gt;Mostly because my mum kept noticing the £400 extra on the telephone bill each time we tried. So we stuck to writing science fiction stories and, after a brush with classics (via an old copy of This Side of Paradise by F Scott Fitzgerald), I started to get into poetry.&lt;/p&gt;
&lt;p&gt;Poetry represented for me the biggest leap in my adolescent life so far. My interests went from material that could be taken at face-value, or so was my perspective at the time, to deeper things with hidden meaning.&lt;/p&gt;
&lt;p&gt;Every time I tried to comprehend a poem it seemed to change depending on my mood, on how I read each word and stanza. I was genuinely moved by things I could barely understand ... the underpinning structure and esoteric references being quite alien to my understanding.&lt;/p&gt;
&lt;h3 id=&quot;the-poets-write-html&quot; tabindex=&quot;-1&quot;&gt;The Poets Write HTML &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/code-is-poetry/#the-poets-write-html&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;m not sure if you&#39;ll remember also that many of the first users of the web were writers, if not poets?&lt;/p&gt;
&lt;p&gt;For them, the internet represented freedom ... absolute freedom to be published no matter the quality of their writing, no matter the popularity or availability (or distinct lack thereof) of willing publishers. A writer could reach an audience of millions just by learning to write a few lines of code.&lt;/p&gt;
&lt;p&gt;But code was pretty hard to grapple with. One poem titled &amp;quot;The Poet Writes HTML&amp;quot; published in Cardiff&#39;s &lt;a href=&quot;https://www.poetrymagazines.org.uk/magazine/index.asp?id=72&quot; title=&quot;Link to the Yellow Crane information page&quot;&gt;The Yellow Crane&lt;/a&gt; told how the author felt he was getting further and further away from writing because of the time he spent learning to code. For many years, that account alone turned me away from technology altogether.&lt;/p&gt;
&lt;p&gt;But when I came back ... that was when a new revelation hit me.&lt;/p&gt;
&lt;h3 id=&quot;the-language-of-the-internet&quot; tabindex=&quot;-1&quot;&gt;The Language of the Internet &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/code-is-poetry/#the-language-of-the-internet&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At once, there was a new world of hidden meaning and esoteric references, whose structure I was only beginning to comprehend. Code could be controlled, tamed, be bent to your will. It could be made to sit, roll over and beg like a dog. I found it truly is a &lt;em&gt;language&lt;/em&gt; with all that implies: a language made up of words with meanings that once again had weight and mystery and consequences.&lt;/p&gt;
&lt;p&gt;Writing code is now for me as worthy an endeavour as writing poetry, and definitely more profitable if not quite as meaningful. I revel in the opportunities it now presents me, and am glad that I have finally discovered that code, indeed, is poetry.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Maintaining Goodwill on Difficult Projects</title>
    <link href="https://example.com/posts/maintaining-goodwill/"/>
    <updated>2015-02-11T14:21:21Z</updated>
    <id>https://example.com/posts/maintaining-goodwill/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;It&#39;s been great to work with some excellent developers recently, but on one or two occasions, like all of us at some point, we&#39;ve had relationships with clients and sometimes suppliers, that have been tested. How can we avoid things that could potentially derail a project in progress? How can we keep staff motivated past the pain points of difficult development and changing requirements?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The keys are Time, Money and Good Will.&lt;/p&gt;
&lt;h3 id=&quot;getting-our-money&#39;s-worth&quot; tabindex=&quot;-1&quot;&gt;Getting Our Money&#39;s Worth &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/maintaining-goodwill/#getting-our-money&#39;s-worth&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;m going to come right out and say it: we all want our money&#39;s worth from a project. As well as a great end product we want to see a good return for our money. We also want to see our project delivered on time, too.&lt;/p&gt;
&lt;p&gt;But the trouble for our partners in digital development comes when we&#39;re squeezed too much.&lt;/p&gt;
&lt;h3 id=&quot;good-will-hunting&quot; tabindex=&quot;-1&quot;&gt;Good Will Hunting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/maintaining-goodwill/#good-will-hunting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You naturally come into a project feeling positive (or most of us do!): the potential for being involved in something you can be proud of is exciting, working with a new client is exhilarating, your product owner has extolled the virtues of this client really well.&lt;/p&gt;
&lt;p&gt;That&#39;s a really good start.&lt;/p&gt;
&lt;p&gt;If the project requirements keep changing rapidly, even dramatically, in stage 3 of feedback ... months after the initial scope was agreed and designs were drawn up. If the designs keep changing, after weeks of forbearance, designers and developers can rapidly lose interest in doing a good job.&lt;/p&gt;
&lt;p&gt;Code quality begins to suffer ... designers start to do sloppy work without due consideration ... and the project comes off worse for it.&lt;/p&gt;
&lt;p&gt;The key thing—the most important thing—you could lose at that point is good will.&lt;/p&gt;
&lt;h3 id=&quot;help-others-maintain-a-positive-outlook&quot; tabindex=&quot;-1&quot;&gt;Help Others Maintain a Positive Outlook &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/maintaining-goodwill/#help-others-maintain-a-positive-outlook&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Can designers &amp;amp; developers engaged on a product be called stakeholders too? I argue that they can—at this  tender stage they might be the most important ones to nurture. So it&#39;s key to maintain positive communication with the client (as far as it depends on you), and try to get those involved spurred on to complete the project to the standard that&#39;s required.&lt;/p&gt;
&lt;p&gt;Where can you compliment them on a great delivery? What innovation have they come up with? What have developers, designers and you learned from the project?&lt;/p&gt;
&lt;p&gt;Is there anything you can do to talk to the product owner to resolve the situation? The key here is open communication with those on the client side too.&lt;/p&gt;
&lt;p&gt;Asking these key questions may get you and the product owner thinking more positively so that good will keeps flowing on your project, to satisfactory completion.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Not Using SASS: Rebellion in the ranks</title>
    <link href="https://example.com/posts/not-using-sass/"/>
    <updated>2015-02-11T14:21:21Z</updated>
    <id>https://example.com/posts/not-using-sass/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;A little while ago, I had a telephone interview in which the lead developer customarily dismissed my application because I didn&#39;t know how to write SASS or LESS. He was very &amp;quot;born again&amp;quot; about the whole thing, and I resolved to learn at least one of these frameworks in response.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whilst I&#39;m very glad I did learn SASS, I have to say there are a number of drawbacks I&#39;ve noticed ...&lt;/p&gt;
&lt;h3 id=&quot;drawback-1:-increase-code-stack&quot; tabindex=&quot;-1&quot;&gt;Drawback 1: Increase Code Stack &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/not-using-sass/#drawback-1:-increase-code-stack&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SASS is written in Ruby. Whilst I would love to get into coding in Ruby, it&#39;s not something I wanted to learn as a priority—I&#39;m having enough trouble picking up enough other skills more pertinent to frontend development.&lt;/p&gt;
&lt;p&gt;I do use Grunt in my workflow, because I&#39;m a performance freak and hate to see unminified scripts and multiple HTTP calls when there could be one. So that&#39;s already added Node.js to my workflow.&lt;/p&gt;
&lt;p&gt;But the problem I ran into when developing in SASS was that I had to leave the code base alone for a few months ... and when I came back to it, it wasn&#39;t doing what I expected. I had to seriously dig around to find out that I needed to update to the latest version of Ruby (which of the several package manager solutions had I used again??!) and Node.js before it would run again.&lt;/p&gt;
&lt;p&gt;I was working on this site, as it happens, so it wasn&#39;t all that important. But I have heard too much experience of developers who spend a greater portion of their time fixing their environments instead of contributing to the project at hand, to not take this seriously.&lt;/p&gt;
&lt;h3 id=&quot;drawback-2:-it-does&#39;t-run-on-your-server&quot; tabindex=&quot;-1&quot;&gt;Drawback 2: It Does&#39;t Run On Your Server &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/not-using-sass/#drawback-2:-it-does&#39;t-run-on-your-server&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Okay, so developing your project whilst its on the staging server might not be the best route to take ... but who hasn&#39;t had that last-minute code change that the client wants to see just before their conference call—or you just want to try something live to see if your hunch is correct.&lt;/p&gt;
&lt;p&gt;But of course you can&#39;t do that with SASS unless you happen to have Node.js running on your server. With this project, I didn&#39;t, and so was ham strung once again.&lt;/p&gt;
&lt;p&gt;Actually, that&#39;s my currently roadblock with this site as I write this: I have in mind some CSS changes, but my dev environment is on my Mac at work ... and with a small child the only time I get to mess with my Macbook is when he&#39;s asleep (like right now).&lt;/p&gt;
&lt;h3 id=&quot;don&#39;t-knock-a-good-thing&quot; tabindex=&quot;-1&quot;&gt;Don&#39;t Knock A Good Thing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/not-using-sass/#don&#39;t-knock-a-good-thing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These drawbacks notwithstanding, I do love SASS. It&#39;s so handy having variables, and being able to split down your stylesheets into easily-manageable parts has saved me lines of code and not a few headaches.&lt;/p&gt;
&lt;p&gt;It&#39;s fantastic to see If Only the CSS specification was a little more ahead of the curve, instead of way behind where it currently is. I can&#39;t wait to see the wonderful tools we use in SASS freed from their current shackles.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why &#39;Delicious Reverie&#39;?</title>
    <link href="https://example.com/posts/why-delicious-reverie/"/>
    <updated>2015-02-11T14:21:21Z</updated>
    <id>https://example.com/posts/why-delicious-reverie/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I may have confused some of you with titling my personal site &amp;quot;Delicious Reverie&amp;quot;. So I&#39;m going to attempt to explain my decision, and discuss perhaps the greatest work of fiction ever produced in either French or English...&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-not-benread.com&quot; tabindex=&quot;-1&quot;&gt;Why not &lt;a href=&quot;http://benread.com/&quot;&gt;benread.com&lt;/a&gt;? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-delicious-reverie/#why-not-benread.com&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yeah. Check it out: &lt;a href=&quot;https://benread.com/&quot; title=&quot;Blog of the other Ben Read&quot;&gt;https://benread.com&lt;/a&gt;. That&#39;s not me. That&#39;s the other guy, named Ben Read, who happens to be a web developer. I&#39;m sure he&#39;s a lot better at it than me.&lt;/p&gt;
&lt;p&gt;Hilariously enough, I was contacted by a headhunting organisation recently who thought I was him; and I thankfully realised and straightened him out before things got really interesting.&lt;/p&gt;
&lt;h3 id=&quot;a-state-of-mind&quot; tabindex=&quot;-1&quot;&gt;A State of Mind &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-delicious-reverie/#a-state-of-mind&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, I went with &lt;a href=&quot;http://deliciousreverie.co.uk/&quot;&gt;deliciousreverie.co.uk&lt;/a&gt; for this reason. At the time I conceived this blog, I was about 2 years into reading the formidable tome Les Miserables, in English, by Victor Hugo. I love that book. As well as the melancholy characters it contains, I loved the realism of France in the 1700s and was immediately drawn to Victor Hugo&#39;s thoughtful, at times poignant, prose.&lt;/p&gt;
&lt;p&gt;There&#39;s &lt;a href=&quot;https://books.google.co.uk/books?id=CNTT12PLXeEC&amp;amp;lpg=PP1&amp;amp;dq=les%20miserables%20victor%20hugo&amp;amp;pg=PA599#v=onepage&amp;amp;q=les%20miserables%20victor%20hugo&amp;amp;f=false&quot; title=&quot;Les Miserables: Page 599 if you must know.&quot;&gt;one scene&lt;/a&gt; that I particularly loved, when a minor character, Monsieur Mabeuf, has been listening to his housekeeper relate a story from one of his old books. The old man appreciates the book anew in explaining to his housekeeper what she has been reading. The last line simply says:&lt;/p&gt;
&lt;h1 id=&quot;&amp;quot;and-monsieur-mabeuf-fell-into-a-delicious-reverie&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;And Monsieur Mabeuf fell into a delicious reverie&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-delicious-reverie/#%22and-monsieur-mabeuf-fell-into-a-delicious-reverie%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It&#39;s out of these delicious reveries—or silent meditations if you like—that so many of our good ideas come. There is little more poignant than sitting and considering, of allowing the mind to think freely and contemplate whatever it will: a particular problem we&#39;re facing, an action we&#39;re about to take, or just to take a minute to appreciate strange life.&lt;/p&gt;
&lt;p&gt;So Delicious Reverie, the website, like so many of the articles you will read here, are born of these delicious reveries.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Design is Broken</title>
    <link href="https://example.com/posts/design-is-broken/"/>
    <updated>2015-02-14T14:21:21Z</updated>
    <id>https://example.com/posts/design-is-broken/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I was getting nowhere. For the previous four years, I had been self employed and had managed the transition from print design to web design. I was enjoying life, but then a desire to build on my success as part of a forward thinking and dynamic team motivated me to submit my CV to a number of local agencies.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But I was getting nowhere.&lt;/p&gt;
&lt;p&gt;I had had a few interviews, and turned down one or two opportunities on principle. I knew the market was competitive, but the skill set I was presenting - that of a web designer - wasn&#39;t generating enough traction. Or at least, not the right kind of traction.&lt;/p&gt;
&lt;p&gt;Then I hit on an idea. I would change one word on my profile in order to highlight web development instead of straight design. Yes, it&#39;s true that I loved design. I could argue about typefaces until the cows come home, I&#39;d fuss for hours about alignment, think twice or three times about how colours I used might create the desired resonance for a piece of artwork or a page on a website. But I also loved wrangling with Sass, delving into PHP and had begun to tackle JavaScript seriously. I admit I had a way to go to perfecting my skills but I was ready for a challenge, and was honest about this in my approach to prospective employers.&lt;/p&gt;
&lt;p&gt;So I switched the title from Web Designer to Web Developer - and then things started to change.&lt;/p&gt;
&lt;h3 id=&quot;what-is-a-designer&quot; tabindex=&quot;-1&quot;&gt;What is a designer? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/design-is-broken/#what-is-a-designer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&amp;quot;A design is an ecosystem. Disrupt one thing and you disrupt others. A designers work is to foresee what will be disrupted and how.&amp;quot; - Robert Hoekman Jr&lt;/p&gt;
&lt;p&gt;What struck me when I began to read The Tao of User Experience is that design is no longer design.&lt;/p&gt;
&lt;p&gt;Design is still about wrangling with the placement of elements on a page - so that content could fit within the desired space and convey the desired message. But it has become so much more than that.&lt;/p&gt;
&lt;p&gt;The far larger part of design used to comprise of nuances of spacing, of detailed discussions about Gill Sans, it&#39;s history and pedigree. About spot colours and page bleed. All these are vital factors in print but these elements do not factor in web design.&lt;/p&gt;
&lt;h3 id=&quot;where-it-differs&quot; tabindex=&quot;-1&quot;&gt;Where it differs &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/design-is-broken/#where-it-differs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rather than a reader, you have a user. Instead of a page, you have a system (known as a web site) and designers can no longer afford the somewhat arrogant approach of being unchallengeable masters or stroppy perfectionists because they are &#39;creatives&#39;. This approach simply does not work in modern web design.&lt;/p&gt;
&lt;p&gt;Designing a website is not mere decoration. To design a site one must properly examine what the end users will do, coupled with the business objectives of the client, and going on evidence to back up approaches not just to appearance but to interactive elements as well.&lt;/p&gt;
&lt;p&gt;Especially to interactive elements.&lt;/p&gt;
&lt;p&gt;A user doesn&#39;t interact with a page by reading it. He may scarcely read anything at all. But he will interact with it, and this is becoming the vital factor in web design. What happens when that button is pressed? How long does the page take to load?  At what stage in the users journey are they likely to encounter this page? What happens when interactivity is driven by touch rather than a mouse?&lt;/p&gt;
&lt;p&gt;These factors mean that the definition of design has changed. We are no longer designing static documents, we are designing interactions. Designers are also architects. We must be. Otherwise we must be merely decorators.&lt;/p&gt;
&lt;p&gt;And I&#39;m not in favour of allowing a decorator to draw up plans for my house.&lt;/p&gt;
&lt;p&gt;Design is changing. It&#39;s time we changed with it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First Steps with Flexbox</title>
    <link href="https://example.com/posts/first-steps-with-flexbox/"/>
    <updated>2015-02-15T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-flexbox/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;On a recent project for international research machine builder Anton Paar, I  used the new flex-box CSS module for the first time. Here&#39;s how it went.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The flex box module has had a long gestation period, and there are 2 main specs of the module, so when researching methods of using it you have to be careful to find recent enough posts which outline the latest spec.&lt;/p&gt;
&lt;p&gt;As always, &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;CSS Tricks&lt;/a&gt; was particularly useful, along with &lt;a href=&quot;https://stackoverflow.com/questions/tagged/flexbox&quot;&gt;Stack Overflow&lt;/a&gt; in getting familiar with the syntax and methods.&lt;/p&gt;
&lt;h3 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;The Problem &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-flexbox/#the-problem&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s not a biggie, but I like things to line up nicely. As it stood, the four content boxes on the home page of Anton Paar UK&#39;s microsite would be populated by both static content and dynamic. We decided to use Flexbox to line the four columns up, something that has never been achieveable before in CSS without Javascript.&lt;/p&gt;
&lt;p&gt;Here&#39;s the HTML:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;row home-features&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-md-3 home-feature&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;well&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;function_exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;dynamic_sidebar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token function&quot;&gt;dynamic_sidebar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;home-1&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-md-3 home-feature&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;well&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;function_exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;dynamic_sidebar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token function&quot;&gt;dynamic_sidebar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;home-2&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-md-3 home-feature&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;well&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;function_exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;dynamic_sidebar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token function&quot;&gt;dynamic_sidebar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;home-3&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-md-3 home-feature&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;well&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;function_exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;dynamic_sidebar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token function&quot;&gt;dynamic_sidebar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;home-4&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--/.row --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from the following screenshot from before the site went live, the problem was that the 4 columns weren&#39;t lining up. This has long been almost impossible to do in HTML / CSS, certainly without misappropriating the &lt;code&gt;position: absolute&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/antonpaar-before.png&quot; alt=&quot;Anton Paar UK Microsite without using flex-box&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But using Flexbox allowed us to simplify the code by removing the &lt;code&gt;well&lt;/code&gt; DIVs as well as provide a solution to the problem:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.home-features&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -webkit-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -moz-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -webkit-flexbox&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -ms-flexbox&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -webkit-flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.home-feature&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-box-flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-moz-box-flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-ms-flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We added this attribute under a &lt;code&gt;media-query&lt;/code&gt; of &lt;code&gt;(min-width: 992px)&lt;/code&gt; so that the columns would stack at smaller viewport sizes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/antonpaar-after.png&quot; alt=&quot;Anton Paar UK Microsite after using flex-box&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This exercise has proved to be a great solution to an ongoing problem in web development.&lt;/p&gt;
&lt;p&gt;After using it on this project I really don&#39;t want to go back, which is a shame because there are &lt;a href=&quot;https://codepen.io/endymion1818/pen/xbPRWd&quot; title=&quot;Flexbox safari test on CodePen&quot;&gt;still some caveats with Safari (Both Mac OS X and iOS)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, this blog has a stylesheet for Flexbox which I&#39;m hoping to implement soon with a fallback for Safari (without browser sniffing).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>#StudioSounds: Designer&#39;s Mix</title>
    <link href="https://example.com/posts/studiosounds-designersmix/"/>
    <updated>2015-02-16T14:21:21Z</updated>
    <id>https://example.com/posts/studiosounds-designersmix/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I have recently discovered Designer&#39;s Mix, an online site containing designer- and coder- friendly soundtracks of awesomeness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&#39;t know about you, but there&#39;s only certain things I can listen to when I&#39;m coding, and I do get bored of stuff pretty quickly ... but this site has proved to be a great resource:&lt;/p&gt;
&lt;iframe src=&quot;https://embed.spotify.com/?uri=spotify:user:1126610390:playlist:5MLLAAuof4QRlTMGs6eALn&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; width=&quot;550&quot; height=&quot;80&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Visit the site and check out some of the mixes, I especially enjoy anything by &lt;a href=&quot;https://designers.mx/designers/jonny&quot; title=&quot;Jonny Delap&#39;s page on Designers.mx&quot;&gt;Jonny Delap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re struggling to get going this monday (much like myself...) check this one out by Jonny Delap:&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Where We Are with Wordpress</title>
    <link href="https://example.com/posts/whereweare-withwordpress/"/>
    <updated>2015-02-18T14:21:21Z</updated>
    <id>https://example.com/posts/whereweare-withwordpress/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Wordpress is becoming to websites what Facebook is to the Internet in some countries: inseperable. Almost as if you can&#39;t build a website without Wordpress, at least not one that has a Content Management System (CMS). I&#39;m making a case for change.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m posting this in Project Management because I am certain that the current culture about the use of the hugely popular Wordpress isn&#39;t just a developer problem—it&#39;s one of best practice in project management.&lt;/p&gt;
&lt;h3 id=&quot;here&#39;s-the-problem.&quot; tabindex=&quot;-1&quot;&gt;Here&#39;s the Problem. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#here&#39;s-the-problem.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Wordpress is in its heyday. Its never been so popular. &lt;a href=&quot;https://managewp.com/14-surprising-statistics-about-wordpress-usage&quot; title=&quot;Manage WP Blog - where this statistic came from.&quot;&gt;18.9% of all websites&lt;/a&gt; use it to allow clients and customers to upload their own content, write articles and change images on the website.&lt;/p&gt;
&lt;p&gt;Wordpress is a convenient tool—there&#39;s a remarkably short learning curve for developers and content writers. There are more plugins, widgets and themes than you can shake a stick at.&lt;/p&gt;
&lt;p&gt;But it&#39;s almost too easy. Want a CMS? Use Wordpress. No thought required. I think that level of complacency is a risky business that we ought to be on guard about.&lt;/p&gt;
&lt;h4 id=&quot;problem-1:-ubiquity-equals-target&quot; tabindex=&quot;-1&quot;&gt;Problem 1: Ubiquity Equals Target &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#problem-1:-ubiquity-equals-target&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because it&#39;s so popular it&#39;s a constant target. I monitor &amp;amp; maintain over 30 Wordpress sites and get reports every minute about attempted access from bots designed to target weak points in the framework.&lt;/p&gt;
&lt;p&gt;But a patch is never as good as avoiding the problem in the first place. If you want to scare yourself silly on this subject, &lt;a href=&quot;https://www.ranum.com/security/computer_security/editorials/dumb/index.html&quot; title=&quot;The Six Dumbest Ideas in Computer Security&quot;&gt;read this post&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;problem-2:-performance&quot; tabindex=&quot;-1&quot;&gt;Problem 2: Performance &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#problem-2:-performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Has anyone got Wordpress to grade &#39;A&#39; on ySlow? &lt;a href=&quot;https://twitter.com/matthillco/status/568031045699932160&quot; title=&quot;Mat Hill&#39;s tweet about Wordpress speeds&quot;&gt;Matt Hill responded&lt;/a&gt; that it might be possible with a cache plugin ... but it&#39;s not an easy thing to achieve, of this I&#39;m certain.&lt;/p&gt;
&lt;p&gt;The problem with this is that site performance is having more and more impact on SEO. This is the next frontier for development after responsive images. It&#39;s awful that the &lt;a href=&quot;https://www.webperformancetoday.com/2013/06/05/web-page-growth-2010-2013/&quot; title=&quot;Blog post on Web Performance Today about the size of web pages.&quot;&gt;average site size is now 2MB&lt;/a&gt;. This can really hurt users-and not those with edge use cases.&lt;/p&gt;
&lt;h4 id=&quot;problem-3:-content&quot; tabindex=&quot;-1&quot;&gt;Problem 3: Content &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#problem-3:-content&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I don&#39;t know about you, but I find it frustrating having one content area for a site, but sometimes regret having to use Advanced Custom Fields or hard coding the site to accept extra content areas.&lt;/p&gt;
&lt;p&gt;I really like Perch for its freedom in this. Want an extra field on your posts? Just add a line in the template, and you&#39;re done.&lt;/p&gt;
&lt;p&gt;Too often I find myself going into the text editor in a Wordpress page to add elements to allow me to fill my client&#39;s requests.&lt;/p&gt;
&lt;h4 id=&quot;problem-4:-maintainability&quot; tabindex=&quot;-1&quot;&gt;Problem 4: Maintainability &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#problem-4:-maintainability&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When is the last time you updated your wordpress installation? How many of these plugins need updates ... and how many updates will break the site?&lt;/p&gt;
&lt;p&gt;I don&#39;t know!&lt;/p&gt;
&lt;p&gt;And yet, not updating &lt;a href=&quot;https://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html&quot; title=&quot;A plugin vulnerability that led to many sites being hacked.&quot;&gt;could lead to your worst nightmare&lt;/a&gt;. This quickly becomes an eternity of procrastination. But by not making a decision, you have made a decision: wait for something bad to happen before you fix it.&lt;/p&gt;
&lt;p&gt;I&#39;m not a big fan of this.&lt;/p&gt;
&lt;h3 id=&quot;what-are-our-options&quot; tabindex=&quot;-1&quot;&gt;What Are Our Options? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/whereweare-withwordpress/#what-are-our-options&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes it might require more brain power to think about these things at the start of a project. But there are plenty of surprisingly good options available.&lt;/p&gt;
&lt;p&gt;We&#39;ve decided to keep 3 different CMS systems in mind for our future projects. We&#39;re keeping Wordpress for quick, small projects.&lt;/p&gt;
&lt;p&gt;Then, we&#39;re using &lt;a href=&quot;https://grabaperch.com/&quot; title=&quot;Perch website&quot;&gt;Perch or Perch Runway&lt;/a&gt; for other sites, and we&#39;re looking into using &lt;a href=&quot;https://getkirby.com/&quot; title=&quot;Kirby website&quot;&gt;Kirby&lt;/a&gt; as a 3rd option, just to vary the DNA of our projects. After all, if every Wordpress site becomes compromised &lt;a href=&quot;https://www.bbc.co.uk/news/technology-29846539&quot; title=&quot;BBC News: Millions of websites hit by Drupal hack attack&quot;&gt;like Drupal was&lt;/a&gt;, it&#39;ll be good to know we don&#39;t have quite as much work to do.&lt;/p&gt;
&lt;p&gt;So, Wordpress is still a valuable part of what my company do ... but it&#39;s not ubiquitous, and it certainly does not need to be the only tool in your toolbox.&lt;/p&gt;
&lt;p&gt;After all, this important decision requires some thought, doesn&#39;t it?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Normal People Don&#39;t Understand Sidebars</title>
    <link href="https://example.com/posts/normal-people-dont-understand-sidebars/"/>
    <updated>2015-02-23T14:21:21Z</updated>
    <id>https://example.com/posts/normal-people-dont-understand-sidebars/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;We&#39;ve reached a point that, like the image carousel, sidebars have become overused and for a lot of projects superfluous. And, as I&#39;ve discovered, people don&#39;t always understand the concept or how they work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Are you the type of person that tends towards simplification, or do you find that you complicate things?&lt;/p&gt;
&lt;p&gt;I think we&#39;re all guilty of both in our own ways ... I know that I am able to break down information and usually systems into manageable chunks. But I also complicate things when I don&#39;t have a clear picture of what they&#39;re for.&lt;/p&gt;
&lt;p&gt;My mechanic showed me a new wing mirror for my car. &amp;quot;What do you think?&amp;quot; he chirped. I was paralysed. It was too complicated. What should I compare it to? What was my original requirement? How much was it going to cost me? I had &lt;em&gt;no&lt;/em&gt; idea what to say.&lt;/p&gt;
&lt;h3 id=&quot;where-sidebars-are-useful&quot; tabindex=&quot;-1&quot;&gt;Where Sidebars Are Useful &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normal-people-dont-understand-sidebars/#where-sidebars-are-useful&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sidebars in native desktop OSes are vitally important. I love having my &#39;favourites&#39; list in Windows and OSX. But the web is different. You can&#39;t have a persistent element created for a specific user on a web page (I&#39;m not venturing into web apps here - that&#39;s beyond this article).&lt;/p&gt;
&lt;p&gt;But when you&#39;re reading a post, why would you have other content straggling down the side of the main article? Whats that search box for? As a user, I already have what I want.&lt;/p&gt;
&lt;p&gt;Yeah, some of it might be relevant to the interests of your users at some point in their journey ... but even then you&#39;re stabbing in the dark. You don&#39;t know what their motivations are.&lt;/p&gt;
&lt;h3 id=&quot;sidebar-blindness&quot; tabindex=&quot;-1&quot;&gt;Sidebar Blindness &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normal-people-dont-understand-sidebars/#sidebar-blindness&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ever heard of this? Sidebar Blindness is becoming increasingly apparent in eye tracking studies. YOUR users are ignoring that content more and more.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Because it contains nothing relevant to them.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s the pattern we&#39;re building here. &amp;quot;There&#39;s nothing I&#39;m going to find useful there, I&#39;ll just ignore it.&amp;quot;&lt;/p&gt;
&lt;p&gt;What a shame. About 33% of your screen real estate (not to mention overheads in terms of design meetings, development work, etc) is going to waste.&lt;/p&gt;
&lt;p&gt;If we want to claw back that 33% or more, we need to start thinking this through more.&lt;/p&gt;
&lt;h3 id=&quot;clients-don&#39;t-understand-sidebars-either.&quot; tabindex=&quot;-1&quot;&gt;Clients Don&#39;t Understand Sidebars Either. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normal-people-dont-understand-sidebars/#clients-don&#39;t-understand-sidebars-either.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The other edge to this sword is that often clients don&#39;t understand the nature of sidebars. I had a project recently where we created one simple sidebar for a project. We thought that was all that was necessary based on the brief we were given.&lt;/p&gt;
&lt;p&gt;But then, near the end of the build, the client said they wanted different content on this page from that page. Then a few days later, they wanted a 3rd layout for the sidebar on another page.&lt;/p&gt;
&lt;p&gt;It transpired that the client didn&#39;t understand that the sidebar was dynamic content, and was the same content area on each page. They didn&#39;t get it. And they got caught up in this big discussion about what should appear on each page.&lt;/p&gt;
&lt;p&gt;Then we had to build it. It would probably have been more efficient to have on-page content by the time they&#39;d finished with it, but it was too late in the build, and with a looming deadline, to refactor it out.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normal-people-dont-understand-sidebars/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rather than building a sidebar, would it be better for you to provide distraction-free reading, allowing the user to focus on getting the information they want from your site quickly and easily, thus increasing positive feedback?&lt;/p&gt;
&lt;p&gt;Take the opportunity to focus on your content so users empathise with you. Provide a delightful experience that appeals to their sense of style, and use key opportunities to reinforce your brand.&lt;/p&gt;
&lt;p&gt;That way, we avoid sidebar blindness, avoid sticky client meetings, and potentially huge amounts of code refactoring ... and wasted money.&lt;/p&gt;
&lt;p&gt;But better than that, we use that 33% of screen real estate much more wisely.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Processes that Increase Value: A Cost Effective Service</title>
    <link href="https://example.com/posts/processes-that-increase-value/"/>
    <updated>2015-02-25T14:21:21Z</updated>
    <id>https://example.com/posts/processes-that-increase-value/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve recently taken a step back from my work to scope out a process that would make an organisation as efficient, competent and successful as it can be in the hopes of having a clearer understanding of where we are as a company and where we have the opportunity to improve.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was surprised to find some key lessons in my analysis that I hope you can benefit from too.&lt;/p&gt;
&lt;h3 id=&quot;1.-clearly-designed-processes-that-are-followed-through-consistently&quot; tabindex=&quot;-1&quot;&gt;1. Clearly designed processes that are followed through consistently &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#1.-clearly-designed-processes-that-are-followed-through-consistently&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Being a successful company means being organised with processes that are put there in order to be as efficient with resources as possible. Spending a bit more time designing processes and following through on them consistently allows key parties to have a clear understanding of where they are in the project. Of course, processes are always a best fit and may require change, but we&#39;ll come to that in a bit.&lt;/p&gt;
&lt;p&gt;This reduces confusion, frustration and duplicated work.&lt;/p&gt;
&lt;h3 id=&quot;2.-use-backups-to-avoid-data-loss&quot; tabindex=&quot;-1&quot;&gt;2. Use Backups to Avoid Data Loss &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#2.-use-backups-to-avoid-data-loss&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have 2 backup processes where I currently work. Our server backs up to itself nightly, and a seperate script runs weekly to transfer all changed files onto a local server. This server in turn has an offsite backup process.&lt;/p&gt;
&lt;p&gt;This might sound slightly overkill, but without it we would worry, not just about data retreival, but how long it would take to restore a server.&lt;/p&gt;
&lt;h3 id=&quot;3.-use-version-control-to-enable-roll-back-of-code&quot; tabindex=&quot;-1&quot;&gt;3. Use Version Control to enable roll back of code &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#3.-use-version-control-to-enable-roll-back-of-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This almost goes without saying, and has saved my bacon on a number of occasions. Version control has so many benefits, from better collaboration, to allowing you to retrieve code that you&#39;ve deleted and realised you need later on.&lt;/p&gt;
&lt;p&gt;I&#39;ve used GitHub extensively, and love it.&lt;/p&gt;
&lt;h3 id=&quot;4.-deliver-websites-on-time&quot; tabindex=&quot;-1&quot;&gt;4. Deliver websites on time &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#4.-deliver-websites-on-time&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It goes without saying, I&#39;m sure you&#39;ll agree, that an overrunning project costs wages as well as patience.&lt;/p&gt;
&lt;h3 id=&quot;5.-deliver-websites-to-budget&quot; tabindex=&quot;-1&quot;&gt;5. Deliver websites to budget &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#5.-deliver-websites-to-budget&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Seems obvious again, but I wanted to have it clearly documented that we don&#39;t just accept it when a project steps over the budget threshold but instead seek to find weak spots in our process and stem the breach.&lt;/p&gt;
&lt;h3 id=&quot;6.-clear-communication&quot; tabindex=&quot;-1&quot;&gt;6. Clear communication &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#6.-clear-communication&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Miscommunication causes the most costly mistakes and take the most time and effort to resolve. So I planned to cultivate good working relationships between team members to facilitate good communication. This gets more difficult when you&#39;re dealing with offsite workers and contractors, where documentation takes on a greater role.&lt;/p&gt;
&lt;p&gt;But just stopping by to see how someone is doing, or sending them a gentle text or email, can really go a long way to facilitating better communication. As long as they &lt;em&gt;know&lt;/em&gt; you&#39;re doing it out of genuine concern for them.&lt;/p&gt;
&lt;h3 id=&quot;7.-well-managed-feedback-phases&quot; tabindex=&quot;-1&quot;&gt;7. Well managed feedback phases &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/processes-that-increase-value/#7.-well-managed-feedback-phases&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On each tier of service we have a defined amount of feedback phases both the scoping / design and build stages of the project. It&#39;s important to include clients in this, in order to increase their confidence in the project. But without clear boundaries for feedback phases (how many there will be, when the deadlines are), things can get messy, and clients start to lose confidence.&lt;/p&gt;
&lt;p&gt;My personal view is that three rounds of feedback is the maximum you should have on any project.&lt;/p&gt;
&lt;p&gt;That&#39;s it!&lt;/p&gt;
&lt;p&gt;Personally, these are just things to watch for. They&#39;ve mostly made the list because I&#39;ve got bitten by them before. I know from firsthand experience how painful it is to have overruning projects that are quickly spinning out of control.&lt;/p&gt;
&lt;p&gt;I hope this was useful :-) I&#39;ll write again with &lt;em&gt;Part 2:&lt;/em&gt; Increasing value to stakeholders soon.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Deliverables and Trust</title>
    <link href="https://example.com/posts/deliverables-and-trust/"/>
    <updated>2015-02-27T14:21:21Z</updated>
    <id>https://example.com/posts/deliverables-and-trust/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;It&#39;s vitally important to have success before you start a project-perhaps the most critical stage to have success. But how far should we go in order to get our clients on board? Should we try to &amp;quot;wow&amp;quot; clients into signoff? Here&#39;s why that is a bad idea.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So you&#39;re taking this proposal to your new client. You sit down in the boardroom, a little nervous but trying to hide it. You naturally have done everything in your power to ensure the success of the meeting. What will win over this set of decision makers and stakeholders to invest in your proposal?&lt;/p&gt;
&lt;p&gt;I can see why we are so tempted to take in visual designs as deliverables to these early meetings. It&#39;s only natural to want to impress ... but there&#39;s a danger lurking at this tender stage of the project which could ruin the conclusion, and cause stress and frustration for every team member in between.&lt;/p&gt;
&lt;p&gt;Swaying the opinions of stakeholders is vitally important. But I argue there are 2 ways of doing it. We &lt;strong&gt;can&lt;/strong&gt; win stakeholders over with demonstration of genuine professionalism, interest in their affairs, and understanding of their business needs.&lt;/p&gt;
&lt;p&gt;It doesn&#39;t take much for a client to feel let down. Unmet expectations are a slippery slope.&lt;/p&gt;
&lt;blockquote&gt;
&quot;Talking with @nicoleslaw, and this came up: “Hell is other people’s undocumented assumptions.”
===============================================================================================
&lt;small&gt;[—Frank Chimero](https://twitter.com/frank_chimero/status/573907847978811392 &quot;Link to original tweet&quot;)&lt;/small&gt;
&lt;/blockquote&gt;
&lt;p&gt;So take time to get to know their assumptions. Ask these kinds of questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do you want a site redesign?&lt;/li&gt;
&lt;li&gt;What are your business goals for this project?&lt;/li&gt;
&lt;li&gt;At the end of the project, what would you consider to be successful?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this stage it&#39;s not just the business goals that are important. Depending on the client, it&#39;s beneficial to try to train them to see things from their users perspective. Help them to see that their new site is for their users—new and repeat customers. If they are aware of that, if you&#39;re an advocate for the user in these meetings, you demonstrate professionalism and help them see that you have business goals in mind.&lt;/p&gt;
&lt;p&gt;Deliverables and trust are difficult to negotiate on. But if we avoid &amp;quot;wowing&amp;quot; our clients and instead seek to understand them, the outcome can be much better—for us and for them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Words Fail Me.</title>
    <link href="https://example.com/posts/words-fail-me/"/>
    <updated>2015-02-27T14:21:21Z</updated>
    <id>https://example.com/posts/words-fail-me/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;m a great fan of Virginia Woolf&#39;s Stream of Consciousness writing, but that isn&#39;t why this post is here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As developers, the hardest thing to do is to name things. Why is that? Why is &amp;quot;semantic code&amp;quot; so hard to achieve?&lt;/p&gt;
&lt;p&gt;Virginia Woolf, in this recording from 1937 entitled &amp;quot;Words Fail Me&amp;quot; hits the nail squarely on the head.&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/E8czs8v6PuI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Tools That Fit Our Process</title>
    <link href="https://example.com/posts/tools-that-fit-our-process/"/>
    <updated>2015-03-11T14:21:21Z</updated>
    <id>https://example.com/posts/tools-that-fit-our-process/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;It&#39;s all too easy to get caught up in the delightful features this CRM or that project management tool ... but does it really solve the problem at hand? Look for tools that fit the process and you&#39;ll be happier.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One thing I&#39;m particularly keen on is finding the right tools for the job, tools that help to collect or document what I&#39;m doing that provide the least amount of friction in that workflow.&lt;/p&gt;
&lt;p&gt;Recently, I&#39;ve found a few that have really helped me. Here&#39;s a rundown:&lt;/p&gt;
&lt;h4 id=&quot;1.-a-whiteboard-and-lots-of-sticky-notes&quot; tabindex=&quot;-1&quot;&gt;1. A Whiteboard and lots of Sticky Notes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-that-fit-our-process/#1.-a-whiteboard-and-lots-of-sticky-notes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Yes it&#39;s a non-technical solution but it works excellently for my visual brain. When I finish a segment of work, I can easily look up and see what&#39;s going on, where I am in my workflow.&lt;/p&gt;
&lt;p&gt;Because I often have involvement in leading technical projects, my board also gives me an overview of my colleagues work and that of 3rd party suppliers we&#39;re currently using.&lt;/p&gt;
&lt;p&gt;Recently, I noticed a gap in our process. When tasks were completed, I used to put the sticky note in the &#39;Done&#39; column and inform the product owner that I was finished. But quite often, the work would come back to me requiring amends. So I added a &amp;quot;QA Passed&amp;quot; column to the board. Now I have an established quality process without having to manage any other tools.&lt;/p&gt;
&lt;p&gt;Low tech is great sometimes.&lt;/p&gt;
&lt;h4 id=&quot;2.-trello&quot; tabindex=&quot;-1&quot;&gt;2. Trello &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-that-fit-our-process/#2.-trello&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I think half the internet must use Trello. The advantage of trello boards over stricter project management tools like Pivotal Tracker is that they are flexible. Don&#39;t get me wrong, I will still use Pivotal Tracker or some similar tool for complex projects, but with Trello you don&#39;t have so much information to catalog before your story is complete.&lt;/p&gt;
&lt;p&gt;You don&#39;t even have to write a complete story if you don&#39;t want to. For instance, some of my work revolves around maintaining about 30 legacy sites. Every month, I generate a report for each of these sites, and there may be additional tasks generated from my findings.&lt;/p&gt;
&lt;p&gt;So I have created a Trello board for that purpose. Now I can see easily what sites have been maintained in any given month, and work through the tasks too.&lt;/p&gt;
&lt;p&gt;We also have one board called &amp;quot;Project Overview&amp;quot; which is an overview of all of our projects and where they are—perhaps our client services team is working on it, perhaps the UX guys are currently in control, or it could be with developers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/screen-shot-2015-03-13-at-20.04.26.png&quot; alt=&quot;Our Trello board for overview of projects in progress or to be greenlit&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &#39;Project Overview&amp;quot; is a birds-eye view of everything going on currently, at an easy glance and accessible by every team member.&lt;/p&gt;
&lt;p&gt;Great for seeing where a given project is and who currently has ownership.&lt;/p&gt;
&lt;h4 id=&quot;3.-bugherd&quot; tabindex=&quot;-1&quot;&gt;3. BugHerd &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-that-fit-our-process/#3.-bugherd&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;BugHerd is great for tracking not just bugs, but client feedback and also for informing developers what changes need to be made as a result of quality checks or content changes.&lt;/p&gt;
&lt;p&gt;We use BugHerd in the final phase of a project, just before we go live. It really helps us consolidate and sort through client requests and our internal QA process.&lt;/p&gt;
&lt;p&gt;I recently had a conversation with MacroPod, the builders of BugHerd, who said that the ability to estimate difficulty of tasks is a feature they&#39;re looking into.&lt;/p&gt;
&lt;p&gt;I&#39;m sure that along with our processes, our tools will continue to change and develop over time to meet new challenges. But for now, these seem to help us to get the job done.&lt;/p&gt;
&lt;p&gt;What about you? What tools fit your processes?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Things I Learned By Working for Free</title>
    <link href="https://example.com/posts/things-I-learned-working-for-free/"/>
    <updated>2015-03-14T14:21:21Z</updated>
    <id>https://example.com/posts/things-I-learned-working-for-free/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Developers sometimes get asked to do stuff for free. If that happens, it generally can be a warning sign that would be right to steer well clear of. It&#39;s easy to end up feeling cheated. But I&#39;ve been fortunate to be involved in two projects that, although I earned no money from, I felt that I benefited greatly.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;project-1:-edifice&quot; tabindex=&quot;-1&quot;&gt;Project 1: Edifice &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/things-I-learned-working-for-free/#project-1:-edifice&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Edifice came about from the need that a large voluntary organisation had for tracking teams, projects and skill levels on construction projects throughout London, Hertfordshire and Oxfordshire.&lt;/p&gt;
&lt;p&gt;The lead developer, a personal friend, invited me to join the project initially as a front end developer. When I started, my friend was training a largely unskilled workforce in a huge range of different abilities that he needed for his project, including HTML, CSS, Java, JavaScript, and others.&lt;/p&gt;
&lt;p&gt;I at once suggested that to save development time he could use a preexisting framework like Foundation or Bootstrap, which would allow the 3 or 4 skilled developers to work on the rest of the Java MVC web app, whilst the less skilled could work on refining the front end views.&lt;/p&gt;
&lt;p&gt;Working on this project gave me an opportunity to learn first hand from a former university lecturer about so many subjects. Among other things, I learned how internet protocols work, why we use relational databases instead of spreadsheets and loads of other stuff.&lt;/p&gt;
&lt;p&gt;I also got to work closely with another experienced programmer from whom I learned how to map processes and from these write user stories, how to use Git and Github, and even how to format my code properly.&lt;/p&gt;
&lt;p&gt;Yes, the project was for no monetary value, but was genuinely instrumental in my career.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/RBC1B/ROMS&quot; title=&quot;The Edifice Project on GitHub&quot;&gt;Edifice on Github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;project-2:-freebabylon5.com&quot; tabindex=&quot;-1&quot;&gt;Project 2: &lt;a href=&quot;http://freebabylon5.com/&quot;&gt;freebabylon5.com&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/things-I-learned-working-for-free/#project-2:-freebabylon5.com&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I volunteered to build this website because - as you&#39;ll know if you follow me on Twitter - I love this 90s TV show. The fan campaign to get the show back on television is run by one stalwart fan, and they needed a home website.&lt;/p&gt;
&lt;p&gt;I built the site on Bootstrap and Wordpress, very quickly. I think it was in about 3 weeks in my spare time. Whilst it was fun, I didn&#39;t do anything spectacularly original during the build.&lt;/p&gt;
&lt;p&gt;But after the project went live, I tracked user flows and kept in touch with the fans via social media, and iterated on the site. It was great to have fan feedback and suggestions, and to see when I changed something on the site, what the results could be.&lt;/p&gt;
&lt;p&gt;Being motivated to refine the site after the go live taught me so much about how a website is a living document that can change to fit the changing needs of its users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://freebabylon5.com/&quot; title=&quot;freebabylon5.com&quot;&gt;freebabylon5.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-internet-built-on-free&quot; tabindex=&quot;-1&quot;&gt;The Internet - Built on Free &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/things-I-learned-working-for-free/#the-internet-built-on-free&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A huge chunk of the progress in web standards, in the ability to do incredible stuff with websites, in what we know as the internet today came about by dedicated people who were willing to invest their time and effort building the community and constructing the things we benefit from each day.&lt;/p&gt;
&lt;p&gt;So-doing stuff for free, generally a bad idea. Unless there&#39;s some personal gain or it&#39;s for a cause you genuinely care about and are willing to invest in.&lt;/p&gt;
&lt;p&gt;You may be surprised what you can learn from getting involved in many incredible projects that really need your support. &lt;a href=&quot;https://github.com/sass/libsass&quot; title=&quot;C Implementation of Sass on Github&quot;&gt;Here&#39;s one that needs our help right now.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Don&#39;t Do Everything The Same Way</title>
    <link href="https://example.com/posts/dont-do-everything-the-same-way/"/>
    <updated>2015-03-17T14:21:21Z</updated>
    <id>https://example.com/posts/dont-do-everything-the-same-way/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;As a project manager, I sometimes get a bit fed up having to make decisions about which CMS should be used on a project. This is just one of those fields where it seems as if it would be much easier to just pick one and stick with it. But there&#39;s a reason we should not do everything the same way—and it&#39;s related to DNA.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DNA is a funny thing. Take flowers for example. Given enough time, you can get a whole field of flowers from only one original plant. But what happens when some disease enters that field? It can destroy every plant you have so very quickly.&lt;/p&gt;
&lt;p&gt;So genetic diversity is a protection against disease. By being different, there is more protection. This diversity will allow plants of a different makeup to continue even if one type happens to be completely wiped out.&lt;/p&gt;
&lt;p&gt;With our project decisions, we can look at it in a similar way. Yes, it can conserve some resources by sticking to just one CMS and forgetting the rest, trying to shoehorn everything into one system to make it fit somehow (even if you have to break your integrity a bit doing so) ... but surely there&#39;s a better solution.&lt;/p&gt;
&lt;h3 id=&quot;beauty-in-diversity&quot; tabindex=&quot;-1&quot;&gt;Beauty in Diversity &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dont-do-everything-the-same-way/#beauty-in-diversity&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Carrying on the flower analogy, the one thing that flowers have is variety. Hannah frequently tries to educate me in the difference between one species and another, why they&#39;re different, and that often there are a number of varieties of colour, shape and size within each variety.&lt;/p&gt;
&lt;p&gt;If we accept the slightly larger overheads of having to think about decisions, we benefit because we build diversity. We can often look at a project in a different way, with a solution in mind that is a much better fit to what we actually need.&lt;/p&gt;
&lt;p&gt;I was taught this recently on a project where we&#39;re using Wordpress. A developer suggested we go with a different solution for building forms for this project. I initially resisted. Why &lt;em&gt;would&lt;/em&gt; we choose something else, when this one solution that I always use on every other project of this nature seemed adequate.&lt;/p&gt;
&lt;p&gt;But then we looked at the use cases. And the extra stuff we&#39;d have to do if we used the &amp;quot;standard&amp;quot; that I&#39;d build up in my head. It soon became apparent that it was far from the solution we needed. And the other solution just fit, hand in glove.&lt;/p&gt;
&lt;p&gt;The additional benefit is that with this approach, we&#39;re also building our knowledge pool. Now developers will increase their expertise as they work with different systems and in different ways. This creates more opportunity for them personally, and more potential for you.&lt;/p&gt;
&lt;p&gt;So it has the ability to strengthen the team too.&lt;/p&gt;
&lt;h3 id=&quot;be-different.&quot; tabindex=&quot;-1&quot;&gt;Be Different. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dont-do-everything-the-same-way/#be-different.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve realised I have to lay off the Wordpress bashing a little bit; I do feel that I am overly critical of that system because of its ubiquity. However I&#39;m trying to be more general here—there are lots of benefits to project managers and their teams if we embrace the diversity of our projects, and don&#39;t do everything the same way.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Poetry: Osip Mandelshtam / Philip Nikolayev</title>
    <link href="https://example.com/posts/poetry-nikolayev-mandelshtam/"/>
    <updated>2015-04-02T14:21:21Z</updated>
    <id>https://example.com/posts/poetry-nikolayev-mandelshtam/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Since reading Boris Pasternak&#39;s Doctor Zhivago, I&#39;ve been deeply moved by his poetry. I&#39;ve just discovered the wonderful contemporary Russian poet Osip Mandelshtam, who, like Pasternak, evokes some wonderful imagery and delightful reveries.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Philip Nikolayev has a wonderful command of the English language, and his translations of Mandelshtam&#39;s poems is really delightful, particularly in his use of alliteration. Here&#39;s my favourite one:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Insomnia, Homer, taut sails: my lips have lisped&lt;br /&gt;
Down to the middle the detailed list of ships,&lt;br /&gt;
That long brood and angular train of cranes&lt;br /&gt;
That rose above Hellas once on wings of waves.&lt;/p&gt;
&lt;p&gt;A wedge of cranes into far foreign lands -&lt;br /&gt;&lt;br /&gt;
Divine white froth forming upon kings&#39; heads -&lt;br /&gt;&lt;br /&gt;
Where have you hoist sail to/ If it were not for Helen&lt;br /&gt;&lt;br /&gt;
What would Troy alone be to you, Achaean men?&lt;/p&gt;
&lt;p&gt;The sea and Homer - as all - are moved by love;&lt;br /&gt;&lt;br /&gt;
Which should I hark? Homer the first to fall&lt;br /&gt;&lt;br /&gt;
Silent, the black sea&#39;s cries still rhapsodize&lt;br /&gt;&lt;br /&gt;
Reaching to where I lie with sleep-filled eyes.&lt;/p&gt;
&lt;/blockquote&gt;
If you want to find out more about Osip Mandelshtam, there&#39;s [a dedicated facebook page](https://www.facebook.com/osipmandelshtampage/ &quot;Osip Mandelshtam on Facebook&quot;). The translator, Philip Nicolayev, is curator of [Fulcrum: an annual of poetry and aesthetics](https://www.facebook.com/FulcrumPoetry &quot;Fulcrum: an annual of poetry and aesthetics&quot;).
</content>
  </entry>
  
  <entry>
    <title>Understanding Developers and Time</title>
    <link href="https://example.com/posts/developers-and-time/"/>
    <updated>2015-04-14T14:21:21Z</updated>
    <id>https://example.com/posts/developers-and-time/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Project managers (and clients) view time very differently from developers. It&#39;s not just in the way we structure our thinking in order to work, but in order to plan and decide too. On 2 occasions recently I have been able to manage expectations better in order to allow both managers and developers the space to complete their respective tasks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was surprised how these two events happened in such quick succession of each other; yet belie a lack of understanding between the two parties which is a strong argument in my mind for manager - developers.&lt;/p&gt;
&lt;p&gt;On the first occasion, a developer working on a key project refused to answer the account managers&#39; calls. With a fast-approaching deadline the account manager understandably began to worry, and therefore became more persistent in their pursuit of a reply from the developer.&lt;/p&gt;
&lt;p&gt;On the second occasion, a friend asked me to get in touch with his web developer for him, as she had seemingly disappeared. After three weeks he had seen no results for a project that he had been told was almost finished.&lt;/p&gt;
&lt;h3 id=&quot;deadlines-as-guidelines&quot; tabindex=&quot;-1&quot;&gt;Deadlines As Guidelines &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-and-time/#deadlines-as-guidelines&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A deadline is, to a developer, a guideline. If it was not, then we would not have the thinking space necessary in order to complete our work.&lt;/p&gt;
&lt;p&gt;This was brought to my mind recently when a database developer friend of mine said that his manager was persistently stressing the urgency of some work that needed to be done, but the developer was calmly working away. It may have seemed very neglectful behaviour to the manager. But then the developer told me about the potential consequences.&lt;/p&gt;
&lt;p&gt;&amp;quot;One wrong keystroke and I could have messed up the entire database. If I hadn&#39;t taken appropriate care, the 1 hour job could have turned into a couple of weeks.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is part of the reason we have a comparatively high hourly rate too: making database changes is easy; doing it whilst taking the appropriate cautionary measures (and not messing it up with a wrong keystroke) is where it really counts.&lt;/p&gt;
&lt;p&gt;Also, in order to be a successful developer, one must be able to focus on the task at hand. That means that social media, office chit-chat and even lunch breaks and finishing times might be changed significantly in order to concentrate on the workload.&lt;/p&gt;
&lt;p&gt;So in our first situation, I knew that we could have confidence in the developer. And if we expressed our need in a calmer, more undemanding manner, we would be more likely to get a reply that we needed.&lt;/p&gt;
&lt;p&gt;Sure enough, once we&#39;d asked him in that way, the answer came and the site was ready in good time.&lt;/p&gt;
&lt;h3 id=&quot;three-weeks-isn&#39;t-a-long-time&quot; tabindex=&quot;-1&quot;&gt;Three Weeks isn&#39;t a Long Time &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-and-time/#three-weeks-isn&#39;t-a-long-time&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On my second example, after talking the situation through with my friend, I found out that he had asked her to provide an ecommerce solution in addition to the website she had built. This wasn&#39;t part of the original brief.&lt;/p&gt;
&lt;p&gt;Straight away I knew what had probably happened: once ecommerce was added on to the project, she was faced with a huge amount of scope creep which she didn&#39;t verbalise  (from either lack of confidence or not knowing how to explain it, which is a big problem in our line of work).&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;In order to be a successful developer, one must be able to focus on the task at hand.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whatever reason it was, I suspect hearing the words &amp;quot;adding a shopping cart is easy, isn&#39;t it?&amp;quot; is enough to send a timid developer scurrying.&lt;/p&gt;
&lt;p&gt;Once I knew that&#39;s what happened, just saying the words &amp;quot;three weeks isn&#39;t a long time&amp;quot; was accepted; a brief explanation that &amp;quot;adding a shopping cart&amp;quot; wasn&#39;t a small job and that he shouldn&#39;t lose confidence in her, was enough to ease the situation.&lt;/p&gt;
&lt;h3 id=&quot;developers-as-managers&quot; tabindex=&quot;-1&quot;&gt;Developers As Managers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-and-time/#developers-as-managers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s been argued before (and I wish I&#39;d saved the link so I could share it with you) that developers should be encouraged more often to take up the role of management.&lt;/p&gt;
&lt;p&gt;Having a Project Manager who is also a developer means that communication flows much more easily and problems can better be forseen and avoided. Management expectations can be dealt with in a much better way, and developers can have the appropriate space to discuss their concerns and better verbalise where there are problems.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First Steps with CSS Animations</title>
    <link href="https://example.com/posts/first-steps-with-css-animations/"/>
    <updated>2015-04-14T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-css-animations/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;CSS Animations are quickly complimenting if not replacing Javascript for generating a little bit of on-page whizz (that&#39;s the technical term). This is the first time I&#39;ve delved into the syntax for CSS Animations that I hope can replace the tired carousels resident on many websites. Here&#39;s how I implemented it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, I&#39;ve stuck to using CSS for this project although I&#39;m using SASS for this site. The reason is that I wanted to get familiar with the CSS syntax first. I don&#39;t want to chain myself to SASS because it&#39;s one step removed from what the browser renders. Anyway, that&#39;s a story for another day.&lt;/p&gt;
&lt;h3 id=&quot;step-1:-scope-the-animation&quot; tabindex=&quot;-1&quot;&gt;Step 1: Scope the Animation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#step-1:-scope-the-animation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Being a small marketing agency we&#39;re still formulating the best way to approach website builds. So this project came to me with a visual design but no scope. The designs showed what was required, that the circular images would change to reveal text on flat background.&lt;/p&gt;
&lt;p&gt;What they weren&#39;t so good at displaying is the end state of the animation. Would it roll around again? The plan was originally for a Javascript carousel here, so I could make some assumptions about the functionality based on that.&lt;/p&gt;
&lt;h3 id=&quot;step-2:-the-html&quot; tabindex=&quot;-1&quot;&gt;Step 2: The HTML &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#step-2:-the-html&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;services.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-sm-3 home-circle&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;one&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bottom&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;five&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/assets/img/property1.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;services.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-sm-3 home-circle&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;two&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bottom&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;six&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/assets/img/property2.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;services.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-sm-3 home-circle&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;three&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bottom&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;seven&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/assets/img/property3.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;services.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col-sm-3 home-circle&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;four&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bottom&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;eight&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/assets/img/property4.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This took me a few attempts to work out. I try to avoid using &lt;code&gt;position:absolute&lt;/code&gt; wherever possible, so in this case I used a &lt;code&gt;background-image&lt;/code&gt; on the parent &lt;code&gt;div&lt;/code&gt; with an &lt;code&gt;img&lt;/code&gt; inside.&lt;/p&gt;
&lt;h3 id=&quot;step-3:-declaring-the-first-animation&quot; tabindex=&quot;-1&quot;&gt;Step 3: Declaring the First Animation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#step-3:-declaring-the-first-animation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@-webkit-keyframes&lt;/span&gt; fadeOut&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@-moz-keyframes&lt;/span&gt; fadeOut&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@keyframes&lt;/span&gt; fadeOut&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@-webkit-keyframes&lt;/span&gt; fadeIn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@-moz-keyframes&lt;/span&gt; fadeIn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@keyframes&lt;/span&gt; fadeIn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.home-banner .container a .col-sm-3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-webkit-animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;fadeIn ease-in 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-moz-animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;fadeIn ease-in 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;fadeIn ease-in 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-webkit-animation-fill-mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;forwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-moz-animation-fill-mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;forwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;animation-fill-mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;forwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-webkit-animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;-moz-animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I&#39;m a visually-minded person, I decided to break my CSS into two parts and to declare the animations in areas that would help me logically follow what was displaying on the site, even if it would be slightly less efficient. I&#39;m sure that as I get more used to the syntax I&#39;ll change this practice to be as efficient as possible (and to use SASS).&lt;/p&gt;
&lt;h3 id=&quot;step-4:-timing&quot; tabindex=&quot;-1&quot;&gt;Step 4: Timing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#step-4:-timing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve heard it said a few times that timing is the hardest thing to get right in an animation. It was quite difficult to work out the gaps that their should be between each animation state, and took quite a few goes before it appeared to flow smoothly, almost as if there was a short increase in speed in the middle two animations, although this is just a perception.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.home-banner #one&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&#39;/assets/img/propcons.svg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; center no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-moz-animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.4s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.home-banner #two&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&#39;/assets/img/charsurv.svg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; center no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.8s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;-moz-animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.8s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;animation-delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.8s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I was very conscious of was that the delay between the first animation (the property images) appearing, and the second (the text overlays) needed to be a) slow enough so the client felt they had good value out of the images we had provided and b) fast enough that visitors would see the second transition before they scrolled further down the page.&lt;/p&gt;
&lt;p&gt;So we settled on .6 seconds, which seemed to be the optimum delay we could achieve without investing in further research.&lt;/p&gt;
&lt;p&gt;Here&#39;s the result (sorry for the high compression - wanted to keep a smaller file size as possible!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/wdb.gif&quot; alt=&quot;Animation demo&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;browser-caveats&quot; tabindex=&quot;-1&quot;&gt;Browser Caveats &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#browser-caveats&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What we noticed going through the testing phase was that certain aspects of the animation spec are still under development. Some things like &lt;code&gt;animation-reverse&lt;/code&gt; aren&#39;t supported in Vivaldi or Mobile Chrome (tested on iOS 8). But we felt that since the animation still works to a fair degree, it would be reasonable to keep using it.&lt;/p&gt;
&lt;h3 id=&quot;css-animations-the-way-forward&quot; tabindex=&quot;-1&quot;&gt;CSS Animations - The Way Forward &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-css-animations/#css-animations-the-way-forward&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I got a huge amount of satisfaction trying out the CSS Animation spec. This isn&#39;t only due to my lack of JavaScript skills (which are steadily improving) but also my desire to build high quality websites that are as lightweight as possible.&lt;/p&gt;
&lt;p&gt;The outcome was so well recieved by our team involved that it&#39;s opened our designers and other stakeholders eyes to the options available to them:- they now have many, many more options at their fingertips instead of only the aged and worn carousel default.&lt;/p&gt;
&lt;p&gt;This demonstrated for me that even though it is often difficult to step out of our comfort zone, but the rewards of doing so are often great.&lt;/p&gt;
&lt;p&gt;I&#39;d love to know how you would improve on this code, or if you&#39;ve used CSS Animations in a way that has challenged you recently.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/muzzlehatch_&quot; title=&quot;Benjamin Read on Twitter&quot;&gt;Get in touch with me on Twitter&lt;/a&gt; if you have!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>#StudioSounds: Crossroads Playlist</title>
    <link href="https://example.com/posts/studiosounds-crossroads/"/>
    <updated>2015-04-14T14:21:21Z</updated>
    <id>https://example.com/posts/studiosounds-crossroads/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Here&#39;s another fantastic playlist from Designer&#39;s Mix, called Crossroads. If you&#39;re an 80s kid, or possibly 90s too, you&#39;ll love the synth beats of this track listing.&lt;/strong&gt;&lt;/p&gt;
&lt;iframe src=&quot;https://embed.spotify.com/?uri=spotify:user:kreativoperativ:playlist:6yvA71kH613Z7L0leUancW&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&amp;quot;Streets of 2043&amp;quot; and &amp;quot;Nightcall&amp;quot; are my personal favourites.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why Agile is So Hard</title>
    <link href="https://example.com/posts/why-agile-is-so-hard/"/>
    <updated>2015-05-06T14:21:21Z</updated>
    <id>https://example.com/posts/why-agile-is-so-hard/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;For many organisations, Agile methods are replacing the traditional waterfall or cascading approach to web development. But it&#39;s not always easy to implement, and sometimes Agile implementations fail. This isn&#39;t usually down to the process being adopted, but another reason that can affect every team...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Agile as a project management method is such a great tool. Since I was introduced to way of working, I&#39;ve been excited by the greater segmentation and breakdown of tasks, encouraged when I see items flow across my Kanban task board, and delighted when I&#39;m scoping out a project. I have also been slightly uneasy at the unknowns--the potential for a new client requirement, for the stories that seem to spiral out of control because they need breaking down.&lt;/p&gt;
&lt;h3 id=&quot;when-agile-fails&quot; tabindex=&quot;-1&quot;&gt;When Agile Fails &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-agile-is-so-hard/#when-agile-fails&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve also encountered something that can stop Agile dead in it&#39;s tracks. Something that is hard to overcome because sometimes, the habits have become so ingrained in an individual or organsation that it&#39;s too difficult to overcome.&lt;/p&gt;
&lt;p&gt;You see, in order to work in an Agile way you have to let go a little bit. It may be your project, your baby, but without the team having a meaningful stake in it, without them feeling that they own or are responsible for it, it can&#39;t succeed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;&quot;In order to work in an Agile way you have to let go a little bit.&quot;&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re used to telling people what to do, this might be something hard to get used to. Your relationship with your co-workers must change if Agile is to succeed. Your colleagues become just that-colleagues, not subordinates.&lt;/p&gt;
&lt;p&gt;Now we take on the role of coach and guider instead of &amp;quot;manager&amp;quot;. But as a result, something better happens. We take on the role of &amp;quot;director&amp;quot;--someone who directs things, without necessarily being hands-on with every aspect of development.&lt;/p&gt;
&lt;h3 id=&quot;lose-control-in-a-good-way.&quot; tabindex=&quot;-1&quot;&gt;Lose Control -- in a Good Way. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-agile-is-so-hard/#lose-control-in-a-good-way.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Designers too need to let go of the total control they once had over the visual aspects of a project. Instead they guide decisions, as well as being guided themselves, by project requirements, by build requirements, and by the greater good of the project and the team.&lt;/p&gt;
&lt;p&gt;If a designer is used to asserting his or her control over a project, that could react badly with the team, especially if there are cross words or absolute statements said out of frustration.&lt;/p&gt;
&lt;p&gt;Think about it: what impact will venting frustration have on the team? Will they want to include me, or will I be excluded, even ignored?&lt;/p&gt;
&lt;p&gt;Instead, visual designers can work with a team, and see satisfying results of being included as equal partners in the project. They can see developers and others involved using their guidance and recommendations in the project.&lt;/p&gt;
&lt;p&gt;And what can be more satisfying that being approached by others for your thoughts? This can happen if designers lose control in a good way.&lt;/p&gt;
&lt;h3 id=&quot;empowerment&quot; tabindex=&quot;-1&quot;&gt;Empowerment &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-agile-is-so-hard/#empowerment&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a team is empowered to share equal roles, and be responsible for their segment of work a team flourishes. Once they have understood each of their roles and built mutual respect, the agile process can roll ahead well.&lt;/p&gt;
&lt;p&gt;I&#39;m not saying there&#39;s never a need for animated discussion, for honest talk. There&#39;s always a need for that-in the &lt;em&gt;appropriate setting&lt;/em&gt; and with the &lt;em&gt;appropriate amount of respect&lt;/em&gt; for your colleagues.&lt;/p&gt;
&lt;p&gt;But if we learn to let go, to cede control to the group, to nurture the team to its full potential, to encourage discussion, encourage the challenging of assumptions, then Agile teams will not only avoid problems, but can really succeed in delivering a great project that everybody can be proud of.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Advanced Custom Fields and Bootstrap Tabs</title>
    <link href="https://example.com/posts/advanced-custom-fields-bootstrap-tabs/"/>
    <updated>2015-06-02T14:21:21Z</updated>
    <id>https://example.com/posts/advanced-custom-fields-bootstrap-tabs/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;m not a huge fan of Advanced Custom Fields, but there was a requirement to use it in a recent project that had Bootstrap as a basis for the UI. The challenge for me was to get Bootstrap &lt;a href=&quot;https://getbootstrap.com/components/#nav-tabs&quot; title=&quot;Bootstrap nav-tabs component&quot;&gt;nav-tabs&lt;/a&gt; to play nice with an &lt;a href=&quot;https://www.advancedcustomfields.com/img/querying-the-database-for-repeater-sub-field-values/&quot; title=&quot;Repeater sub-field on Advanced Custom Fields website&quot;&gt;ACF repeater field&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started with the basic HTML markup for Bootstrap&#39;s Nav Tabs:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;nav nav-tabs&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;presentation&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabone&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;TabOne&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;presentation&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabtwo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;TabTwo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;presentation&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabthree&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;TabThree&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-pane active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabone&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     Some content in tab one&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-pane active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabtwo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     Some content in tab two&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-pane active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabthree&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;     Some content in tab three&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Field Groups settings, I created a Repeater (this is a paid-for add on to the standard Advanced Custom Fields) called &amp;quot;tab Panes&amp;quot;, with 2 sub-fields, &amp;quot;Tab Title&amp;quot; and &amp;quot;Tab Contents&amp;quot;.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; Check &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;parent&lt;/span&gt; repeater row &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;have_rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_panes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;nav nav-tabs&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tablist&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Step 1: Loop through rows, first displaying tab titles in a list&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;have_rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_panes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name return-type&quot;&gt;the_row&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;presentation&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#tabone&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;data-toggle&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;the_sub_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// end of (have_rows(&#39;tab_panes&#39;) ):&lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// end of (have_rows(&#39;tab_panes&#39;) ): &lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The PHP above displays the tabs. The code below, very similarly, displays the tab panes:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;have_rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_panes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?&lt;/span&gt;php&lt;span class=&quot;token comment&quot;&gt;// number rows &lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Step 2: Loop through rows, now displaying tab contents&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;have_rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_panes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name return-type&quot;&gt;the_row&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Display each item as a list &lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tab-pane active&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tabone&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;the_sub_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_contents&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (have_rows(&#39;tab_panes&#39;) ):&lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (have_rows(&#39;tab_panes&#39;) ): &lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By looping through the same repeater, we can get all the tabs out of the database, no problem. But we still have two problems: 1) linking the tab to the pane 2) Assigning the class of &amp;quot;active&amp;quot; so the Javascript is able to add and remove the CSS to reveal / hide the appropriate pane.&lt;/p&gt;
&lt;p&gt;###1) Linking to the Pane&lt;/p&gt;
&lt;p&gt;There are a number of ways to do this. I could ask the user to input a number to uniquely identify the tab pane. But that would add extra work to the users flow, and they might easily find themselves out of their depth. I want to make this as easy as possible for the user.&lt;/p&gt;
&lt;p&gt;On the other hand, Wordpress has a very useful function called Sanitize HTML, which we input the value of the title, take out spaces and capitals, and use this as the link:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;a href=&quot;#&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sanitize_html_class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;the_sub_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;tab_title&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###2) Assigning the &#39;Active&#39; Class&lt;/p&gt;
&lt;p&gt;So now we need to get a class of &#39;active&#39; &lt;em&gt;only on&lt;/em&gt; the first tab. The Bootstrap Javascript will do the rest for us. How do we do that?&lt;/p&gt;
&lt;p&gt;I added this code just inside the &lt;code&gt;while&lt;/code&gt; loop, inside the &lt;code&gt;ul&lt;/code&gt; tag:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// number rows &lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This php is a counter. So we can identify the first instance and assign an &lt;code&gt;if&lt;/code&gt; statement to it.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final thing to do, is to keep the counter running, but adding this jsut before the &lt;code&gt;endwhile&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endwhile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (have_rows(&#39;tab_panes&#39;) ):&lt;/span&gt;&lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&#39;ve added these to the tab panes in a similar way, you&#39;ll be up and running with Boostrap Tabs.&lt;/p&gt;
&lt;p&gt;Below is a Github Gist, with the complete code for reference. &lt;a href=&quot;https://gist.github.com/endymion1818/478d86025f41c8060888&quot; title=&quot;Github GIST for Advanced Custom Fields bootstrap tabs&quot;&gt;Link to this (if you can&#39;t see the iFrame)&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/endymion1818/478d86025f41c8060888.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>I Built A Wordpress Bootstrap starter theme</title>
    <link href="https://example.com/posts/wordpress-bootstrap-starter-theme/"/>
    <updated>2015-06-26T14:21:21Z</updated>
    <id>https://example.com/posts/wordpress-bootstrap-starter-theme/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve been using the esteemed &lt;a href=&quot;https://github.com/rachelbaker/bootstrapwp-Twitter-Bootstrap-for-WordPress/tree/bootstrap3&quot; title=&quot;Rachel Baker&#39;s BootstrapWP on GitHub&quot;&gt;Rachel Baker&#39;s BootstrapWP&lt;/a&gt; theme for a while, but recently I decided to build my own Wordpress / Bootstrap starter theme. Here&#39;s why I took this step and what I plan to do with it in the future.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s still an argument raging about whether or not web developers should use Bootstrap or Foundation as a UI starting point for their projects. I don&#39;t want to undermine the very valid and extremely important role of UX / UI design. We do want to avoid every site looking the same (current trends notwithstanding).&lt;/p&gt;
&lt;h3 id=&quot;once-more-unto-the-breach-dear-friends-...&quot; tabindex=&quot;-1&quot;&gt;Once More Unto The Breach, Dear Friends ... &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#once-more-unto-the-breach-dear-friends-...&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the same time, I really think that Bootstrap, Foundation and the rest have raised the bar for good UI design significantly.&lt;/p&gt;
&lt;p&gt;For example, where I work we do a lot of work for smaller clients who don&#39;t have the budget for a developer to work on a site for over a month, doing everything from scratch. To better serve this range of client, and to avoid going the route of using someone elses potentially un-semantic, bloated and non-extensible paid-for theme, we decided to construct a Wordpress Bootstrap starter theme.&lt;/p&gt;
&lt;p&gt;This way, we can have more control over our code, we can keep more projects in-house, and still raise the standard of production for these smaller clients.&lt;/p&gt;
&lt;h3 id=&quot;crafting-a-theme-with-wordpress-and-bootstrap&quot; tabindex=&quot;-1&quot;&gt;Crafting a Theme with Wordpress and Bootstrap &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#crafting-a-theme-with-wordpress-and-bootstrap&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s not the purpose of this post to list everything the theme contains. In fact, it&#39;s far from complete and as I use it on live projects in the coming months, I&#39;ll no doubt add functionality I find useful / desireable. But I have started off by adding the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Menu item CSS styles (replaced Bootstrap&#39;s .active with Wordpress&#39; .current-menu-item etc)&lt;/li&gt;
&lt;li&gt;Breadcrumb support&lt;/li&gt;
&lt;li&gt;Better pagination (the page will display a UL list of pages, instead of just &amp;quot;older&amp;quot; and &amp;quot;newer&amp;quot; links)&lt;/li&gt;
&lt;li&gt;Uncompressed and deregistered Jetpack&#39;s CSS file by default (because there&#39;s just no need for bloat).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might see that I&#39;m on a personal mission to end needless bloat as much as I reasonably can.&lt;/p&gt;
&lt;h3 id=&quot;other-nice-things&quot; tabindex=&quot;-1&quot;&gt;Other Nice Things &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#other-nice-things&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve also added a sample &lt;code&gt;wp-config.php&lt;/code&gt; file that allows you to add your local, development environment and live database information all in one, so you don&#39;t have to worry about overwriting the file when you commit a change or upload a batch of files.&lt;/p&gt;
&lt;p&gt;There&#39;s a sample &lt;code&gt;htaccess&lt;/code&gt; file too, adding support for &lt;code&gt;svg&lt;/code&gt; files. I frequently encountered that this was turned off by default on the servers I&#39;ve been working on. Because SVGs are so useful especially for logos, I&#39;ve enabled this on Apache / NGIX servers using this code snippet.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;htaccess&lt;/code&gt; file also adds support for &lt;code&gt;mod_deflate&lt;/code&gt; too, so gZipping can be enabled easily. This is something I found I was forgetting to do once a project was going live, so this helped me to streamline my processes.&lt;/p&gt;
&lt;h3 id=&quot;what&#39;s-not-there&quot; tabindex=&quot;-1&quot;&gt;What&#39;s not there &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#what&#39;s-not-there&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Template files are virtually non-existant in this theme, outside of the Wordpress standard pages &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;front-page&lt;/code&gt;. I have included a template for a &lt;code&gt;sitemap&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;More templates will follow when I have the time, possibly &lt;a href=&quot;https://getbootstrap.com/getting-started/#examples&quot; title=&quot;example pages constructed with Bootstrap&quot;&gt;using the existing starter templates&lt;/a&gt; or when I&#39;ve worked on a project that contains some particularly useful, challenging or interesting templates.&lt;/p&gt;
&lt;h3 id=&quot;updates&quot; tabindex=&quot;-1&quot;&gt;Updates &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#updates&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This project will be updated and maintained regularly. I&#39;m particularly interested by &lt;a href=&quot;https://blog.getbootstrap.com/2014/10/29/bootstrap-3-3-0-released/&quot; title=&quot;Bootstrap blog post containing info about Bootstrap 4&quot;&gt;the roadmap to Bootstrap 4&lt;/a&gt;, and can&#39;t wait to incorporate it here (although I personally might wait until 4.1 before I use it in production).&lt;/p&gt;
&lt;h3 id=&quot;there-you-have-it.&quot; tabindex=&quot;-1&quot;&gt;There you have it. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-bootstrap-starter-theme/#there-you-have-it.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There you go, &lt;a href=&quot;https://github.com/endymion1818/blazebase/&quot; title=&quot;Link to Blaze Base starter Wordpress theme&quot;&gt;feel free to download this starter theme&lt;/a&gt;. If you notice any bugs, please report them via &lt;a href=&quot;https://github.com/endymion1818/blazebase&quot; title=&quot;GitHub repository for this theme&quot;&gt;Github Issues&lt;/a&gt;, or just get in touch via &lt;a href=&quot;https://twitter.com/muzzlehatch_&quot; title=&quot;Benjamin Read on Twitter&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Future is Headless</title>
    <link href="https://example.com/posts/the-future-is-headless/"/>
    <updated>2015-08-10T14:21:21Z</updated>
    <id>https://example.com/posts/the-future-is-headless/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;If you&#39;ve been in the industry for any length of time, the chances are that you&#39;ve been in one of those discussions about CMSes that are &lt;em&gt;never&lt;/em&gt; resolved. That is about to change forever ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Content management systems have revolutionised web development. From the start of their existence, we haven&#39;t had web &lt;em&gt;sites&lt;/em&gt; any more—we&#39;ve had web &lt;em&gt;systems&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&#39;s the web&#39;s innovation which has contributed to the success of the medium that it is today.&lt;/p&gt;
&lt;p&gt;But it does mean that we&#39;re always on a bit of a back foot, not understanding all of what is going on around us—because it&#39;s in a constant state of flux.&lt;/p&gt;
&lt;p&gt;Today I saw a video from Drupalcon that I immediately thought: &amp;quot;That&#39;s the future.&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;what-is-headless&quot; tabindex=&quot;-1&quot;&gt;What is headless? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/the-future-is-headless/#what-is-headless&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A headless CMS is just that - headless. It doesn&#39;t have a web front end. So there &lt;em&gt;is&lt;/em&gt; no templating system to hack around. The CMS doesn&#39;t affect the web front end in the same way it does today.&lt;/p&gt;
&lt;p&gt;It still runs the website, but in a drastically different way, using JSON data and REST.&lt;/p&gt;
&lt;p&gt;Think about this: no more PHP mixed in with your HTML. No more overriding plugins that inject icons into your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; that you&#39;re never going to use. Ever.&lt;/p&gt;
&lt;p&gt;Sounds like a massive step up to me.&lt;/p&gt;
&lt;p&gt;But there are &lt;em&gt;many&lt;/em&gt; other advantages to serverside developers and organisations alike. Users can publish their content once and have it displayed on the app, the website and on syndicated sites all at the same time. CMSes can be updated without breaking the frontend ... because there is no frontend.&lt;/p&gt;
&lt;h3 id=&quot;what-it-will-ask-of-us&quot; tabindex=&quot;-1&quot;&gt;What it will ask of us &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/the-future-is-headless/#what-it-will-ask-of-us&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With any technology change, we have to learn new skillsets. It takes time. But with such clear advantages, and the two biggest CMSes already developing headless systems (&lt;a href=&quot;https://groups.drupal.org/headless-drupal&quot; title=&quot;Drupal Headless community group&quot;&gt;Drupal&lt;/a&gt; and &lt;a href=&quot;https://v2.wp-api.org/&quot; title=&quot;Wordpress API documentation&quot;&gt;Wordpress&lt;/a&gt;) it might be time to start that road.&lt;/p&gt;
&lt;p&gt;Instead of frontend developers having to also know PHP, we will need to concentrate on how to use JSON data via REST. With a frontend framework such as Angular or Backbone, this becomes ... easier.&lt;/p&gt;
&lt;p&gt;Actually, I&#39;m having trouble writing this section here with confidence ... I&#39;m still working out how it all comes together. But I don&#39;t think that&#39;s a bad thing.&lt;/p&gt;
&lt;p&gt;Sit through this video, if it blows your mind like it did mine, then we have an interesting road to travel ahead.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;“... in the technology industry, where revolutionary ideas drive the next big growth areas, you need to be a bit uncomfortable to stay relevant.”&lt;/h1&gt;
&lt;attr&gt;—Larry Page, [Alphabet](https://abc.xyz/ &quot;Alphabet (formerly Google) home page&quot;)&lt;/attr&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GX9z5M9mz30&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Bootstrap 4 Alpha Review</title>
    <link href="https://example.com/posts/bootstrap-4-alpha-review/"/>
    <updated>2015-09-10T14:21:21Z</updated>
    <id>https://example.com/posts/bootstrap-4-alpha-review/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Bootstrap 4 was released last week, and I downloaded it straight away, plugging it into my Wordpress base theme. Some things that have been added to the project are really good ... but the team have made some interesting design choices in what they&#39;ve changed ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m starting to get away from Bootstrap in production sites. I have become a bit more fussy about what freedom I have with what I develop in recent months. However, even if I never used them again, I would still look towards Bootstrap and Foundation as a sort of a &#39;benchmark&#39; for what is currently best practice in the industry.&lt;/p&gt;
&lt;p&gt;For example, I stopped supporting IE8 when Bootstrap stopped. It was clearly time to let it go. Now with Bootstrap 4 ... what do I need to let go of, or take hold of?&lt;/p&gt;
&lt;h3 id=&quot;get-it:-es6&quot; tabindex=&quot;-1&quot;&gt;Get it: ES6 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#get-it:-es6&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The world is finally ready for ES6 implementation of JavaScript. All of Bootstrap&#39;s plugins have been written in the updated spec. This means that support for IE9 has been dropped too.&lt;/p&gt;
&lt;p&gt;Goodbye, IE9.&lt;/p&gt;
&lt;h3 id=&quot;get-it:-sass&quot; tabindex=&quot;-1&quot;&gt;Get it: SASS &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#get-it:-sass&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unfortunately, LESS seems to have lost the battle when it comes to CSS preprocessors. The syntax is just that bit easier IMHO, even though the ease of use (the possibility of compiling on the front end with JavaScript) was a good idea, it just proved too slow.&lt;/p&gt;
&lt;p&gt;SASS is the way forward ... well, at least until PostCSS is ready for the main stage... but that&#39;s another story.&lt;/p&gt;
&lt;h3 id=&quot;drop-it:-sub-navs&quot; tabindex=&quot;-1&quot;&gt;Drop it: Sub Navs &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#drop-it:-sub-navs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s too easy to create sub navs in Wordpress, and generally users are finding them harder to use.&lt;/p&gt;
&lt;p&gt;Also, I&#39;m beginning to think that if you can&#39;t understand and convey your red routes in 3 - 6 links then you might be doing it wrong. Or your clients could benefit from a training session on information architecture.&lt;/p&gt;
&lt;h3 id=&quot;change-it:-hamburger-implementation&quot; tabindex=&quot;-1&quot;&gt;Change it: Hamburger Implementation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#change-it:-hamburger-implementation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There&#39;s been a lot more talk about hamburgers, and how they don&#39;t convert so well lately. Facebook have dropped theirs in favour of tab icons. Many other sites have changed how they implement the &amp;quot;hamburger&amp;quot;, and I have to say, I like it.&lt;/p&gt;
&lt;p&gt;I&#39;m going to try to use the hamburger to contain more &amp;quot;discoverable&amp;quot; content in future, stuff that&#39;s put there for regular visitors. This makes learning the site more fun as you get to know it, without penalising first-time or infrequent visitors who just need to finish their journey really fast.&lt;/p&gt;
&lt;p&gt;See Luke Wroblewski&#39;s article &lt;a href=&quot;https://www.lukew.com/ff/entry.asp?1945&quot; title=&quot;LukeW: Obvious Always Wins&quot;&gt;Obvious Always Wins&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;get-it:-cards&quot; tabindex=&quot;-1&quot;&gt;Get it: Cards &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#get-it:-cards&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&amp;quot;Cards&amp;quot; — an interface element that splits relevant content up into visual containers — are everywhere. Not that ubiquity is necessarily a good thing, but they certainly are a useful design tool and really good for reducing cognitive load.&lt;/p&gt;
&lt;p&gt;Cards clearly segment content into more easily digestible areas so that users can process what they&#39;re seeing faster, again reducing cognitive load. They also can provide a sense of visual depth to your site design.&lt;/p&gt;
&lt;p&gt;I like them, and think this is a good design pattern which I&#39;ll be using more.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/bootstrap-4-alpha-review/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lots of nice things. Yay. Can&#39;t wait to see how this project pans out, and always maintain a sense of gratitute to @fat and @mdo who have raised the bar for web design in general.&lt;/p&gt;
&lt;p&gt;Here&#39;s my implementation of v4 Alpha in a Wordpress theme:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/blazebase/tree/bootstrap4&quot;&gt;https://github.com/endymion1818/blazebase/tree/bootstrap4&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What I learned this year</title>
    <link href="https://example.com/posts/what-i-learned-this-year/"/>
    <updated>2015-09-10T14:21:21Z</updated>
    <id>https://example.com/posts/what-i-learned-this-year/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;For the past year and a bit, I&#39;ve worked at Blaze Communication, a marketing agency in Enfield. I&#39;ve learned so many new things at this company. My knowledge and understanding is far, far different than it was a year ago. Here are some of my observations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All of these things could be blog posts in their own right; but I&#39;m a fan of brevity.&lt;/p&gt;
&lt;h3 id=&quot;how-to-sell-change&quot; tabindex=&quot;-1&quot;&gt;How to Sell Change &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#how-to-sell-change&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Right when I started working for Blaze, I got really annoyed and frustrated because I wanted to change how things were done to the way I was used to ... I&#39;d come from an organization working to very different ways of planning and development, and I wanted to implement all of them straight away.&lt;/p&gt;
&lt;p&gt;I soon found out that change needed to be justified in terms of benefits. So I looked for opportunities to raise the issues &lt;em&gt;I was most concerned about&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After a few strong - but not unpleasant - conversations in which I challenged the validity of certain processes, I got some of what I wanted.&lt;/p&gt;
&lt;p&gt;But I also had to see things from the company&#39;s perspective. They weren&#39;t interested in implementing things unless they could be convinced of a clear benefit. And I realised that some of the things I wanted to do weren&#39;t going to fit.&lt;/p&gt;
&lt;p&gt;I guess I learned that Agile also needs to be Agile.&lt;/p&gt;
&lt;h3 id=&quot;how-to-convince-with-tact&quot; tabindex=&quot;-1&quot;&gt;How to Convince with Tact &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#how-to-convince-with-tact&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It was clear from day one that design skills (or UX skills) were not to be part of my role. However, I could see a gap in the skills of the team when it came to understanding the users&#39; perspective.&lt;/p&gt;
&lt;p&gt;I needed to find a way of doing this tactfully, so I wouldn&#39;t offend their sensibilities. I eventually succeeded in doing this by being patient, building trust with my design colleagues, and complimenting them when I felt there was a basis for doing so.&lt;/p&gt;
&lt;p&gt;Eventually, I was glad to see more talk of &amp;quot;what&#39;s best for the user&amp;quot; near the end of my tenure. I really hope they continue to learn UX based thinking after I move on.&lt;/p&gt;
&lt;h3 id=&quot;how-to-perform-basic-sysadmin-tasks&quot; tabindex=&quot;-1&quot;&gt;How to perform basic SysAdmin tasks &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#how-to-perform-basic-sysadmin-tasks&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The answer: With Great Caution. The first time I transferred in a domain from somewhere else, I knocked a site out for a few days. Also: because they say DNS propagation can take up to 48 hours doesnt mean it will. It&#39;s usually done in an hour or so.&lt;/p&gt;
&lt;p&gt;In the last few days I&#39;ve finished setting up a new server for the company, although a third party did a lot of the leg work it gave me a lot of insight to how these things happen.&lt;/p&gt;
&lt;p&gt;Deciding which version of PHP to install, and the different methods of running it, was a real eye opener for me.&lt;/p&gt;
&lt;p&gt;Migrating a server with 20+ live sites and many DNS records can be fun :-)&lt;/p&gt;
&lt;h3 id=&quot;how-to-effectively-maintain-older-sites&quot; tabindex=&quot;-1&quot;&gt;How to effectively Maintain older sites &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#how-to-effectively-maintain-older-sites&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The main thing is, don&#39;t be too precious about them. If you need to add a lot of extra Javascript just to get things to perform the way the beief describes, do it.&lt;/p&gt;
&lt;p&gt;If it&#39;s an older site and otherwise badly needs updating, it shows that the one responsible doesn&#39;t care too much about it&#39;s upkeep. So why should you invest your care to a greater degree?&lt;/p&gt;
&lt;h3 id=&quot;how-to-use-css-animations&quot; tabindex=&quot;-1&quot;&gt;How to use CSS Animations &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#how-to-use-css-animations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because design thinking wasn&#39;t part of my remit, I had to find another outlet for my creative thinking. I found plenty of scope in CSS Animations.&lt;/p&gt;
&lt;p&gt;When I could see from a design a case for animating something, I would seek a way of doing that in a subtle way. I found that softening page transitions and hover states gave me a way of using time as a canvas.&lt;/p&gt;
&lt;p&gt;Here&#39;s a recent site, that was designed buy our in-house team, but with some added animations:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blazeoven.co.uk/client/obk/&quot; title=&quot;OBK Development site&quot;&gt;https://blazeoven.co.uk/client/obk/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;other-stuff&quot; tabindex=&quot;-1&quot;&gt;Other stuff &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#other-stuff&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How to build a Wordpress theme from scratch, how to use SASS, how to remove a hacked site from blacklists (once cleaned), how to build extensibly, how to manage &amp;amp; support remote developers, how to build a theme that&#39;s easily translateable, how to train clients in the use of their CMS.&lt;/p&gt;
&lt;p&gt;And probably tonnes more things.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-i-learned-this-year/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s been a fascinating year and I&#39;ve learned a huge amount. I can&#39;t wait to get stuck into other work, and hope that I can accelerate and deepen my knowledge by doing so.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Improving Performance on Deliciousreverie.co.uk</title>
    <link href="https://example.com/posts/improving-performance-on-delicious-reverie/"/>
    <updated>2015-10-06T14:21:21Z</updated>
    <id>https://example.com/posts/improving-performance-on-delicious-reverie/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I can&#39;t possibly think I could get away with &lt;a href=&quot;https://deliciousreverie.co.uk/post/why-performance-matters&quot; title=&quot;Why Performance Matters on deliciousreverie.co.uk&quot;&gt;a post about performance&lt;/a&gt; when my own site wasn&#39;t as spot-on as I could get. So I&#39;ve been spending a bit of time investigating how to reduce my load times. This is what I found out and how I implemented it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I built this site in December 2014 when I was on paternity leave. Now that my little bairn is finally sleeping through the night I can look at my code again through significantly less zombified eyes. I found a few things I&#39;d like to improve on, namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduce unused DOM elements&lt;/li&gt;
&lt;li&gt;Use non-blocking HTTP requests (at least on the home page)&lt;/li&gt;
&lt;li&gt;Streamline my CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&#39;s break down each of these and see what can be done to improve them.&lt;/p&gt;
&lt;h3 id=&quot;reducing-unused-dom-elements&quot; tabindex=&quot;-1&quot;&gt;Reducing unused DOM elements &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/improving-performance-on-delicious-reverie/#reducing-unused-dom-elements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I built this site, I originally envisioned a main (central) content area, with sidebars of supplementary content. But at the time, I was beginning to realise &lt;a href=&quot;https://deliciousreverie.co.uk/blog/post.php?s=2015-03-23-normal-people-dont-understand-sidebars&quot; title=&quot;Normal People Don&#39;t Understand Sidebars on deliciousreverie.co.uk&quot;&gt;that normal people don&#39;t understand sidebars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have since decided to just focus on delivering good content in a branded experience. That&#39;s the core of what I wanted to achieve here.&lt;/p&gt;
&lt;p&gt;So the sidebar elements are gone, along with their CSS.&lt;/p&gt;
&lt;h3 id=&quot;use-non-blocking-http-requests&quot; tabindex=&quot;-1&quot;&gt;Use non-blocking HTTP requests &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/improving-performance-on-delicious-reverie/#use-non-blocking-http-requests&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My CSS is pretty important to the experience of the site, but I&#39;m aware that by linking to an external stylesheet in the header was creating an extra round-trip for the browser before the content could be rendered.&lt;/p&gt;
&lt;p&gt;Since my CSS is pretty lean on this project (119 lines, 2kb uncompressed or minified), I opted not to use a Taskrunner tool but instead use a PHP include instead:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;assets/css/deliciousreverie.min.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a unique header file for the home page, so on my other pages, the header still renders via &#39;perch_get_css&#39; as normal.&lt;/p&gt;
&lt;p&gt;If my CSS code was much larger, I would find a tool to identify all necessary &amp;quot;above-the-fold&amp;quot; css and abstract that out into a separate CSS file for inclusion.&lt;/p&gt;
&lt;h3 id=&quot;3.-streamline-css&quot; tabindex=&quot;-1&quot;&gt;3. Streamline CSS &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/improving-performance-on-delicious-reverie/#3.-streamline-css&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have tended to use normalize.css to standardise delivery of my site across different browsers, just because I thought that&#39;s what everybody else did.&lt;/p&gt;
&lt;p&gt;However, after having a chat to someone I admire, I realised that following the crowd in this instance was costing me in terms of performance.&lt;/p&gt;
&lt;p&gt;When you include something like normalise.css, you&#39;re adding extra work for the browser to parse, often without rendering much of it. And you&#39;re potentially adding an extra CSS overwrite to your styles. For instance, if you want a unique checkbox input style, normalise already includes one extra style. So now we have 3 different renders: 1) The User Agent (browser) styles, 2) Normalize styles, 3) Your styles.&lt;/p&gt;
&lt;p&gt;I&#39;ve made a promise with myself to look at the source code of these libraries before I make any assumptions about what I should include in my builds in the future!&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/improving-performance-on-delicious-reverie/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve gained some great results from these excercises:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/straight-a.png&quot; alt=&quot;Web Page Test shows many &#39;A&#39;s&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Seeing this result on &lt;a href=&quot;https://example.com/posts/improving-performance-on-delicious-reverie/www.webpagetest.org/&quot; title=&quot;Web Page Test speed testing site&quot;&gt;Web Page Test&lt;/a&gt; was a big encouragement to me:- I had achieved much of what I wanted to.&lt;/p&gt;
&lt;p&gt;I&#39;m especially proud of the fact that I have no images at all on my home page. The render chart is similarly encouraging:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/onesecond.png&quot; alt=&quot;My site loads in 1.1 seconds!!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/bytesized.png&quot; alt=&quot;Fonts make up 92% of the size of my site. Wow.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see here, I have made some huge sacrifices for including three Google fonts. On the other hand, I have had a big win with regards to images, it feels nice to splash out a bit on this form of branding.&lt;/p&gt;
&lt;p&gt;So, great. For my next challenge I want to see what I can do to streamline Wordpress. Whilst I don&#39;t think you can ever get as good results from that CMS as Perch allows you to, I&#39;m sure I can think of some ways of getting better results.&lt;/p&gt;
&lt;p&gt;What results have you had from taking a closer look at the performance of your site? I&#39;d love to hear what you come up with - please tweet me on &lt;a href=&quot;https://twitter.com/muzzlehatch_&quot; title=&quot;Ben Read on Twitter&quot;&gt;@muzzlehatch_&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why Performance Matters</title>
    <link href="https://example.com/posts/why-performance-matters/"/>
    <updated>2015-10-06T14:21:21Z</updated>
    <id>https://example.com/posts/why-performance-matters/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Performance seems to be increasingly becoming a battleground for those of us who create websites. How has this situation arisen? How do we cope with these new requirements? How do we ensure our sites and web apps (sorry, Jeremy) don&#39;t suffer because of changing landscapes of user — and search engine — requirements.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Everyone has broadband now. Therefore, we no longer need to be concerned about site load times&amp;quot; said nobody, ever. But we may have assumed that the advent of much beeefier data plans would mean that load times could become a lower priority.&lt;/p&gt;
&lt;p&gt;This assumption ignores the fact that users could be on slower mobile networks. This has been discussed at length elsewhere. But a conversation I had recently highlighted another area that concerns a threat to the web as a whole.&lt;/p&gt;
&lt;h3 id=&quot;when-mobile-is-not-mobile&quot; tabindex=&quot;-1&quot;&gt;When Mobile is Not Mobile &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-performance-matters/#when-mobile-is-not-mobile&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mobile device users are unique in that they have a choice ... they have apps on their devices which might be able to perform a similar task to what they&#39;re trying to achieve on your website.&lt;/p&gt;
&lt;p&gt;A good example of this is a booking system. Does your website load — and respond — quickly enough for them? That window of opportunity &lt;a href=&quot;https://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?_r=0&quot; title=&quot;New York Times article citing Google engineers&#39; speed tests&quot;&gt;is now measured in milliseconds&lt;/a&gt;, not seconds. Will they decide to use a booking system they already have on their device instead? Will they use a search, throwing up all kinds of alternative possibilities for an entertaining evening out.&lt;/p&gt;
&lt;p&gt;This &#39;user abandonment&#39; doesn&#39;t just impact on your site, on solely your service. It has wider implications.&lt;/p&gt;
&lt;h3 id=&quot;a-performance-win-is-a-web-win&quot; tabindex=&quot;-1&quot;&gt;A Performance Win is A Web Win &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-performance-matters/#a-performance-win-is-a-web-win&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If people are turning away from their browsers and towards their devices, then how is that going to impact the web in the future? Could the web eventually be relegated to a second-fiddle service, which users only turn to as a backup?&lt;/p&gt;
&lt;p&gt;Haven&#39;t we seen that model before though? When there was no wifi, where users would have apps on their local devices simply because they &lt;em&gt;couldn&#39;t&lt;/em&gt; access the web on the go. I remember taking screenshots of Google Maps data so that I could find my way around the wilds of Mid Wales. Although that&#39;s perhaps going back a step too far, I personally don&#39;t want to lose the web — not for all of its uncontrollable, unfathomable aggregation of data, truthful and otherwise, that abounds.&lt;/p&gt;
&lt;p&gt;The web is still the portal to knowledge, to education, to opinion. It&#39;s the unique frontier, where anything can happen. If we were to lose the sense of what that means to the average user, then we have lost something quite unique, perhaps forever.&lt;/p&gt;
&lt;p&gt;Let&#39;s save the web. Let&#39;s design for performance.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Project Documentation Templates</title>
    <link href="https://example.com/posts/project-documentation-template/"/>
    <updated>2015-11-01T14:21:21Z</updated>
    <id>https://example.com/posts/project-documentation-template/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Writing documentation for new team members - or just to provide a referenceable standard - is hard. I&#39;ve provided these documents with the aim of helping this process.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ll be honest, I&#39;m not naturally an organised person. But I think that gives me an advantage. It means I have to try harder to be organised. And because I hate the chaos that can result, I&#39;m pretty determined to get things organised and keep them that way.&lt;/p&gt;
&lt;h3 id=&quot;consequences&quot; tabindex=&quot;-1&quot;&gt;Consequences &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#consequences&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I suppose I don&#39;t really have to revisit what happens when a project is disorganised, do I? We&#39;ve all been there, and have perhaps been guilty of it ourselves at one time or another. But it has some pretty drastic effects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Loss of profit&lt;/li&gt;
&lt;li&gt;Developer disillusionment&lt;/li&gt;
&lt;li&gt;Project can fail to meet client expectations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All three of these can have a really bad effect on the atmosphere in any team or organisation.&lt;/p&gt;
&lt;h3 id=&quot;help-is-available!&quot; tabindex=&quot;-1&quot;&gt;Help is Available! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#help-is-available!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve just set up a repo of documents that I helped develop whilst I was at Blaze Communication. These practices allowed us to increase profitability, better meet client expectations, and they certainly helped developers feel more informed, empowered and invested in their projects.&lt;/p&gt;
&lt;h4 id=&quot;contractor-guidelines&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Contractor Guidelines&lt;/strong&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#contractor-guidelines&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The Contractor Guidelines document sets out some principles for contractors. It was chiefly written for off-site developers. I have tried to avoid stipulating rules where possible but set down some best practices — &amp;quot;guidelines&amp;quot; that developers can hopefully use to work smarter instead of harder.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/team-documentation/blob/master/contractor-guidelines.md&quot; title=&quot;Contractor Guidelines document on Github&quot;&gt;GitHub Link to Contractor Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;prelaunch-checklist&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Prelaunch Checklist&lt;/strong&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#prelaunch-checklist&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It&#39;s possibly the worst feeling in the world when a project has gone live and you realise you missed that key security feature, or forgot to activate this piece of functionality. It&#39;s even worse to get a call from the client several weeks down the line asking for analytics data ... then realising you forgot to add the code snippet.&lt;/p&gt;
&lt;p&gt;This Prelaunch Checklist, from an original by friend and colleague &lt;a href=&quot;https://maltpress.co.uk/&quot; title=&quot;Blog of developer Adam Maltpress&quot;&gt;Adam Maltpress&lt;/a&gt; can be used as a template for your projects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/team-documentation/blob/master/prelaunch-checklist.md&quot; title=&quot;Prelaunch Checklist on Github.&quot;&gt;GitHb Link to Prelaunch Checklist&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;technical-manual&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Technical Manual&lt;/strong&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#technical-manual&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When I was leaving Blaze I wanted to leave behind more knowledge to the replacement developer than I had the opportunity to say in a handover meeting. This &amp;quot;Technical Manual&amp;quot; sets out some broad strokes for a new developer, and can be used as a handbook for new developers to refer to.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/team-documentation/blob/master/technicalmanual.md&quot; title=&quot;Technical Manual on Github&quot;&gt;GitHb Link to Technical Manual&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;project-scope&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Project Scope&lt;/strong&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#project-scope&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the most barebones of templates, and shouldn&#39;t be too extensive. It should only outline some key deliverables, specifications and user stories that have been discussed and agreed by the client and the development team. As well as affording deniability, this can help give more direction and focus to a project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/team-documentation/blob/master/projectscope.md&quot; title=&quot;Projet Scope on Github.&quot;&gt;GitHb Link to Project Scope&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;missing-stuff&quot; tabindex=&quot;-1&quot;&gt;Missing Stuff? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/project-documentation-template/#missing-stuff&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have I missed anything? Is there any thing that you would change / add / remove from this documentation? Contact me on Twitter or submit a pull request to the repo at &lt;a href=&quot;https://github.com/endymion1818/team-documentation&quot; title=&quot;Team Documentation repository on Github.&quot;&gt;https://github.com/endymion1818/team-documentation&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My Workflow Today</title>
    <link href="https://example.com/posts/my-workflow-today/"/>
    <updated>2015-11-17T14:21:21Z</updated>
    <id>https://example.com/posts/my-workflow-today/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Workflows and tools are constantly changing. The tools we use and the workflow we have means we&#39;ve simplified our build process and cut out some of the repetitive tasks, so that we can concentrate on simply doing the stuff we love as well as we can. This is my current set up:&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;mamp-for-developing-locally&quot; tabindex=&quot;-1&quot;&gt;MAMP — for developing locally &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#mamp-for-developing-locally&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Despite the learning curve, developing locally before you push your changes live avoids so many potential problems, and allows me to use some great pre-build tools that just don&#39;t work on servers that I have available.&lt;/p&gt;
&lt;p&gt;I use MAMP because it was orginally built for the Mac and was the simplest one to use — and I tried a few. I recently bought the Pro version because it allows you to create virtual hosts. Virtual hosts make it much easier to go live (a lot less absolute URLs to change).&lt;/p&gt;
&lt;h3 id=&quot;sublime-text-for-coding&quot; tabindex=&quot;-1&quot;&gt;Sublime Text — for coding &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#sublime-text-for-coding&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve tried various tools for witing code, but keep coming back to Sublime Text. I really wanted to like Atom, but it was just too slow and buggy at the time. Sublime Text 3&#39;s extensions make a really great workflow that I&#39;ve got really comfortable with (for the moment...)&lt;/p&gt;
&lt;h3 id=&quot;sublime-text-extensions&quot; tabindex=&quot;-1&quot;&gt;Sublime Text Extensions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#sublime-text-extensions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&quot;material-theme&quot; tabindex=&quot;-1&quot;&gt;Material theme &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#material-theme&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Material Theme — because I love dark backgrounds, I find it helps me to concentrate. Plus it has folder icons that help me to see what kind of file I&#39;m looking at at a glance. I find it&#39;s quite common for a theme to have great code hinting in either JS or SASS, but rarely both. Material seems to get a good balance between the two.&lt;/p&gt;
&lt;h5 id=&quot;gitgutter&quot; tabindex=&quot;-1&quot;&gt;GitGutter &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#gitgutter&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;This plugin allows you to see what lines have been changed since your last git commit. Really handy if you can&#39;t remember what you&#39;ve done, or your working with a colleague who doesn&#39;t use git (it happens!).&lt;/p&gt;
&lt;h4 id=&quot;grunt-for-repetitive-task-running&quot; tabindex=&quot;-1&quot;&gt;Grunt — for repetitive task running &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#grunt-for-repetitive-task-running&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I&#39;m feeling a bit of pressure to move to Gulp for task running, but I have a well established workflow for Grunt which I don&#39;t want to rebuild at the moment ... so I&#39;m going to stick with what I have!&lt;/p&gt;
&lt;p&gt;I&#39;ve included my current Gruntfile setup &lt;a href=&quot;https://gist.github.com/endymion1818/e92d40bb91373559936b&quot; title=&quot;grunt file gist&quot;&gt;in a gist&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;grunt-sass&quot; tabindex=&quot;-1&quot;&gt;Grunt-sass &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#grunt-sass&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Grunt-sass uses the libSass version of SASS compiler, which is now at feature parity with Ruby Sass. Although it does mean that compiling is much faster, it&#39;s not the reason I went with Grunt Sass. Not having Ruby as a dependency for my project is cleaner and less to maintain and could mean less potential conflicts in the future.&lt;/p&gt;
&lt;h5 id=&quot;postcss-autoprefixer&quot; tabindex=&quot;-1&quot;&gt;PostCSS / Autoprefixer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#postcss-autoprefixer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;I moved to PostCSS for the use of Autoprefixer, which, as the name suggests, allows you to add browser-specific prefixes to your CSS. You can even specify how many previous browser versions you want to support. No more trawling through &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt; to figure out what prefixes you need. Want to clean up your code and remove old prefixes? You can do that really quickly with this tool.&lt;/p&gt;
&lt;p&gt;PostCSS&#39;s creator seems to want PostCSS to do much more, but I find the documentation scant and folder structure (multiple nested &#39;node_modules&#39; folders) a little jarring, so I haven&#39;t used it for anything else, although it shows great potential.&lt;/p&gt;
&lt;h3 id=&quot;github-desktop-for-version-control&quot; tabindex=&quot;-1&quot;&gt;GitHub Desktop — for version control &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#github-desktop-for-version-control&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GitHub Desktop simplifies Git for me, something which I&#39;m still not comfortable to use solely in the command line (although I do occaionally).&lt;/p&gt;
&lt;p&gt;It does bother me that I&#39;m only able to use GitHub accounts with GithubDesktop, so I&#39;ve been investigating using something like Tower. I don&#39;t think I&#39;ve got a good enough use case for this purchase at the moment really, and I do tend to think I should get used to the command line interface when it comes to GIT.&lt;/p&gt;
&lt;h3 id=&quot;cyberduck-for-file-upload-download&quot; tabindex=&quot;-1&quot;&gt;Cyberduck — for file upload / download &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#cyberduck-for-file-upload-download&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I love the simplicity of Cyberduck, plus the whimsical yellow rubber duck sitting in your task bar raises a few eyebrows occasionally...&lt;/p&gt;
&lt;h3 id=&quot;trello-for-project-management&quot; tabindex=&quot;-1&quot;&gt;Trello — for project management &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#trello-for-project-management&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Trello is a great project management tool. It&#39;s so flexible; for example, I&#39;ve set it up as a Kanban board but if you prefer you can set up lists for today, tomorrow future etc or any way you like.&lt;/p&gt;
&lt;p&gt;I will usually have 2 main boards: my current project board, and Project Overview board so I can track different projects and easily get a birds-eye view of where I am with each of my projects.&lt;/p&gt;
&lt;h3 id=&quot;bugherd-for-feedback-and-bug-tracking&quot; tabindex=&quot;-1&quot;&gt;BugHerd — for feedback and bug tracking &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#bugherd-for-feedback-and-bug-tracking&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I love BugHerd. With this tool, you can include a script in your dev site and get users / clients / colleagues to click on the site, make annotations and collate these onto a project board. Then you can assign tasks out to different people or open a discussion about why you&#39;ve built it this way...&lt;/p&gt;
&lt;h3 id=&quot;affinity-photo-and-designer-for-wire-framing-and-designing&quot; tabindex=&quot;-1&quot;&gt;Affinity Photo &amp;amp; Designer — for wire framing &amp;amp; designing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#affinity-photo-and-designer-for-wire-framing-and-designing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Affinity is not as easy or as professional as using Photoshop and Illustrator — yet. I have become disillusioned with Adobe lately.&lt;/p&gt;
&lt;p&gt;Affinity are providing an attractive solution which does work well despite the learning curve, and I&#39;m really looking forward to their direct competitor to InDesign which should be in public beta soon.&lt;/p&gt;
&lt;h2 id=&quot;what-about-you&quot; tabindex=&quot;-1&quot;&gt;What about you? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/my-workflow-today/#what-about-you&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you use any of these tools in a different way to me? Would you recommend another toolset that perhaps I haven&#39;t heard of? I&#39;d love to hear what you think via Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Let Browsers be Browsers</title>
    <link href="https://example.com/posts/let-browsers-be-browsers/"/>
    <updated>2015-11-23T14:21:21Z</updated>
    <id>https://example.com/posts/let-browsers-be-browsers/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve been hearing a lot of different, seemingly contradictory messages from the industry in recent weeks regarding frontend frameworks and progressive enhancement. I got so frustrated that I started a discussion on Web Freelancers Hub about it. I felt the answers that came back were worth documenting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My original post to the group:&lt;/p&gt;
&lt;p&gt;So, I&#39;m really confused.&lt;/p&gt;
&lt;p&gt;There&#39;s been a huge demand for people who can work with Frontend frameworks especially Angular.js in recent months. For a while, it seemed like I was turning down 5 contracts a week that required this skill.. which I&#39;m now learning.&lt;/p&gt;
&lt;p&gt;But now the industry seems to be eating is tail &amp;amp; saying this is bad practice because what if users don&#39;t have Javascript enabled on their browser (for whatever reason)... and I agree with them.&lt;/p&gt;
&lt;p&gt;I&#39;m a bit confused / frustrated with these mixed messages — I really agree with recent posts from &lt;a href=&quot;https://adactio.com/journal/9963&quot; title=&quot;Where to Start? on Adactio.com&quot;&gt;Jeremy Keith&lt;/a&gt; and &lt;a href=&quot;https://alistapart.com/article/interaction-is-an-enhancement&quot; title=&quot;Interaction is an Enhancement on A List Apart&quot;&gt;Aaron Gustaffson&lt;/a&gt; but don&#39;t know the best route to take to&lt;/p&gt;
&lt;p&gt;a) stay ahead of the game&lt;/p&gt;
&lt;p&gt;b) provide the best experience for users.&lt;/p&gt;
&lt;p&gt;Anyone else thinking this / have a take on it?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Although there were a few developers who argued that when developing apps, you have to stipulate to users that JS must be enabled, Nick Bramwell was quick to comment in a way that resonated with me: &amp;quot;I’ve been burnt too many times in the past learning things that quickly vanish.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is one thing that I&#39;ve been afraid of, since it takes a lot of time to learn frameworks ... and I have a young baby to take care of!&lt;/p&gt;
&lt;p&gt;Rachel Andrew mentioned a use case that I don&#39;t think we consider enough: &amp;quot;I travel a lot, end up on terrible wifi. At least once per trip I find myself unable to use a site because bits of their JavaScript haven&#39;t made it.&amp;quot; This is also what motivated &lt;a href=&quot;https://abookapart.com/products/responsible-responsive-design&quot; title=&quot;Responsible Responsive Design on A Book Apart&quot;&gt;Scott Jehl to write his book &amp;quot;Responsible Responsive Design&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;browsers-are-browsers&quot; tabindex=&quot;-1&quot;&gt;Browsers Are Browsers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/let-browsers-be-browsers/#browsers-are-browsers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So I guess my position is that there may be certain cases we would justifiably use fronted frameworks to enhance the experience for the user, we shouldn&#39;t make it a requirement of our site. Browsers are meant to be used to view and interact with data, and largely cannot be &#39;exploited&#39; — partly because users need protection from such things.&lt;/p&gt;
&lt;p&gt;I guess that if responsive design has taught me one thing, it&#39;s that we &lt;em&gt;can&#39;t know&lt;/em&gt; the conditions under which our site will be served up to someone, and that we shouldn&#39;t try to know, or to stipulate conditions unless there is a very good reason for doing so.&lt;/p&gt;
&lt;p&gt;I&#39;m grateful to be part of a community that I can go to when issues like this come up. For now, I&#39;m going to stick with what I&#39;ve learned with regard to fronted frameworks. Perhaps I might start learning server-side (universal, or isomorphic) JavaScript, because I seem to enjoy seeing what&#39;s possible with the language.&lt;/p&gt;
&lt;p&gt;On the other hand, it seems that my gut feeling is that I need to stick to my principles and not be swayed by lucrative offers that I might receive that could result in a dead end.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>To Rome, a Poem</title>
    <link href="https://example.com/posts/to-rome-a-poem/"/>
    <updated>2015-11-23T14:21:21Z</updated>
    <id>https://example.com/posts/to-rome-a-poem/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I wrote this poem more than 10 years ago, but I&#39;ve never published it anywhere. I&#39;ve always been afraid it&#39;s not any good or that it&#39;s of not enough interest to warrant any merit ... but that seems to matter less now. Anyway, here it is!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wrote it after I read &lt;a href=&quot;https://www.amazon.co.uk/dp/0571172288&quot; title=&quot;Keats by Andrew Motion on Amazon.co.uk&quot;&gt;Andrew Motion&#39;s biography of John Keats&lt;/a&gt;. I was so moved by the tragic life Keats had and how he&#39;d created some of the world&#39;s best poetry despite that.&lt;/p&gt;
&lt;h3 id=&quot;to-rome&quot; tabindex=&quot;-1&quot;&gt;To Rome &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/to-rome-a-poem/#to-rome&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;It&#39;s a rose you&#39;ve given, and a rose I&#39;ll take&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;As I leave you awash in my wake.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Though I travel to distant shores&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;I&#39;ll remember that rose that it was yours.&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now it&#39;s the third day out to sea&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;And closer the shores of Napoli&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Today I feel a lost cause&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Remembering that rose, that it was yours.&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Never can an absolution be found&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;This ship of ours has run aground&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;And climbing the steps to the Piazza&#39;s palace&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;I lift to you a golden chalice:&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Not Apollo&#39;s goblet, nor Endymion&#39;s cup&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;Only for you would I offer up&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;The dregs become of this earthly root&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;That my soul might sprout forth a shoot&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And I might live again to see&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;That rose you gave, you gave to me.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;###&lt;em&gt;Notes&lt;/em&gt;&lt;br /&gt;
I imagined that when he left his lover and former fianceé, that she gave him a rose. But the fact is, Keats left the country without even saying goodbye to her, despite the deep emotional pain that caused him.&lt;/p&gt;
&lt;p&gt;I imagined him drinking a cup to his lover, but wanted to mention that it wasn&#39;t a glorious cup of a god like Apollo (Keats never saw himself that way), nor was it Endymion&#39;s (who lived forever).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The dregs become of this earthly root&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;em&gt;That my soul might sprout forth a shoot&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;These 2 lines are from the poem &lt;em&gt;Endymion&lt;/em&gt;, by Keats, and allude to the way his romance with Fanny Brawne made him feel.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why Atomic Design Makes Sense</title>
    <link href="https://example.com/posts/why-atomic-design-makes-sense/"/>
    <updated>2015-11-23T14:21:21Z</updated>
    <id>https://example.com/posts/why-atomic-design-makes-sense/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Although I&#39;ve really gotten into the SASS revolution, I haven&#39;t yet adopted a method for structuring elements of CSS. I guess it&#39;s because none of them strike me as particularly visual, and being a former print designer, I tend to think in those terms. But something about Brad Frost&#39;s Atomic Design principles makes sense to me. Here&#39;s why.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When we&#39;re designing, we tend to think more about design principles instead of build principles. What I mean is that we think about rhythm, white space, alignment and these types of things. These are very necessary components of great web design as they are of design in other mediums.&lt;/p&gt;
&lt;p&gt;But the web is still a unique animal. If we&#39;re truly going to design for the web, we need to think about the medium itself, much as a printer considers the stock, the inks, and the situation artwork is going to be displayed in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/screen-shot-2015-12-18-at-08.19.57.png&quot; alt=&quot;atomic design : a book by Brad Frost&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;https:atomicdesign.bradfrost.com&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://atomicdesign.bradfrost.com/&quot; title=&quot;Link to Brad&#39;s website where he&#39;s writing the book&quot;&gt;https://atomicdesign.bradfrost.com&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-atomic-design-makes-sense/#https:atomicdesign.bradfrost.com&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Atomic design really helps at this level: it helps us design repeatable elements that can be coded and re-used on different parts of our site. I don&#39;t intend to re-hash Atomic principles here, but take a look around, &lt;a href=&quot;https://blog.invisionapp.com/atomic-design-principles/&quot; title=&quot;Using Atomic Design at InVision&quot;&gt;perhaps at this post&lt;/a&gt;, or &lt;a href=&quot;https://atomicdesign.bradfrost.com/chapter-2/#atomic-design-is-for-user-interfaces&quot; title=&quot;atomic design is for user interfaces&quot;&gt;read a pertinent excerpt from the book&lt;/a&gt;, to see what I mean.&lt;/p&gt;
&lt;p&gt;This is going to really help us when it comes to building things out in code, especially if it&#39;s someone else building it.&lt;/p&gt;
&lt;h2 id=&quot;thinking-like-developers&quot; tabindex=&quot;-1&quot;&gt;Thinking Like Developers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-atomic-design-makes-sense/#thinking-like-developers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is important. I don&#39;t personally think it&#39;s a requirement for designers to be able to code — but I do believe we need to think like developers. If we comprehend the way a developer approaches a project, we&#39;ll see that system-based thinking (rather than individual page-based thinking) actually helps us get a product that reflects our design intentions more completely.&lt;/p&gt;
&lt;p&gt;And we&#39;ll also be able to empathise with our developers, which means greater understanding, greater cooperation and - again - much better result, not just in appearance but in cleaner, more efficient code that has performance benefits.&lt;/p&gt;
&lt;p&gt;And website performance is part of our job too, right?&lt;/p&gt;
&lt;h2 id=&quot;atomic-design-as-a-developer&quot; tabindex=&quot;-1&quot;&gt;Atomic Design as a Developer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-atomic-design-makes-sense/#atomic-design-as-a-developer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a developer, I&#39;m wondering if I use SASS partials to structure my code. Perhaps defining files this way:&lt;/p&gt;
&lt;p&gt;for atoms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a-type&lt;/li&gt;
&lt;li&gt;a-colors&lt;/li&gt;
&lt;li&gt;a-inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for molecules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m-card&lt;/li&gt;
&lt;li&gt;m-navbar&lt;/li&gt;
&lt;li&gt;m-lists&lt;/li&gt;
&lt;li&gt;m-formfields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for organisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o-navbar&lt;/li&gt;
&lt;li&gt;o-contactform&lt;/li&gt;
&lt;li&gt;o-banner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and so on..&lt;/p&gt;
&lt;p&gt;Hm, ok I&#39;m going to try this. Hope to give you a development update in due course.&lt;/p&gt;
&lt;p&gt;In the meantime, I really think atomic design makes sense - for designers, for developers, and to meet the diversifying needs of our users and project stakeholders.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Do We Need Industry Regulation?</title>
    <link href="https://example.com/posts/do-we-need-industry-regulation/"/>
    <updated>2016-01-06T14:21:21Z</updated>
    <id>https://example.com/posts/do-we-need-industry-regulation/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;This is an awkward question to ask. There are many benefits that I can see to our clients and to us as professionals, but there are also some really bad pitfalls that could damage our industry.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of the world&#39;s oldest and most highly regarded industries are regulated by some professional body or another. I always notice when an architect&#39;s practice has a RIBA (Royal Institute of British Architects) emblem near the front door.&lt;/p&gt;
&lt;p&gt;Regulation leads to standardisation, which I think is something the web industry is trying to wrestle with currently, although we may not realise it yet.&lt;/p&gt;
&lt;p&gt;##The Pros&lt;/p&gt;
&lt;p&gt;I recently worked on a high-profile site for a leading entrepreneurial event held once a year in the UK and involves someone very much in the public eye. With that good a reputation, you would think that their website would be built by people who understood the necessities of modern web development, but it appears they didn&#39;t.&lt;/p&gt;
&lt;p&gt;The site was over 2MB in weight, despite being a relatively small blog. It had 32 plugins, all linked directly in the header instead of enqueued as is the standard for Wordpress builds. Needless to say, with all this cruft, the site load time was terrible—nearer the 16s mark than the 3s drop-off point.&lt;/p&gt;
&lt;p&gt;The decision was made to rebuild the site almost from scratch so that it would be useable by modern standards.&lt;/p&gt;
&lt;p&gt;Regulation would help to enforce some kind of standard for these builds that others could follow. We would get some clear channel of communication that would hilight potential pitfalls and benefits of certain ways of doing things. A regulatory body would also help set training standards for newbies, and Continuing Professional Development routes for more experienced professionals.&lt;/p&gt;
&lt;p&gt;This appeals to my sense of order and structure as I&#39;m sure it does to many of us ... but there are some pretty dark sides to this that we need to weigh up too:&lt;/p&gt;
&lt;p&gt;##The Cons&lt;/p&gt;
&lt;p&gt;At this point in time, the web industry is struggling to keep hold of its friendly, equal and mutually respectable conglomeration of individuals. Perhaps like any of us you have spoken to some of the — can I call them &amp;quot;thought leaders&amp;quot; in our industry—and found them to be pretty grounded and approachable.&lt;/p&gt;
&lt;p&gt;This is a great win for our industry, and I find it to be crucial to keep it that way, even if there are still things we need to consciously work on to be more inclusive, for instance addressing the imbalance of males vs females in our industry.&lt;/p&gt;
&lt;p&gt;Regulation could easily — very easily — set distances that may be insurmountable to overcome. Would someone who was not a full member of this regulatory body feel comfortable working with — or even approaching — someone who wasn&#39;t? Would a person be able to maintain his / her approachability and (dare I say it?) humility in the face of such a qualification?&lt;/p&gt;
&lt;p&gt;##It starts here&lt;/p&gt;
&lt;p&gt;I&#39;ve personally joined the fledgling &lt;a href=&quot;https://www.thewebguild.org/&quot; title=&quot;The Web guild - for a better code of conduct&quot;&gt;Web Guild&lt;/a&gt; - partly  because membership is currently free if you get there quick enough - but also partly because I want to distance myself from those who give our industry a bad name.&lt;/p&gt;
&lt;p&gt;There are getting to be plenty of those, as I&#39;ve demonstrated.&lt;/p&gt;
&lt;p&gt;I&#39;m not going to offer a call to action here, as I think it&#39;s still something that needs a great deal of thought and careful consideration before we allow it to develop and promote it.&lt;/p&gt;
&lt;p&gt;However, I&#39;ll simply end with this question: for those of us who wish to be known for professionalism — is this a good route for us to be going down? Are we about to sacrifice too much for the sake of some meaningless badge?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wordpress theming with Backbone.js</title>
    <link href="https://example.com/posts/wordpress-themeing-with-backbone-js/"/>
    <updated>2016-01-06T14:21:21Z</updated>
    <id>https://example.com/posts/wordpress-themeing-with-backbone-js/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;You&#39;ll notice that there&#39;s not a huge amount of posts about JavaScript on my site. That&#39;s not an accident, I&#39;m really only beginning to gain my feet with the language. Despite this I took the plunge and decided to build a Wordpress theme that uses Backbone.js to render the posts in a list. Here&#39;s a bit about the project.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Backbone.js is one of the most stable of the Javascript frameworks, which is one of the reasons I chose to focus on it. I wanted to start with a stable framework that would allow me to get to grips with it properly, and that I didn&#39;t have to worry about a huge amount of refactoring when the next version came out. But it&#39;s also one of the smallest frameworks. Even with recommended dependencies jQuery and Underscore it&#39;s still faster than some of the larger frameworks out there. This appeals to my sense of what users are most in need of from us as developers.&lt;/p&gt;
&lt;p&gt;###Where I succeeded&lt;/p&gt;
&lt;p&gt;I&#39;m going to talk as little as I can about the tools here. I&#39;m exhausted at having to learn someone else&#39;s toolset to enable me to accomplish my work. I&#39;m just going to say that it&#39;s good practice to break down your files into small blocks of code, this will really help you when it comes to debugging and maintenance of your code later on. So here&#39;s my JavaScript project folder setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-src
|
--js
|
---1underscore.js
---2backbone.js
---3models.js
---4views.js
---5collection.js
---6router.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;note:&lt;/em&gt; I&#39;m loading jQuery in separately from a CDN.&lt;/p&gt;
&lt;p&gt;Structuring my project folder this way allows me to load the JS in the correct order. Now, when they get parsed by your task runner they&#39;ll be in the correct order to run.&lt;/p&gt;
&lt;p&gt;After a few false starts I had gotten the post feed into my view, and it is outputting as I wanted. This felt like such a victory! I can now see all of my posts and click through ... but this simple bit of functionality is currently far from finished.&lt;/p&gt;
&lt;h4 id=&quot;where-i-have-yet-to-succeed&quot; tabindex=&quot;-1&quot;&gt;Where I have yet to succeed &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/wordpress-themeing-with-backbone-js/#where-i-have-yet-to-succeed&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Documentation is patchy&lt;/strong&gt;. I started off by being able to retrieve the basic JSON feed from &lt;code&gt;/wp-json/&lt;/code&gt;, but couldn&#39;t find out why I can&#39;t see the posts. After some digging, I found out that the JSON endpoints haven&#39;t been implemented in Wordpress core yet. &lt;a href=&quot;https://wordpress.org/plugins/rest-api/&quot; title=&quot;Wordpress REST API plugin&quot;&gt;We still need to use the plugin&lt;/a&gt;. In fact, I enjoy what I do because I can research things easily on Stack Exchange. But there&#39;s not many people using Backbone with Wordpress, and I was distinctly on my own trying to find this out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No links.&lt;/strong&gt; If you click on one of the links in the list view, Wordpress takes over and you will be shown the posts&#39; PHP page. This is because I have yet to wrap my head around how routing works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are some of the things I can&#39;t do yet. It really bothers me but until I find some time or it becomes a necessity, I can&#39;t justify more time on this project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/questingtheair&quot; title=&quot;My Backbone.js Wordpress theme on Github.com&quot;&gt;Here&#39;s the theme if you want to pick over my code.&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;I have not failed. I&#39;ve just found 10,000 ways that won&#39;t work.&lt;/h1&gt;
&lt;attr&gt;Thomas Edison&lt;/attr&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;&lt;/blockquote&gt;</content>
  </entry>
  
  <entry>
    <title>Using the Srcset attribute on images</title>
    <link href="https://example.com/posts/using-the-srcset-attribute-on-images/"/>
    <updated>2016-01-15T14:21:21Z</updated>
    <id>https://example.com/posts/using-the-srcset-attribute-on-images/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;So, I&#39;ve been using the relatively new (and somewhat confusing) srcset attribute to serve a couple of interesting use cases lately. This spec is really, really useful in certain circumstances, two of which I&#39;d like to share with you here.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;situation-1:-you-want-to-use-svgs-but-need-to-support-browsers-that-don&#39;t&quot; tabindex=&quot;-1&quot;&gt;Situation 1: You want to use SVGs, but need to support browsers that don&#39;t &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-the-srcset-attribute-on-images/#situation-1:-you-want-to-use-svgs-but-need-to-support-browsers-that-don&#39;t&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/screen-shot-2016-01-15-at-21.19.20.png&quot; alt=&quot;Can I Use screenshot for SVG support&quot; /&gt;&lt;/p&gt;
&lt;p&gt;SVG support is fairly advanced across the browser spectrum (above), but srcset is supported less, especially by legacy IE browsers (below). This allows us to use the srcset attribute to specify an SVG image (or WebP for that matter), allowing newer browsers to download the Srcset image in preference, and older browsers to use the fallback .png file (or whatever else).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/screen-shot-2016-01-15-at-21.19.45.png&quot; alt=&quot;Can I Use browser support chart for Srcsets&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I can&#39;t claim to have thought of this myself, Sara Soueidan covered this concept &lt;a href=&quot;https://sarasoueidan.com/blog/svg-picture/&quot; title=&quot;Better SVG Fallback and Art Direction with the &amp;lt;picture&amp;gt; Element on sarasouiedan.com&quot;&gt;on her blog in February 2015&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The markup for this could actually be quite minimal:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;alt text goes here&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The browsers that recognise &lt;code&gt;srcset&lt;/code&gt; will download that asset, so you&#39;ll get a nice crisp SVG, otherwise older browsers (which don&#39;t have support for svg either) will get the image.&lt;/p&gt;
&lt;p&gt;I routinely add dimensions to my srcsets to avoid rendering problems in certain browsers where they will always render the SVG at the natural height &amp;amp; width of the SVG, so if you have a different sized png, things can get a little crazy.&lt;/p&gt;
&lt;p&gt;###Situation 2: You want to use 2 different images at different breakpoints&lt;/p&gt;
&lt;p&gt;Just recently I had a client requirement for an image that would be wide &amp;amp; narrow at large breakpoints, and thinner and taller at smaller, like this image demonstrates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/srcset-example.png&quot; alt=&quot;two images at different breakpoints&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yes I could do this with background images in CSS, but then the browser would &lt;em&gt;have&lt;/em&gt; to download &lt;em&gt;both&lt;/em&gt; images, increasing the page weight. Srcset solves this problem by fetching the appropriate image based on what sizes you stipulate in your media queries. This took me a few tries to get right, but I ended up with a robust solution that would conserve bandwidth:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fallback.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;br /&gt;			small.png 649w,&lt;br /&gt;			large.png 1140w&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token attr-name&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;br /&gt;		(max-width:767px) 649w,&lt;br /&gt;		(min-width:768px) 1140w&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;descriptive text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&#39;m doing is specifying that the browser should behave this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the viewport width is below this, show the smaller image&lt;/li&gt;
&lt;li&gt;If the viewport is above that, use the other image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I started off without the &lt;code&gt;max-width&lt;/code&gt; query, but was always getting the larger image, which seemed to render correctly after I introduced this query.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ericportis.com/posts/2014/srcset-sizes/&quot; title=&quot;Srcset and sizes on ericportis.com&quot;&gt;Eric Portis&#39; comprehensive explanation&lt;/a&gt; was great at getting me to think about how to do this, what I&#39;m trying to do here is break it down to be something I can use in production without having to fry my little brain at the staggering genius that are the foundation tools of our trade.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On Being An Advocate</title>
    <link href="https://example.com/posts/on-being-an-advocate/"/>
    <updated>2016-01-23T14:21:21Z</updated>
    <id>https://example.com/posts/on-being-an-advocate/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve always been interested in psychology but never went further than college with it. Recently a friend introduced me to the Meyers-Briggs Type Indicator Test. It illuminated some important traits of my personality and hilighted the motivation behind the goals I have. I thought I&#39;d go over a few points that interested me here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I studied Carl Jung a bit in college, and always found psychology an absorbing and fascinating field. I was particularly drawn to the practice of counselling, and pursued that for a while before realising that&#39;s not what I really wanted to achieve in life.&lt;/p&gt;
&lt;p&gt;The website &lt;a href=&quot;https://www.16personalities.com/&quot; title=&quot;INFJ Personality Types&quot;&gt;Sixteen Personalities&lt;/a&gt; has a scarily accurate test which identifies your type based on the theory that there are 16 main personality types.&lt;/p&gt;
&lt;p&gt;In my test, it was revealed that I am an INFJ personality type — identified on this website as &amp;quot;the Advocate&amp;quot;. So here&#39;s a little bit more about him.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;infjs-tend-to-see-helping-others-as-their-purpose-in-life&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;INFJs tend to see helping others as their purpose in life&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22infjs-tend-to-see-helping-others-as-their-purpose-in-life%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This really struck a cord with me. Whether it&#39;s helping to find other developers work, providing training or support for colleagues, or just listening to the personal troubles of my friends, I&#39;m always aiming to help others pursue their goals.&lt;/p&gt;
&lt;p&gt;I try not to be motivated by self-interest and find no satisfaction in sales targets or monetary bonuses. I&#39;d like to be in a position where I can encourage and help others in work and in life generally.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;there-is-a-running-theme-with-infjs-and-that-is-a-yearning-for-authenticity-and-sincerity-in-their-activities-their-romantic-relationships-and-their-friendships&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;There is a running theme with INFJs, and that is a yearning for authenticity and sincerity – in their activities, their romantic relationships, and their friendships&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22there-is-a-running-theme-with-infjs-and-that-is-a-yearning-for-authenticity-and-sincerity-in-their-activities-their-romantic-relationships-and-their-friendships%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I find I identify quite closely with this statement. I&#39;m always trying to be honest with other people and expect honesty back. At the same time, INFJs have a tendency to be able to spot insincerity and lies. If I found I have been lied to I can react quite badly.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;if-there&#39;s-anything-infjs-avoid-it&#39;s-the-accumulation-of-power-over-others-and-the-people-who-are-drawn-to-that-type-of-power&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;If there’s anything INFJs avoid, it’s the accumulation of power over others – and the people who are drawn to that type of power&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22if-there&#39;s-anything-infjs-avoid-it&#39;s-the-accumulation-of-power-over-others-and-the-people-who-are-drawn-to-that-type-of-power%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I sometimes derail situations when I perceive that I have power over others, and it&#39;s one of the reasons I don&#39;t like to speak publicly even though I have been told I&#39;m a competent speaker :- it puts me on a pedestal and could lead to others investing confidence in me personally, whereas I want others to focus on the goals they have and the tasks they&#39;ve been assigned.&lt;/p&gt;
&lt;p&gt;I have been known to actively undermine the confidence of others in me, so that I don&#39;t feel like I have authority over them.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;infjs-crave-creativity-the-ability-to-use-their-insight-to-connect-events-and-situations-effecting-real-change-in-others&#39;-lives-personally&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;INFJs crave creativity, the ability to use their insight to connect events and situations, effecting real change in others’ lives personally&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22infjs-crave-creativity-the-ability-to-use-their-insight-to-connect-events-and-situations-effecting-real-change-in-others&#39;-lives-personally%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hmm, how interesting this is in conjunction with my chosen career. I am not content as a coder or a designer, but I want to perceive the connection between the two, as well as the role of content writer and information architect. I have always sought a holistic approach to my career.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;infjs-are-still-introverts-they-will-need-to-step-back-and-act-the-lone-wolf-from-time-to-time-pursuing-their-own-goals-in-their-own-ways&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;INFJs are still Introverts, — they will need to step back and act the lone wolf from time to time, pursuing their own goals in their own ways&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22infjs-are-still-introverts-they-will-need-to-step-back-and-act-the-lone-wolf-from-time-to-time-pursuing-their-own-goals-in-their-own-ways%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was an interesting revelation. Whilst I feel satisfied in contributing to the goals of others, I still love the times I&#39;m working on personal projects, or writing articles for this blog.&lt;/p&gt;
&lt;h3 id=&quot;&amp;quot;infjs-imagination-and-empathy-make-them-someone-who-not-only-cherishes-their-integrity-and-deeply-held-principles-but-unlike-many-other-idealistic-types-is-also-capable-of-turning-those-ideals-into-plans-and-executing-them&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;[INFJs] imagination and empathy make [them] someone who not only cherishes their integrity and deeply held principles but, unlike many other idealistic types, is also capable of turning those ideals into plans, and executing them&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#%22infjs-imagination-and-empathy-make-them-someone-who-not-only-cherishes-their-integrity-and-deeply-held-principles-but-unlike-many-other-idealistic-types-is-also-capable-of-turning-those-ideals-into-plans-and-executing-them%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s always nice to get a bit of a personality massage, but I do have deep-seated principles which I am not prepared to compromise on. Yet when I comprehend the reason these are asked of me, I can usually think of a way around the situation in a mutually beneficial way.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-being-an-advocate/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The trouble with taking this test is that now I want everyone I know to take it so I can discover more about them! There are a few people whom I have no idea where they&#39;re coming from, so I&#39;m scheming for them to take the test at some point in the hopes of understanding them a bit better.&lt;/p&gt;
&lt;p&gt;What about you? Have you taken the test yet? I would enjoy hearing about it via Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Finally [a fitting job title]</title>
    <link href="https://example.com/posts/finally-a-fitting-job-title/"/>
    <updated>2016-01-25T14:21:21Z</updated>
    <id>https://example.com/posts/finally-a-fitting-job-title/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve always felt that my place in the web development industry has been misunderstood. It&#39;s been misunderstood by recruiters, by my employers, and more often that not, by myself as well. But over the past few weeks a new concept has been gaining ground that I identify with closely, and if this catches on, I think it could change the face of our industry.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve always struggled with the dichotomy of my interests and aptitudes. If you&#39;ve been following my posts and my LinkedIn profile for any length of time, you&#39;ll see that the words I use to describe myself change quite frequently. I don&#39;t like doing that, because I think it can confuse people.&lt;/p&gt;
&lt;p&gt;But at the same time, I haven&#39;t found my particular &amp;quot;niche&amp;quot;.&lt;/p&gt;
&lt;p&gt;Whilst making great personal progress in terms of my development skill set, I&#39;ve been a little resistant to leaving the design world altogether.&lt;/p&gt;
&lt;p&gt;##Facing Resistance&lt;/p&gt;
&lt;p&gt;The truth is, sometimes I feel a bit resistant when I am told to code something up from a PSD or PDF, and it seems apparent that the designer has gaps in their knowledge about the web medium.&lt;/p&gt;
&lt;p&gt;Perhaps the design of a blog post has so many separate blocks of text that I know content authors will struggle with the input, or perhaps certain design choices they have made would, in my opinion, have a negative effect on user experience or conversions, or simply aren&#39;t goal-orientated or aware.&lt;/p&gt;
&lt;p&gt;These things bother me, and whilst I&#39;m not in a position to choose what I build, I&#39;m always dreaming about a time when I could have more involvement in the planning and design stage.&lt;/p&gt;
&lt;h2 id=&quot;enter-the-frontend-designer&quot; tabindex=&quot;-1&quot;&gt;Enter The Frontend Designer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/finally-a-fitting-job-title/#enter-the-frontend-designer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But now there are rumblings of change.&lt;/p&gt;
&lt;p&gt;Brad Frost published this post a few weeks ago, in many ways defining the role of Frontend Designer, someone who is adept at code—but also has a keen eye for design. Brad&#39;s GIF says this way better than any words do:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/frontend-design.gif&quot; alt=&quot;Two seperate circles - labeled design and development - being overlapped by a third circle labelled &#39;frontend design&#39;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is where I find I have a niche.&lt;/p&gt;
&lt;p&gt;I believe I am a competent designer with a good understanding and application of design principles, whilst not knowing all of the vagaries of trapping and overprint.&lt;/p&gt;
&lt;p&gt;I also like to think I&#39;m a competent developer. I can wrangle JavaScript frameworks, have begun to write vanilla PHP, and whilst not fully comprehending the backend, can write the odd SQL query and use SSL on the command line.&lt;/p&gt;
&lt;h2 id=&quot;what-it-means-for-the-industry&quot; tabindex=&quot;-1&quot;&gt;What It Means for the Industry &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/finally-a-fitting-job-title/#what-it-means-for-the-industry&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This could change things.&lt;/p&gt;
&lt;p&gt;If the role of Frontend Designer was identified, even encouraged, it could lead to far greater collaboration between frontend- and backend- aspects of development. It could mean that more projects are built with awareness — no, perhaps love of — the web medium, it&#39;s abilities and idiosyncrasies.&lt;/p&gt;
&lt;p&gt;We could start seeing more output that pushes the web forward, that challenges what can be done to provide users what they need, to fulfil the objectives of organisations, and to make websites more beautiful, more unique in their own right.&lt;/p&gt;
&lt;p&gt;I&#39;m writing this as a leading eCommerce retailer has posted a job description which matches this particular skill set, so it would seem there is already emerging scope for this role... and it&#39;s got me really excited!&lt;/p&gt;
&lt;p&gt;Is it finally time for the web to grow up, to strike out on it&#39;s own, to lift off (what has to my mind become) the shackles of print design forever?&lt;/p&gt;
&lt;h3 id=&quot;update&quot; tabindex=&quot;-1&quot;&gt;UPDATE &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/finally-a-fitting-job-title/#update&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, talking this over with a few of my esteemed colleagues, it seems &lt;a href=&quot;https://rachelnabors.com/2010/11/whats-a-front-end-designerdeveloper/&quot; title=&quot;Rachel Nabors: What&#39;s a Front End Designer / Developer&quot;&gt;this title isn&#39;t as new as I thought&lt;/a&gt; — thanks Lee.&lt;br /&gt;
I also must emphasis that I&#39;m not trying to minimise the roles that UX Designers / Web Designers and others who go by different job titles .. this one just seems to fit for me. Thanks for calling me out on that one, Dean.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Delaying click event in vanilla JavaScript</title>
    <link href="https://example.com/posts/delaying-click-event-vanilla-javascript/"/>
    <updated>2016-03-22T14:21:21Z</updated>
    <id>https://example.com/posts/delaying-click-event-vanilla-javascript/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I was inspired by Rachel Nabors&#39; site to add a short delay to users&#39; clicking on a link on my website, so that I could add a brief animation that would run before the redirection took place. Here&#39;s how I did it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Animation&amp;quot; seems to be the theme of my year. Animation is what I think is going to be one of the big differentiator on websites in the coming months and years. And I really, really love the CSS animations API.&lt;/p&gt;
&lt;p&gt;I&#39;ve used waypoints.js a lot lately so that I can run animations at different stages during the time that a user scrolls around my site. But for my personal blog, I wanted to do something a little trickier.&lt;/p&gt;
&lt;p&gt;###My Requirements&lt;/p&gt;
&lt;p&gt;I wanted to fade in page elements when the user arrives, and fade them out again when they left. I know that it could potentially have been easier to write this in jQuery using the &lt;code&gt;delay()&lt;/code&gt; function, but I decided to go the route of a custom bit of JavaScript. It was a good practice exercise for me, and I don&#39;t want to load the jQuery library here unless I have to.&lt;/p&gt;
&lt;h3 id=&quot;the-code&quot; tabindex=&quot;-1&quot;&gt;The Code &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#the-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It took me a while to come up with the strategy for this. I started looking at &lt;code&gt;onpageunload()&lt;/code&gt;, hoping to add a delay to that. But that&#39;s quite locked down, and didn&#39;t work for my requirements.&lt;/p&gt;
&lt;p&gt;After I had fiddled for a while, I ran up against a brick wall. For some reason, my JS event listener wasn&#39;t working properly.&lt;/p&gt;
&lt;p&gt;So I turned to StackOverflow and posed the question, which helped immensely, and validated what I was already trying to do. &lt;a href=&quot;https://stackoverflow.com/questions/36125391/vanilla-js-delay-click-event-to-add-animation/36126631&quot; title=&quot;vanilla JS: delay click event&quot;&gt;The thread is here if you&#39;d like to read it&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;step-1&quot; tabindex=&quot;-1&quot;&gt;Step 1 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#step-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Reading some other posts on Stack Overflow helped me see that I needed to grab &lt;strong&gt;all&lt;/strong&gt; of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags into a variable, then listen for an event.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; links &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;il &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; links&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; il&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;links&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onclick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clickHandler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;step-2&quot; tabindex=&quot;-1&quot;&gt;Step 2 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#step-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Then, I needed a function called &lt;code&gt;clickHandler&lt;/code&gt; that would fire on click:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function clickHandler(event) {

event.preventDefault();

var travelTo = this.getAttribute(&amp;quot;href&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first job of this handler was to stop the link from being followed, using &lt;code&gt;preventDefault()&lt;/code&gt;, then to grab the link the user was going to so that we could use it later on.&lt;/p&gt;
&lt;h4 id=&quot;step-3&quot; tabindex=&quot;-1&quot;&gt;Step 3 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#step-3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The next step was to add my animation class to the elements I wanted:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; animOut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;animateOut&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// iterate `animOut` elements&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; animOut&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token comment&quot;&gt;// add `out` `className` to `animOut` element at index `i`&lt;/span&gt;&lt;br /&gt;   animOut&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks for each element that has a class of &lt;code&gt;animOut&lt;/code&gt;, and adds a further class, &lt;code&gt;out&lt;/code&gt; when the function runs.&lt;/p&gt;
&lt;h4 id=&quot;step-4&quot; tabindex=&quot;-1&quot;&gt;Step 4 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#step-4&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next, we needed to send the user on their way using the &lt;code&gt;travelTo&lt;/code&gt; variable we stored earlier and using  the &lt;code&gt;setTimeout&lt;/code&gt; function to add a bit of a delay:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; travelTo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I played with the durations quite a bit. It was important for me not to make the animation and/or the delay too long because I thought it would probably be distracting to the user. I reduced it from 1 second to just half a second for this very reason.&lt;/p&gt;
&lt;h4 id=&quot;the-result&quot; tabindex=&quot;-1&quot;&gt;The Result &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/delaying-click-event-vanilla-javascript/#the-result&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Well, click on a link and see it working!!&lt;/p&gt;
&lt;p&gt;It was great to be able to work this out, and the Stack Overflow community once again proved to be a fantastic resource.&lt;/p&gt;
&lt;p&gt;I must also credit Rachel Nabors for inspiring me, since I first saw this being used &lt;a href=&quot;https://rachelnabors.com/&quot; title=&quot;Rachel Nabors&#39; portfolio site&quot;&gt;on her website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s the full code in a Gist if you&#39;d like to adapt it for your site:&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Conversational User Interface</title>
    <link href="https://example.com/posts/conversational-user-interface/"/>
    <updated>2016-04-21T14:21:21Z</updated>
    <id>https://example.com/posts/conversational-user-interface/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;This phrase &amp;quot;the conversational interface&amp;quot; has been bouncing around in my brain since I attended Wordcamp London, I can&#39;t remember who mentioned it as being one of the things to watch out for in the coming year or years, but it has really struck me a something that I think could be significant and important.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like you&#39;ve I&#39;ve worked on many projects over the years. Some have been great, some have been awfully painful. But the ones that feel like they&#39;ve been the most successful in particular are the ones that start a conversation.&lt;/p&gt;
&lt;p&gt;I don&#39;t mean just the way the animations rock, or the cadence of the prose. The projects that I like the best seem to initiate a conversation, and keep that conversation going. It doesn&#39;t end. It just builds on what&#39;s gone before it.&lt;/p&gt;
&lt;p&gt;###Moving Past the Introduction&lt;/p&gt;
&lt;p&gt;A product can have a great introduction: the home page is really neat. It sees the users&#39; vision and responds, segmenting the audience and taking them to places that they were surprised were there.&lt;/p&gt;
&lt;p&gt;But that&#39;s where the conversation can end too.&lt;/p&gt;
&lt;p&gt;The longer a conversation continues the more chance you have to convert the visitor to a customer, an advocate, or whatever it is you&#39;re trying to achieve.&lt;/p&gt;
&lt;p&gt;This extends beyond the copy, and goes right into the heart of how a project expresses itself.&lt;/p&gt;
&lt;p&gt;It&#39;s the colours and the feelings those colours generate in people. Its the interactions that bring that extra bit of sweetness, like a smart quip or a clever statement that makes someone think.&lt;/p&gt;
&lt;p&gt;###How We Get There&lt;br /&gt;
A conversational, or discursive, UI, says things you can&#39;t. It conveys the personality of those involved in the project and breathes life into the project itself, so it can stand on it&#39;s own merit as a reflection of those who founded it.&lt;/p&gt;
&lt;p&gt;Therefore I think conversational interfaces require more collaboration and crossover than we&#39;ve seen before. They&#39;re everybody&#39;s collective responsibility.&lt;/p&gt;
&lt;p&gt;Do we understand the culture of the organisation we&#39;ve been asked to represent? Do we animate in the way they are animated (I&#39;m not talking about motion capture here by the way, just the abstract representation of their style!) — do we interpret the content of the project in a way that supports and reinforces the product or service or goal they&#39;re trying to achieve?&lt;/p&gt;
&lt;p&gt;Eventually, I don&#39;t think slapping a &lt;code&gt;transition&lt;/code&gt; or an &lt;code&gt;ease-in&lt;/code&gt; on something is going to make the difference. Animation is going to become a level playing field we&#39;re all bound to see the validity of putting those sparkles into a project.&lt;/p&gt;
&lt;p&gt;Instead, they should be tailored, unified, and representative. They&#39;ve got to identify with users, hook them, invite them to explore further. They&#39;ve got to be their companion along their journey with a project, support them as they take action, and linger in their memories when they&#39;re gone, beckoning to them to return someday.&lt;/p&gt;
&lt;p&gt;&amp;quot;The Web is Agreement&amp;quot;, says Jeremy Keith. If that&#39;s so, then the interface is the conversation that leads to that agreement.&lt;/p&gt;
&lt;p&gt;Discursive, conversational UI is the way we get to express ourselves more fully in that greater conversation.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Updated Typeface: Introducing Skybird</title>
    <link href="https://example.com/posts/updated-typeface-introducing-skybird/"/>
    <updated>2016-04-28T14:21:21Z</updated>
    <id>https://example.com/posts/updated-typeface-introducing-skybird/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;So a few weeks&#39; ago I discovered a very small but excellently designed typeface from a Phitra Design called &lt;a href=&quot;https://phitradesign-fonts.com/#skybird&quot; title=&quot;Phitra Design - Skybird&quot;&gt;Skybird&lt;/a&gt;.&lt;/strong&gt; I decided almost at once that I would use it on deliciousreverie, and replace the old typeface, Vollkorn from Google Fonts.&lt;/p&gt;
&lt;p&gt;Straight away I felt that I identified with the typeface—it really spoke to my aesthetic: rustic, Victorian, with a hint of Edith Holden&#39;s &lt;a href=&quot;https://www.countrydiary.co.uk/&quot; title=&quot;Country Diary of an Edwardian Lady&quot;&gt;Country Diary&lt;/a&gt;. I must admit to becoming more confident in this aesthetic recently. Even though it&#39;s not perhaps what&#39;s in vogue right now, I would much rather choose something for my personal site that represents me, and is a little bit more offbeat.&lt;br /&gt;
I love Skybird very much, I&#39;m sure it&#39;s going to be popping up on other sites I design, as long as I can justify it.&lt;/p&gt;
&lt;h3 id=&quot;switching-from-vollkorn.&quot; tabindex=&quot;-1&quot;&gt;Switching from Vollkorn. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/updated-typeface-introducing-skybird/#switching-from-vollkorn.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vollkorn is a nice font, bold, rounded, with a hint of Cooper Black (another one of my favourites) — but there were a few downsides to using it here. As well as what I&#39;ve said above about aesthetic, the font had to be retrieved from Google&#39;s Content Delivery Network to be used, which sometimes added long delays to the site.&lt;/p&gt;
&lt;h3 id=&quot;performance-benefits&quot; tabindex=&quot;-1&quot;&gt;Performance Benefits &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/updated-typeface-introducing-skybird/#performance-benefits&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a result of switching to Skybird, I have gained a 100% performance rating from Google&#39;s &lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot; title=&quot;Page Speed Insights test&quot;&gt;PageSpeed Insights&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;I also test my sites with Pingdom&#39;s Tools, which gave some further insights:&lt;/p&gt;
&lt;p&gt;The grand total of 3 requests demonstrates that it&#39;s very possible today to design and build lightweight sites that still look good and are much more easily accessible by people in areas where there&#39;s not so good internet connections (read: anywhere but the western world!).&lt;/p&gt;
&lt;p&gt;If you&#39;re looking for some excellently crafted, unusual fonts, please check out &lt;a href=&quot;https://phitradesign-fonts.com/&quot; title=&quot;Phitra Design fonts home&quot;&gt;Phitra Design&lt;/a&gt;, there are some lovely alternatives to the overused classics on this site.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Some of my friends mentioned today that Skybird as a body font doesn&#39;t work so well, and were having trouble reading my posts. I&#39;m grateful that they called me out on that, and as a result I now have PT Sans (from Google fonts) as the body copy. The performance rating is down to 89%, which isn&#39;t quite as good as it was before, but there has to be a trade off between legibility and performance.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>WordCamp London 2016 Writeup</title>
    <link href="https://example.com/posts/wordcamp-london-2016-writeup/"/>
    <updated>2016-04-28T14:21:21Z</updated>
    <id>https://example.com/posts/wordcamp-london-2016-writeup/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Wordcamp London 2016 was a great chance to make new friends and learn some excellent insights about running a successful agency, wordpress security and the necessity of backups, and some other stuff I&#39;ve already started to use on a daily basis. Here&#39;s my roundup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This year was my first WordCamp meet up, so felt a bit weird as I didn&#39;t know anybody who was going. But right from the beginning I was met by friendly smiles and easy conversation, as well as great diversity.&lt;/p&gt;
&lt;p&gt;After the short keynote and meeting a few sponsors, I sat down to listen to the first talk I chose to attend:&lt;/p&gt;
&lt;p&gt;###Moove: Building An Innovative Agency&lt;/p&gt;
&lt;p&gt;The full transcript is &lt;a href=&quot;https://www.mooveagency.com/8-insights-how-to-build-innovative-digital-agency/&quot; title=&quot;Moove: How To Build an Innovative Digital Agency&quot;&gt;on the Mooove website&lt;/a&gt;, but what I really appreciated about their story was that Ilona and Adrian had a solid project management approach from the beginning. This allowed them to innovate on their approach to web design, which means they were able to challenge conventions more, to the point they&#39;re now giving back to the Wordpress community and releasing their own plugins.&lt;/p&gt;
&lt;p&gt;Takeaway:&lt;/p&gt;
&lt;blockquote&gt;
#&quot;Your portfolio will always get you your next project&quot;
&lt;/blockquote&gt;
&lt;p&gt;I loved how each of their case studies was a microsite, enabling them to showcase projects in a truly innovative way.&lt;/p&gt;
&lt;p&gt;All the way along, they have never stopped innovating and kept their standards high.&lt;/p&gt;
&lt;p&gt;###Transients&lt;/p&gt;
&lt;p&gt;This very technical talk by Julian Porter discussed how to use &lt;a href=&quot;https://codex.wordpress.org/Transients_API&quot; title=&quot;Transients API on wordpress.org&quot;&gt;Transients&lt;/a&gt; in a database cache to reduce load times. Julian especially recommended this method for storing what was coming in from other external services, such as social media as this resulted in the highest performance gain.&lt;/p&gt;
&lt;p&gt;When using we have to make sure to check with &lt;code&gt;false&lt;/code&gt;, otherwise &lt;code&gt;get_transient&lt;/code&gt; request will keep looping if there&#39;s nothing there.&lt;/p&gt;
&lt;p&gt;Takeaways: I&#39;m still not sure about using this technology myself, would love to give it a try.&lt;/p&gt;
&lt;p&gt;###Hacked Off: Dealing with a Hacked Wordpress Site&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://timnash.co.uk/&quot; title=&quot;Tim Nash&#39;s personal website&quot;&gt;Tim Nash&lt;/a&gt; gave this lively and hilarious presentation. Tim hilighted that Wordpress &lt;em&gt;is&lt;/em&gt; secure, but once you add your theme, a plugin, risks start creeping in. The good and bad thing about PHP is that it&#39;s very easy to do &lt;em&gt;anything&lt;/em&gt;, including hacking a site, which he demonstrated. It took less than 2 minutes.&lt;/p&gt;
&lt;p&gt;Tim had 6 points for how to recover:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Isolate — remove site from the server&lt;/li&gt;
&lt;li&gt;Identify — find out what went wrong. Look for 1 file that has a later time stamp by using &lt;code&gt;wp-core verify checksums&lt;/code&gt; if you have &lt;a href=&quot;https://wp-cli.org/&quot; title=&quot;Wordpress Command Line Interface&quot;&gt;wp-cli&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;Restore — from your daily backups. You do have daily backups, don&#39;t you?&lt;/li&gt;
&lt;li&gt;Check — change all passphrases (phrases - not words) and verify site works&lt;/li&gt;
&lt;li&gt;Remove from blacklists. All of them. (&lt;em&gt;This takes an awful lot of effort, as I know from experience.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Prevention — keep your site up to date. &lt;em&gt;Update core frequently&lt;/em&gt; Update to a more recent version of PHP.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Takeaways: I&#39;ve already started using &lt;a href=&quot;https://wpscan.org/&quot; title=&quot;WP Scan website&quot;&gt;WP Scan&lt;/a&gt; and yes, I&#39;m taking more regular backups too ...&lt;/p&gt;
&lt;p&gt;###A World Without Bugs&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mikeselander.com/presentations/world-without-bugs/#/1&quot; title=&quot;A World Without Bugs&quot;&gt;Mike Selander gave this presentation&lt;/a&gt;, which hilighted that bugs creep in from the very start, with the foundation of a project. If there&#39;s not a solid foundation, the building can come crashing down before you realise it.&lt;/p&gt;
&lt;p&gt;We can begin with standardising how we write code, with a guiding document on how to style, performance tuning and test.&lt;/p&gt;
&lt;p&gt;Takeaway: Mike said that because he has a consistent approach for building websites, he is very familiar with his code base. This means that he can quickly identify issues, and then roll out improvements to other sites built with this framework.&lt;/p&gt;
&lt;p&gt;###Debugging with Chrome Dev Tools&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://slidr.io/katiefenn/chrome-devtools-inside-out-wordcamp-london-2016#1&quot; title=&quot;Debugging in Chrome Dev Tools&quot;&gt;Katie Fenn&#39;s talk&lt;/a&gt; took us through how to use &lt;code&gt;debugger;&lt;/code&gt; instead of &lt;code&gt;console.log()&lt;/code&gt; to pause the state of our JS mid-flow, so that we could interact with vars and see what functions are currently running.&lt;/p&gt;
&lt;blockquote&gt;
#&quot;Let&#39;s solve the problem and not make it any worse by guessing&quot;
— Gene Katz
&lt;/blockquote&gt;
&lt;p&gt;With this command, you can also set conditions, so only pause if a condition is met. Very useful.&lt;/p&gt;
&lt;p&gt;###Guilt Free Coding&lt;/p&gt;
&lt;p&gt;I loved Jason Agnew&#39;s honest and humorous approach to guilt free coding, which gave me some insights into team working as well as tips for improving how I write approach a project.&lt;/p&gt;
&lt;p&gt;I guess there are two types of developers: the &amp;quot;fast and loose&amp;quot; guys who get the job done very quickly, but perhaps the code isn&#39;t as high quality as it could be, it isn&#39;t annotated, and it&#39;s harder for others to follow.&lt;/p&gt;
&lt;p&gt;Then there are another type, who are perhaps painfully slow, but do things properly so the project can be maintained long-term.&lt;/p&gt;
&lt;p&gt;Jason said that he got upset with another dev who would always refactor his code ... but after a while he realised this was so the dev felt he could save himself time long term, he wouldn&#39;t have to keep trying to make sense of &amp;quot;messier&amp;quot; code.&lt;/p&gt;
&lt;p&gt;However, the key thought was that if you&#39;re going to do that refactor, it would be best to discuss it with the originator first, otherwise communication could break down quite easily.&lt;/p&gt;
&lt;p&gt;Takeaway:&lt;br /&gt;
&lt;strong&gt;Prior&lt;br /&gt;
Preparation&lt;br /&gt;
Prevents&lt;br /&gt;
Poor&lt;br /&gt;
Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###Design Patterns&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/tammielis/design-patterns&quot; title=&quot;Design Patterns slides&quot;&gt;Tammie Lister&lt;/a&gt; took us through several projects to identify their patterns. She deconstructs sites so that she&#39;s able to see the base elements, and how they are used.&lt;/p&gt;
&lt;p&gt;I loved Tammie&#39;s analogy of a Lego set. If you buy a lego set, you&#39;re not buying a pirate ship, you&#39;re buying the &lt;em&gt;potential&lt;/em&gt; for a pirate ship, but also myriad other things you could also build.&lt;/p&gt;
&lt;p&gt;The lego set is similar to our pattern library:- its a focused, consistent version of the site that can be used in so many different ways.&lt;/p&gt;
&lt;blockquote&gt;
#&quot;we define our design in a single location and use a system to cascade it down to all platforms. We call it our Single Source of Truth&quot;
— Salesforce Living Design Systems
&lt;/blockquote&gt;
&lt;p&gt;Tammy also released this builder for the Underscores theme, which allows you to preselect framework styles for your project, and roll your own:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://components.underscores.me/&quot; title=&quot;Underscores Components&quot;&gt;components.underscores.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###Roundup&lt;/p&gt;
&lt;p&gt;As you can see, there was loads of good stuff, I&#39;ve already started using WP-cli, WP Scan and several other methods and ideas—and I only attended 1/3 of the talks that were held.&lt;/p&gt;
&lt;p&gt;I&#39;m going to be making this a regular event in my calendar, I think :-)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Only Time I&#39;ll Talk About My Religious Beliefs</title>
    <link href="https://example.com/posts/the-only-time-ill-talk-about-my-religious-beliefs/"/>
    <updated>2016-05-16T14:21:21Z</updated>
    <id>https://example.com/posts/the-only-time-ill-talk-about-my-religious-beliefs/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;You may have noticed that I refer to myself as one of Jehovah&#39;s Witnesses occasionally. I don&#39;t think I&#39;ve openly discussed this subject with any of you so far. However, I think that, out of curiosity, someone might like to know a little bit more. This post aims to tell you the only time I&#39;ll talk about my religion in my professional sphere.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s no accident that there aren&#39;t any articles of a religious nature on this site, despite me being one of Jehovah&#39;s Witnesses. The main reason is that it very rarely affects my professional life. And it has never affected my relationships at work or in my professional community, at least not in a negative way ( I hope my colleagues will back me up on that! )&lt;/p&gt;
&lt;p&gt;But some might be curious, and yet might not want to broach this subject with me personally.&lt;/p&gt;
&lt;p&gt;In which case, this post is for you.&lt;/p&gt;
&lt;h2 id=&quot;respect-over-being-right&quot; tabindex=&quot;-1&quot;&gt;Respect Over Being Right &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/the-only-time-ill-talk-about-my-religious-beliefs/#respect-over-being-right&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing I wanted to say is that I hope I&#39;ll always respect you, your choices and your opinions. Although I have deeply held beliefs, I don&#39;t believe they&#39;re right for everyone. Everyone has the freedom to choose what they want to believe. I am confident that, like me, you have reached the conclusions you have based on your own convictions, and on the evidence presented to you.&lt;/p&gt;
&lt;p&gt;The good thing about being human is that none of us have a monopoly on the truth. I fully appreciate that I could be wrong. So could any of us.&lt;/p&gt;
&lt;p&gt;Therefore, I believe it would be grossly disrespectful to force my beliefs on you or to perhaps embarrass you for what you hold dear.&lt;/p&gt;
&lt;p&gt;If you think I &lt;em&gt;am&lt;/em&gt; doing this, please challenge me on it. I&#39;ll listen, and I hope I&#39;ll make changes if I think they&#39;re necessary.&lt;/p&gt;
&lt;h2 id=&quot;when-i&#39;ll-talk&quot; tabindex=&quot;-1&quot;&gt;When I&#39;ll Talk &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/the-only-time-ill-talk-about-my-religious-beliefs/#when-i&#39;ll-talk&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That being said, a robust conversation where we can explore each others&#39; point of view whilst maintaining respect for each other would be welcome.&lt;/p&gt;
&lt;p&gt;I would be happy to explain why I believe certain things, why I act a certain way, or decline to get involved in certain activities. But what I don&#39;t want is to upset, anger or frustrate anyone. So I might decline or duck out if I think the conversation could become led by emotions rather than an intellectual exercise of our respective viewpoints.&lt;/p&gt;
&lt;p&gt;So, in short, the only time I&#39;m going to talk about my religious beliefs is when I believe the discussion is going to end as it started: as a conversation between friends who respect each other&#39;s point of view.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Book Review: The City &amp; The City, China Mieville</title>
    <link href="https://example.com/posts/book-review-the-city-and-the-city-china-mieville/"/>
    <updated>2016-06-15T14:21:21Z</updated>
    <id>https://example.com/posts/book-review-the-city-and-the-city-china-mieville/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Time is precious for me having a kid and a demanding job, so I&#39;m pleased I&#39;ve managed to find the time to read The City &amp;amp; The City, China Mieville&#39;s (very successful) attempt at the crime thriller genre.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m not typically a reader of crime fiction, however I&#39;ve really enjoyed some of Mieville&#39;s urban fantasy work in the past, and know he&#39;s a smart, well-researched writer who is prone to a bit of genre-hopping ... his plots often take unexpected twists, for which this work is no exception.&lt;/p&gt;
&lt;h3 id=&quot;the-city&quot; tabindex=&quot;-1&quot;&gt;The City &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/book-review-the-city-and-the-city-china-mieville/#the-city&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Melville, writing as he often does from the first person perspective, describes an inspector sent to investigate a grimy murder in Beszel, a city &amp;quot;on the outskirts of Europe&amp;quot;, which we hear is jostling for economic position with it&#39;s more successful neighbour, Ul Quoma.&lt;/p&gt;
&lt;p&gt;But it&#39;s pretty soon we realise that this other city &lt;em&gt;isn&#39;t&lt;/em&gt; in a separate location from Beszel, but in the same place. It&#39;s quite difficult to describe, but you get parts of the topography which are located in Beszel, but some are in Ul Quoma. So you could live &amp;quot;gross topically&amp;quot; (a word coined to describe a physical location which nevertheless is in a different &lt;em&gt;political&lt;/em&gt; locality — that of the other city) next to someone who lives in a totally different city. A city for which, if you wanted to visit them, you needed to go to a consulate and obtain a visa. This is complicated by parts of the territory that are &amp;quot;crosshatched&amp;quot;, or located in &lt;em&gt;both&lt;/em&gt; cities, but through which you have to navigate residents of the other cities (&amp;quot;foreigners&amp;quot; to you) without interacting, or even noticing them.&lt;/p&gt;
&lt;p&gt;Make sense? No? Stop there, go get the book, because it does get weirder.&lt;/p&gt;
&lt;h3 id=&quot;borders&quot; tabindex=&quot;-1&quot;&gt;Borders &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/book-review-the-city-and-the-city-china-mieville/#borders&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The borders are policed by a seemingly omnipotent force which is above the law called Breach. If you, even inadvertently, step over in to the other city, or speak to a &amp;quot;foreigner&amp;quot;, they will immediately arrest you. You might not ever come back once they do.&lt;/p&gt;
&lt;p&gt;When our detective finds out that the murder may have been committed in Ul Quoma, the foreign city, he needs to cross over to uncover what happened to her, and in the process discovers that something more sinister is happening.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/book-review-the-city-and-the-city-china-mieville/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I really enjoyed this book, but always feared it would step too far away from the crime genre to be accessible. However, it doesn&#39;t do that. Even though the plot takes some pretty intense turns that leave you reeling, its still a crime thriller through and through.&lt;/p&gt;
&lt;p&gt;A great book, highly recommended. I purchased Melville&#39;s Embassytown on the strength of this short, engaging novel.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Poem Review: She Weeps Over Rahoon, James Joyce</title>
    <link href="https://example.com/posts/poem-review-she-weeps-over-rahoon-james-joyce/"/>
    <updated>2016-07-07T14:21:21Z</updated>
    <id>https://example.com/posts/poem-review-she-weeps-over-rahoon-james-joyce/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;A very dear friend introduced me to James Joyce many years ago with his coming-of-age almost-biography, A Portrait of a Young Man, which had a deep impact on me. But it&#39;s only now I&#39;m starting to pick up on just what a master of the English language Joyce was—through his poetry.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Joyce for many people, I am sad to say it, might always be an inaccessible bastion of 20th century literature. It&#39;s true that I&#39;ve struggled and failed to maintain enthusiasm for, much less read Ulysses and Finnegan&#39;s Wake, as highly regarded as they are.&lt;/p&gt;
&lt;p&gt;But Joyce&#39;s power over the English language was demonstrated ever so well in his poems, too, and it&#39;s these that I treasure above his larger volumes. If you&#39;re not convinced, spend a few hours reading &lt;em&gt;chamber music&lt;/em&gt; carefully. It&#39;s truly beautiful and evocative.&lt;/p&gt;
&lt;p&gt;Yet, until very recently, I had totally missed out on this shorter poem:&lt;/p&gt;
&lt;h3 id=&quot;she-weeps-over-rahoon&quot; tabindex=&quot;-1&quot;&gt;She Weeps Over Rahoon &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/poem-review-she-weeps-over-rahoon-james-joyce/#she-weeps-over-rahoon&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Rain on Rahoon falls softly, softly falling,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Where my dark lover lies.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Sad is his voice that calls me, sadly calling,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;At grey moonrise.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Love, hear thou&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;How soft, how sad his voice is ever calling,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ever unanswered, and the dark rain falling,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Then as now.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dark too our hearts, O love, shall lie and cold&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;As his sad heart has lain&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Under the moongrey nettles, the black mould&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;And muttering rain.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is some biographical background to this poem, which is that Joyce&#39;s lover was visiting the grave of a previous love, which inspired Joyce to write the poem. Doesn&#39;t it evoke some of the poignant sadness of that occasion, as well as some of the other sad fates of unmentioned Irish men?&lt;/p&gt;
&lt;p&gt;But as with many 20th century authors, although the context is interesting, the text is much more than a sum of its parts. For me the cadence of the poem as well as its structure conjures up the wind, rain and bleakness of Rahoon. But just enough of it is obscure that I start to ruminate over what I &lt;em&gt;don&#39;t&lt;/em&gt; know, or isn&#39;t explicitly stated.&lt;/p&gt;
&lt;p&gt;For instance, why is it Rahoon she weeps over, not her lover? Is there some greater tragedy below the surface? The line &lt;em&gt;dark too our hearts&lt;/em&gt; makes me think about my own mortality too, which brings the tragedy home with a great sharpness.&lt;/p&gt;
&lt;p&gt;Joyce was an absolute master of the English language, and seemed to know just what to say that would  reach through the pages into the readers&#39; heart.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why We Need the Web Guild</title>
    <link href="https://example.com/posts/why-we-need-the-web-guild/"/>
    <updated>2016-07-19T14:21:21Z</updated>
    <id>https://example.com/posts/why-we-need-the-web-guild/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;As the scope of our market is being altered dramatically, we are also facing challenges to the way our industry operates. How can we meet these challenges? How can we do so in a way that still enables us to not only function on a professional level, but to continue to grow and adapt to changes outside our current sphere of influence?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@endymion1818/why-we-need-the-web-g%E2%80%A6&quot; title=&quot;Why We Need The Web Guild on Medium&quot;&gt;&lt;em&gt;this post was originally published by me on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As young teenagers, my brother and I were furiously independent idealists for whom compromise was a byword for failure. We valued our individuality and strove to actively alienate ourselves from our peer group. Looking back, I think it was something to do with finding ourselves relocated to Wales from the North East, and desperately wanting to go back to County Durham, which we idealised.&lt;/p&gt;
&lt;p&gt;As we grew up, we became more aware of our need for association, companionship in the way of friendships and, perhaps most importantly, the need for those who represented our views to a wider world.&lt;/p&gt;
&lt;p&gt;I feel that our industry is approaching a similar realisation, in the wake of a few recent events.&lt;/p&gt;
&lt;p&gt;###Growing pains&lt;br /&gt;
It’s becoming evident that the web development industry is approaching a bit of a crisis point. For a long time, we have been a raggedy collection of fiercely independent thinkers and doers who have achieved great things, sometimes in isolation, sometimes as part of the larger web development community.&lt;/p&gt;
&lt;p&gt;I’m so proud of this: to work in an industry that challenges certain parameters that others would not think to, that is so open and adaptable to change. For instance, at certain times, we’ve moved as a whole, led by the good work and commitment of a few, to adapt to changes which would otherwise have stalled other industries or caused deep-rooted divisions.&lt;/p&gt;
&lt;p&gt;But this industry is still in some ways limited by what it is, too.&lt;/p&gt;
&lt;p&gt;In the end, my brother and I needed that sense of validation. We needed someone to be our advocates or representatives to those with whom we couldn’t communicate with directly.&lt;/p&gt;
&lt;p&gt;A community is made up of individuals with wide ranging viewpoints, opinions, and approaches. Some are quieter and don’t seem to participate much. Others are quite vocal, or are good at voicing the opinions or needs of the majority of the group.&lt;/p&gt;
&lt;p&gt;It’s this vocal representation that I think would be beneficial for our community at this stage.&lt;/p&gt;
&lt;p&gt;Without a representative organisation, we are dependent on great effort by individuals to find which way the wind is blowing over certain practices, sometimes taking risks by adapting to them early enough to support future browsers and device classes — but trying not doing so too early, so that there’s less risk of the practice or technology being found to have a fatal flaw that would hurt our reputation and businesses.&lt;/p&gt;
&lt;p&gt;This bothers me. It is fun for those of us who enjoy the this challenge, and have the time and willingness to keep up with blogs, newsletters, and twitter feeds of organisations and individuals leading the way forward. The trouble is, this information isn’t accessible unless you have learned the hard way where to find it.&lt;/p&gt;
&lt;p&gt;It’s the first thing I do when meeting people who are interested in a career in web development: make suggestions about who to follow on Twitter, subscribe to which newsletters, read certain blogs, buy which print magazine. Because without that guidance, a person can be disheartened by the lack of a clear path about what’s important to us as employers, what’s good practice to follow, what current thinking there is on certain subjects.&lt;/p&gt;
&lt;p&gt;I am of the opinion that an organisation that could channel and focus these resources into a single source that would reduce effort and waste by many individuals.&lt;/p&gt;
&lt;p&gt;Not that it would dictate a standard over things like which CMS to use, which UI framework might be “correct” etc, but instead to perhaps advise on best practice in the broader sense.&lt;/p&gt;
&lt;p&gt;However, that’s only a small concern when faced with the high-stakes game of legislation.&lt;/p&gt;
&lt;p&gt;###Legislators Gonna Legislate&lt;br /&gt;
Fierce independence and lack of unity charachterises our industry, however there’s one thing we seem to uniformly dislike: legislation that is difficult — sometimes impossible — to enforce.&lt;/p&gt;
&lt;p&gt;This happened for Europe — and actually for the rest of the world too — when the European Union enacted ‘the cookie law’, designed to protect users and consumers by informing them when data about them was stored on other computers and / or transmitted or used in some way.&lt;/p&gt;
&lt;p&gt;As noble an objective as it probably was, the reality has been far from what was likely invisaged by its originators. Instead of greater transparency for organisations and greater protection for indivuals, we all got annoyed by the obligatory messages we had to dismiss from our screens each time we visited a domain.&lt;/p&gt;
&lt;p&gt;This issue has originated because we have never had representation to the EU. We have never had an organisation to represent our interests, to inform those legislators of what would be considered best usability, the easiest to implement, and thus affect the outcome of the legislative decision.&lt;/p&gt;
&lt;p&gt;Without that, we leave ourselves open to further legislation from any quarter that could make our lives, and the lives of consumers much more difficult.&lt;/p&gt;
&lt;p&gt;###What is a Professional?&lt;br /&gt;
Another thing that’s bothering me about the current state of the industry is the lack of trust that exists for employers hiring web developers, and for others involved in commissioning web development work. They just don’t know who to trust.&lt;/p&gt;
&lt;p&gt;You could get someone who is clever at selling to persuade a small firm to pay thousands for a website that should cost them only hundreds of pounds. There are some in the industry who can re-purpose a popular CMS theme, change some colours, upload some free stock photography, and charge much more for it than it’s actually worth. This approach hurts those in our industry that do make an effort to create something bespoke — either entirely bespoke, or that uses an established CMS as a platform for some completely original theme, or a base UI for some pretty original functionality.&lt;/p&gt;
&lt;p&gt;Not that this approach ought be considered wrong, but that it should remain a seperate service from serious web developers, and that an individual or organisation would know where to look for someone who has an ability that would suit their needs and budget.&lt;br /&gt;
This might apply to contractors as well, where they would have a choice between someone who isn’t, shall we say, accredited and committed to developing their professional skills, and others who perhaps aren’t as transparent about that choice, but could have other benefits to the contractor.&lt;/p&gt;
&lt;p&gt;###As Compared to the Architecture Industry (again)&lt;br /&gt;
It does seem to me that the architecture industry and web development are somehow intrinsically linked. The term “responsive” originated with architecture, and quite often we find ourselves borrowing analogies from that industry.&lt;/p&gt;
&lt;p&gt;So I’m going to do it again.&lt;/p&gt;
&lt;p&gt;The Royal Institute of British Architects has a strong reputation in the UK. If somene is RIBA accredited, there is an assumption of quality and professionalism that carries. It’s not perfect, of course, and that’s why they have a process for reporting and expulsion where that becomes necessary.&lt;/p&gt;
&lt;p&gt;This is where I strongly feel The Web Guild can help us, if we choose to accept that help. The Guild is still in it’s early days, but certain things they have set in place already make me believe that they are genuinely interested in assisting the industry with representation, with setting some kind of standard for quality and professionalism, one that needn’t exclude others who choose not to join the Guild.&lt;/p&gt;
&lt;p&gt;###Here are 3 things that I’ve noticed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They do not accept organisations who cannot prove they have professional indemnity insurance. This at least sets some bar to entry for those who care about their reputation and the reputation of those they produce things for.&lt;/li&gt;
&lt;li&gt;Members must submit regular CPD (Continuing Professional Development) updates. This might be some project they’ve worked on, but it could also consist of blog posts. Now, that interests me, because that is how currently some organisations assess prospective employees. It’s something that is recommended for web developers so that we continue to advance our collective knowledge.&lt;/li&gt;
&lt;li&gt;They are already striving to represent web developers to the EU legislative body. That they’re willing to do this at this early stage of their existence shows us that they are genuinely interested in representing the community.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really think that The Web Guild could become our RIBA. A mark of professionalism, a structure to our otherwise ragtag community, which doesn’t supress individuals who don’t wish to be members, but can represent their interests indirectly through its efforts.&lt;/p&gt;
&lt;p&gt;My brother and I aren’t worse off because we have some structure to our communities.We are stronger because of that. We haven’t lost that strong sense of individuality or that need for independence when we want to strike out on our own.&lt;/p&gt;
&lt;p&gt;But now we have something to go back to and share those experiences with.&lt;/p&gt;
&lt;p&gt;At the moment, there’s only a small charge for becoming a member of the Guild. Taking advantage of that I believe will be something that will pay dividends to you and your organisation in the future.&lt;/p&gt;
&lt;p&gt;I believe we really need The Web Guild to grow. Let’s support them as a way to achieve further greatness, by becoming a truly professional community that can be a bit more organised and, much more importantly, who have a clear, distinct voice.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.thewebguild.org/reasons-to-join&quot; title=&quot;Reasons to Join The Web Guild&quot;&gt;https://www.thewebguild.org/reasons-to-join&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First Steps with zsh</title>
    <link href="https://example.com/posts/first-steps-with-zsh/"/>
    <updated>2016-08-24T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-zsh/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;m one of those guys (coming from a design background) that was terrified of the command line. Literally, terrified. I knew enough that simple commands could irreparably break my computer, and that scared me. But gradually, I&#39;ve begun to use more command line tools, and recently discovered ways to make my workflow easier by using zsh terminal commands.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started using the terminal because of the benefits of build tools. I use Grunt in everyday production of my websites now, to minify &amp;amp; concat my JS and SASS files, and sometimes to minify images and SVGs. If it hadn&#39;t been for these benefits, I doubt I would have ever used the terminal in the way I do now.&lt;/p&gt;
&lt;p&gt;###GIT in its Native Environment&lt;br /&gt;
I recently ditched my 2 git graphical user interface programs (Github and Git Kraken) in favour of using the terminal. I liked how I could have more control over my commits this way, and not have the extra overhead of another program open whilst I&#39;m trying to work (I have a very minimalist approach to working, as far as that&#39;s possible).&lt;/p&gt;
&lt;p&gt;Git on the command line is fantastically useful, and I&#39;ve never been more comfortable stashing, switching branches and doing all kinds of fancy things ... but I always wanted my terminal to do something more.&lt;/p&gt;
&lt;p&gt;I find the following things really useful:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[8:45|&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the time I ran the command. So if I&#39;m working through a project I can see exactly what time something was done ... this gets useful if you&#39;re tracking how long a certain task has taken, especially if your time is billable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/S/ech-ech&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next bit shows the current path in an abbreviated form. For example, the &lt;code&gt;/S/&lt;/code&gt; refers to the &amp;quot;Sites&amp;quot; directory.&lt;/p&gt;
&lt;p&gt;Following that is the git information I was telling you about:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git:(master)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This shows that the current directory is a git project, and that the current branch is one called master.&lt;/p&gt;
&lt;p&gt;This reference, in purple in the screenshot:&lt;/p&gt;
&lt;p&gt;&lt;code&gt; 0dd6b659&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Is the commit hash. I use this to track my commits through the day, and can easily scan up &amp;amp; down my commit history to see what changes are made, when.&lt;/p&gt;
&lt;p&gt;###A Note about Tools&lt;br /&gt;
To get this functionality, I&#39;m using a tool called &lt;a href=&quot;https://ohmyz.sh/&quot; title=&quot;Oh My ZSH website&quot;&gt;Oh My zsh&lt;/a&gt;, a tool which has hundreds of themes  , of which I&#39;m using this one: &lt;a href=&quot;https://github.com/calebmeyer/cpm-zsh-theme&quot;&gt;https://github.com/calebmeyer/cpm-zsh-theme&lt;/a&gt;, which you have to install manually (instructions are on the readme file).&lt;/p&gt;
&lt;p&gt;I also enabled a few extra plugins for git functionality by adding this to the .zshrc file: &lt;code&gt;plugins=(git git-extras git-remote-branch)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I would never have become this confident were it not for this course on Udemy: &lt;a href=&quot;https://thoughtbot.com/upcase/videos/git-workflow&quot;&gt;https://thoughtbot.com/upcase/videos/git-workflow&lt;/a&gt;. Check it out! There&#39;s lots more in the course, including some snippets you can run so that you can use git even more effectively.&lt;/p&gt;
&lt;p&gt;###Confidence in Progress&lt;br /&gt;
I&#39;m still working on using the command line effectively. I&#39;ve recently decided to start using webp images in my website builds ... there&#39;s a command-line tool that &lt;a href=&quot;https://developers.google.com/speed/webp/docs/cwebp&quot; title=&quot;webp processor command line tool from Google&quot;&gt;converts jpg files to webp&lt;/a&gt; and a script here that allows you batch process all images in a directory: &lt;a href=&quot;https://stackoverflow.com/questions/26565191/batch-process-png-to-webp&quot;&gt;https://stackoverflow.com/questions/26565191/batch-process-png-to-webp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, if you&#39;re not confident with the command line, there are many useful, time saving things you can do. Perhaps now is the time to give it a go?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Switching to BEM Syntax for CSS</title>
    <link href="https://example.com/posts/switching-to-bem-syntax-for-css/"/>
    <updated>2016-10-21T14:21:21Z</updated>
    <id>https://example.com/posts/switching-to-bem-syntax-for-css/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Like a lot of things in the web world, CSS is a bit of mess. As the web gets more complicated, the tools and languages we use need to develop with us. This is currently happening as the W3C push forward with new functionality like Grid and Flexbox, but until those come into general use, we can aim to limit the risk of our code becoming unfathomable by other developers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was a little suspicious of using BEM syntax for describing my CSS, I guess I didn&#39;t see the need for it and didn&#39;t have to work with other developers that much. But once I saw how it was being used on a project, I must say I was beginning to warm to the idea.&lt;/p&gt;
&lt;p&gt;If you take a look at the code on the &lt;a href=&quot;https://futurelearn.com/&quot;&gt;FutureLearn website&lt;/a&gt;, I find I can much more easily scan the code and identify the different elements that appear -- and more importantly, I can clearly follow the hierarchy of elements that are used on the site. Now, this hierarchy is critically important and something that can be very valuable to your projects.&lt;/p&gt;
&lt;h3 id=&quot;wait-doesn&#39;t-sass-nesting-give-us-hierarchy&quot; tabindex=&quot;-1&quot;&gt;Wait, doesn&#39;t SASS nesting give us hierarchy? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/switching-to-bem-syntax-for-css/#wait-doesn&#39;t-sass-nesting-give-us-hierarchy&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, it&#39;s true that you can nest elements inside one another, and therefore more easily scan your CSS. So an element would be described something like this:&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.panel &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;...&lt;br /&gt;&lt;br /&gt;    .body &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token selector&quot;&gt;.title &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        ...&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;.image &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token selector&quot;&gt;.caption &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        ...&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But have you ever looked at the output for that in your CSS file?&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.panel &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel .body &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel .body . title &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel .image &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel .image .caption &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this is still fairly easy for us to scan quickly, the downside is that all of these extra selectors in your entire project up can eventually slow down the parsing of your css file.&lt;/p&gt;
&lt;p&gt;BEM allows us to use a much flatter format, which can be even more descriptive:&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.panel &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel__body &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel__title &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel__image &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.panel__caption &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These double underscores indicate that the selector is referring to an Element (the “E” in “BEM”) of the Block &lt;code&gt;.panel&lt;/code&gt;. This keeps the CSS flatter and allows us to scan what the element is doing quickly.&lt;/p&gt;
&lt;p&gt;This gets even more useful when you add in Modifiers.&lt;/p&gt;
&lt;h2 id=&quot;modifiers&quot; tabindex=&quot;-1&quot;&gt;Modifiers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/switching-to-bem-syntax-for-css/#modifiers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An elements might have a variant that we would use in a different context:- say, for example, a navbar in the footer: we could re-use the same Block-level code, with a few modifications. Keeping with our example, we could do this:&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.panel—-large &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the HTML I would then have&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;“panel&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;panel—large”&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	…&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, the Modifier class would only contain the modifier code.&lt;/p&gt;
&lt;p&gt;This is helping me to think a bit more about the structure of my code: I find that I’m looking for ways of making a class as succinctly as possible, because at some point it could be extended or re-used in some other way.&lt;/p&gt;
&lt;p&gt;For that reason, I don’t typically specify things like column widths inside Blocks, my sizes are a separate entity which &lt;em&gt;contain&lt;/em&gt; these elements. That way I can specify how wide an item is by using a column, Flexbox, or (in the near future!) Grid syntax.&lt;/p&gt;
&lt;h2 id=&quot;to-conclude&quot; tabindex=&quot;-1&quot;&gt;To Conclude &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/switching-to-bem-syntax-for-css/#to-conclude&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using BEM syntax makes logical sense, it’s not a huge thing to learn, and helps me keep my code clean and easy to follow by other developers. It doesn’t require any extra build tools but has increased my productivity quite a bit.&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://getbem.com/introduction/&quot;&gt;getbem.com&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using WSL (BASH for Windows)</title>
    <link href="https://example.com/posts/using-wsl-bash-for-windows/"/>
    <updated>2016-11-01T14:21:21Z</updated>
    <id>https://example.com/posts/using-wsl-bash-for-windows/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;At a new job I&#39;ve been tasked with moving to Windows as my main production environment. At first approaching this idea with some trepidation, I have since discovered and been able to install the new Windows Subsystem for Linux on my PC, and it&#39;s proven to be a really useful tool.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Bash on Windows&amp;quot; isn&#39;t really what it says it is. It&#39;s not simply the terminal, but linux commands for the whole of the windows subsystem. &lt;a href=&quot;https://msdn.microsoft.com/en-us/commandline/wsl/about&quot; title=&quot;About Bash on Ubuntu on Windows (Microsoft Developer Network)&quot;&gt;There&#39;s a video here&lt;/a&gt; that demonstrates what&#39;s possible, but as a &amp;quot;normal-ish&amp;quot; developer with the sole aim of developing websites, and no special knowledge of Linux or Windows, I thought it would be interesting to share what I found to be most helpful, and most challenging, about using it.&lt;/p&gt;
&lt;h3 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;The Problem &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#the-problem&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was pleased that I was able to install WSL without a hitch &lt;a href=&quot;https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/&quot; title=&quot;how to install and use the linux bash shell on Windows 10 from How To Geek&quot;&gt;using this guide on how-to geek&lt;/a&gt;,  but that&#39;s where it stopped being easy for me.&lt;/p&gt;
&lt;p&gt;Problems arose because the build process my new employer had established required using a command-line php script which was a wrapper for &lt;a href=&quot;https://wp-cli.org/&quot; title=&quot;Command line interface for Wordpress&quot;&gt;WP-CLI, the command-line interface for Wordpress&lt;/a&gt;. This script ran through a few steps that would be essential to me getting up and running and developing new sites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download Wordpress Core&lt;/li&gt;
&lt;li&gt;Add build plugins and remove existing dummy content&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;wp-config&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Connect to MySQL, add and configure a database&lt;/li&gt;
&lt;li&gt;Download plugins and themes from a private Git repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, this required a &lt;em&gt;number&lt;/em&gt; of connecting services, which were not already installed on either Windows, or WSL. I made the decision that I would install these first inside WSL, and see if that would be more useable. I figured that it would be more difficult to configure everything I needed using the more unfamiliar Windows Command line.&lt;/p&gt;
&lt;h3 id=&quot;command-line-php-and-wp-cli&quot; tabindex=&quot;-1&quot;&gt;Command-line PHP and WP-CLI &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#command-line-php-and-wp-cli&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I found installing these two tools was fairly easy using wget, and adding to my BASH profile. The only hitch (that I discovered later) was that the php user didn&#39;t have the necessary permissions to create the &lt;code&gt;wp-config.php&lt;/code&gt; file. I discovered that by changing ownership of the folder I was using for my web projects to &lt;code&gt;www-data&lt;/code&gt; was the key.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; -R www-data /var/www/html/&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;amp-(apache-mysql-and-php)&quot; tabindex=&quot;-1&quot;&gt;AMP (Apache, MySQL and PHP) &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#amp-(apache-mysql-and-php)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was the most difficult step out of all of them. I discovered quickly that my regular tools of choice (&lt;a href=&quot;https://www.mamp.info/&quot; title=&quot;Mac Apache Mysql and PHP application for Windows and Mac&quot;&gt;MAMP&lt;/a&gt; or &lt;a href=&quot;https://www.wampserver.com/en/&quot; title=&quot;WAMP Server&quot;&gt;WAMP&lt;/a&gt;) meant that MYSQL was a Windows executable, and so not useable in bash. My heart sorta sank at this point. However, configuring my own AMP stack is something that I had wanted to do so ...&lt;/p&gt;
&lt;p&gt;I quickly found this excellent tutorial on &lt;a href=&quot;https://community.linuxmint.com/tutorial/view/486&quot; title=&quot;Linux Mint Community Forum Tutorial: Installing LAMP on Linux Mint&quot;&gt;Linux Mint community forum&lt;/a&gt; which takes you step-by-step through nearly everything I needed to download and install the AMP stack.&lt;/p&gt;
&lt;p&gt;One major hitch that occurred was when I did get my website up and running, but all links on the site were 404ing. Turns out that I needed to configure &lt;code&gt;MOD_REWRITE&lt;/code&gt; on Apache. &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-mod_rewrite-for-apache-on-ubuntu-14-04&quot; title=&quot;Digital Ocean: How to set up Mod Rewrite for Apache&quot;&gt;This tutorial on Digital Ocean&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/23665064/project-links-do-not-work-on-wamp-server&quot; title=&quot;Project Links do not work on WAMP server&quot;&gt;this question on Stack Overflow&lt;/a&gt; helped immensely.&lt;/p&gt;
&lt;p&gt;Once I had gone through all this and changed a few things, I found that links still weren&#39;t working. Then, I noticed that Wordpress was telling me that it couldn&#39;t write to &lt;code&gt;.htaccess&lt;/code&gt;, and gave me a snippet to paste there. Voilá, working websites.&lt;/p&gt;
&lt;h3 id=&quot;git-access&quot; tabindex=&quot;-1&quot;&gt;GIT Access &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#git-access&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The final piece in this particular puzzle was GIT. I needed to set up global credentials and store them in the system memory so that the build script could use them when it required. I eventually discovered that you can use a credential helper to store your user and pass in memory:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global credential.helper cache&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once these were configured, I was able to run my company&#39;s build script, and all was well with the world.&lt;/p&gt;
&lt;h3 id=&quot;why-i&#39;m-not-using-it-now&quot; tabindex=&quot;-1&quot;&gt;Why I&#39;m Not Using It Now &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#why-i&#39;m-not-using-it-now&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, after going through all this pain, I eventually &lt;em&gt;did&lt;/em&gt; manage to get over my particular hurdle and configure my Windows environment to use our in-house script and WP-CLI, although it was a challenge.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;The principle reason was that there is a barrier between WSL and the Windows environment. It&#39;s not always perceptible, but it&#39;s there.&lt;/p&gt;
&lt;p&gt;The main thing is that the file system is still in flux. I found that the Linux filesystem &lt;a href=&quot;https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/&quot; title=&quot;Using WSL on How To Geek&quot;&gt;aforementioned tutorial on How-To Geek&lt;/a&gt; has moved location in latest builds of WSL, and I couldn&#39;t locate it. This means that opening files in my text editor (Sublime Text or Atom) was an impossibility.&lt;/p&gt;
&lt;p&gt;Even if I had pursued it, I found out that there are &lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/&quot; title=&quot;WSL File System Support at Windows Developers&quot;&gt;incompatibilities in the filesystem&lt;/a&gt; which could mean that files might not be compatible after opening. Some have reported that files become invisible in WSL after being opened using a Windows application.&lt;/p&gt;
&lt;p&gt;I did start using the venerable Vim to edit my files, and actually, it&#39;s something I want to go back to one day. But I&#39;m pretty sure in the short term at least, with looming project deadlines, it would frustrate me very much.&lt;/p&gt;
&lt;p&gt;There are also currently some issues with MySQL which the WSL team are looking into, and I did find it to be buggy. Hey, this is an early release, there&#39;s bound to be glitches that need ironing out.&lt;/p&gt;
&lt;h3 id=&quot;what-i-learned&quot; tabindex=&quot;-1&quot;&gt;What I Learned &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-wsl-bash-for-windows/#what-i-learned&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I still use WSL every day to navigate around my file system and to run build scripts, and that isn&#39;t going to change. For me, it&#39;s far more intuitive and I&#39;m comfortable with it.&lt;/p&gt;
&lt;p&gt;Although it&#39;s really nice to have it, but actually I don&#39;t think it&#39;s an essential. Being able to use BASH to open folders, or open folders in .exe apps, now that would be incredible.&lt;/p&gt;
&lt;p&gt;Windows Subsystem for Linux is a bold move by Microsoft, and its something I&#39;m going to follow closely regardless of how I use it in the future. In the current climate I&#39;m less inclined to be loyal to Apple, and Microsoft is slowly turning into a viable alternative. That&#39;s if I don&#39;t ditch both of them and go to Linux.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Frontier Conference 2016</title>
    <link href="https://example.com/posts/frontier-conference-2016/"/>
    <updated>2016-11-16T14:21:21Z</updated>
    <id>https://example.com/posts/frontier-conference-2016/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently attended what I hope will be the first Frontier Conference held in London. The event was a mix of design &amp;amp; development, with some experienced speakers and some who are fairly new to public speaking. I benefited from the opportunity to network as well as listening to these insightful talks.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;opening-keynote:-aral-balkan-the-matrix-inverted&quot; tabindex=&quot;-1&quot;&gt;Opening Keynote: Aral Balkan — The Matrix Inverted &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#opening-keynote:-aral-balkan-the-matrix-inverted&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I really enjoy listening to Aral speak. As well as being a really good speaker, the things he says are important, and offer a fresh perspective on where the web is at the moment. It&#39;s often pretty scary, but Aral doesn&#39;t shy away from the facts.&lt;/p&gt;
&lt;p&gt;Aral opened by describing how Facebook works. Facebook wants to use our data to influcence the services we get. &amp;quot;It&#39;s your data — but it&#39;s really Facebook&#39;s.&amp;quot; — why is it Facebook&#39;s? Because they create a &lt;em&gt;simulation&lt;/em&gt; of you in order to predict your behaviour, your relationships, your emotions.&lt;/p&gt;
&lt;p&gt;The Internet of things isn&#39;t&lt;/p&gt;
&lt;p&gt;It&#39;s not just companies like Facebook who are interested in the Internet of Things. It&#39;s also insurance companies. They want to know what&#39;s in your fridge. It can tell them more about your lifestyle. That way, they can charge you more based on your lifestyle choices.&lt;/p&gt;
&lt;p&gt;That&#39;s pretty scary.&lt;/p&gt;
&lt;p&gt;China already has a pilot program to use a social media behaviour to influence your citizen score. If you&#39;re a good citizen, your kids will get to go to a better school. Black Mirror S03E01 &amp;quot;Nose Dive&amp;quot;.&lt;/p&gt;
&lt;p&gt;Matrix - live in a virtual space, physically farmed. Today we live in a tangible space, being farmed in a virtual space. Not our bodies, our minds.&lt;/p&gt;
&lt;p&gt;When MZ buys a house, he buys the 4 houses that surround his house. His privacy is not dead - yours is.&lt;/p&gt;
&lt;p&gt;MZ is 1 of 62 ppl who have as much wealth as 50% of the world&#39;s poor combined. That&#39;s 3.5bn ppl. Systemic inequality.&lt;/p&gt;
&lt;p&gt;What do you do?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build walls around. Protect your stuff.&lt;/li&gt;
&lt;li&gt;Keep an eye on the rest of the world. They might be up to no good.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are only 2 industries that call ppl who use their products &amp;quot;users&amp;quot;. Us, drug dealers.&lt;/p&gt;
&lt;p&gt;Users - store data, analyze. Create profiles of users. A similation of the user. More higher fidelity as we go. FB owns this similation. This similation - insight - is what we sell to customers.&lt;/p&gt;
&lt;p&gt;What is &amp;quot;data&amp;quot;? A valuable asset. &amp;quot;The new oil&amp;quot; Data is used to describe about a rock and a human. !!Alarm bells!!&lt;/p&gt;
&lt;p&gt;What is the nature of data about people? If a statue, have enough data, can replicate. What can I do if I have enough data about you? Exploit &amp;amp; manipulate your behaviour.&lt;/p&gt;
&lt;p&gt;Enough Data about a thing starts approaching the thing itself. Data is not about people, it is people. &amp;quot;Users&amp;quot; dehumanise. Easy to step to &amp;quot;dumb user&amp;quot; - it&#39;s already &amp;quot;the other&amp;quot;, perhaps we need to remove dichotomy.&lt;/p&gt;
&lt;p&gt;What is the nature of the &amp;quot;Self&amp;quot; in digital age? You + boundaries around biological self. Outside system &amp;amp; laws to protect the self. Fought &amp;amp; died for these rights. Ppl understand that.&lt;/p&gt;
&lt;p&gt;If I have an idea, do I write it down. Does my phone respond? If someone intercepts, surveillance = message capture between two parties.&lt;/p&gt;
&lt;p&gt;If mind extended so I store not in my biological brain, but in my phone. It would make sense to extend the boundary aroudn our biological self to include our phone.&lt;/p&gt;
&lt;p&gt;What does surveillance become?&lt;/p&gt;
&lt;p&gt;An assault on the self. Not a message interception. Have a body of laws &amp;amp; regulations.&lt;/p&gt;
&lt;p&gt;We don&#39;t need new digital rights — we need what we already have.&lt;/p&gt;
&lt;p&gt;Creating new digital rights - want them to be lesser than human rights.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;surveillance capitalism&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Technology is an amplifier. Exponential.&lt;/p&gt;
&lt;p&gt;Server farms. What is being farmed? It&#39;s us.&lt;/p&gt;
&lt;p&gt;Massage for cow - not for cow&#39;s benefit, it&#39;s for the beef.&lt;/p&gt;
&lt;p&gt;&amp;quot;When you bought a personal computer it didn&#39;t spy on you.&amp;quot; It was magical. Weren&#39;t thinking how many ppl can I farm.&lt;/p&gt;
&lt;p&gt;Very lucrative business.&lt;/p&gt;
&lt;p&gt;Case studiy for why capitalism worked so well. Deregulated slavery. Wanted business to do the slavery. &amp;quot;It could be better&amp;quot; = &amp;quot;we could be better at marketing slaves&amp;quot;.&lt;/p&gt;
&lt;p&gt;Slavery = property law applied to humans.&lt;/p&gt;
&lt;p&gt;Peple farmin is property law for everything else about a person that makes them who they are &lt;em&gt;apart from their physical body.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the business model of the cloud. Other people&#39;s computers.&lt;/p&gt;
&lt;p&gt;Every piece of tech today. Gathering data is a fact of life. It&#39;s not broken, it&#39;s how technology works.&lt;/p&gt;
&lt;p&gt;? Who owns &amp;amp; controls this data?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We do&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything&#39;s OK. Compatiblw with freedom&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Corporations, made available to govts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;= a social problem. Corporatocracy.&lt;/p&gt;
&lt;p&gt;That is what we have. We are living in a corporatocracy. &amp;quot;We&#39;re sleep walking into this&amp;quot; - no, we&#39;re already there.&lt;/p&gt;
&lt;p&gt;Where do we go &lt;strong&gt;forward?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regulate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Curb current abuses. Notice, and stop it. Always playing catchup.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Legislate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Need consitutional protection from ones who know &amp;amp; respect self in digital age. But these empower me here &amp;amp; now.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Create alternatives&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Decentralise. Charachter is important. &amp;quot;Zero knowledge systems&amp;quot;. Put data on users machine. End-to-end encryption.&lt;/p&gt;
&lt;p&gt;It&#39;s actually centralised. Server is inside capitalism. Centers. Peer-to-peer typology.&lt;/p&gt;
&lt;p&gt;TBL is working on it.&lt;/p&gt;
&lt;p&gt;Current web is the problem. &amp;quot;everything is OK&amp;quot; is a daydream.&lt;/p&gt;
&lt;p&gt;Need to be convenient, every day things.&lt;/p&gt;
&lt;p&gt;Cars - build the cars that ppl drive to work every day. Create enthusiasts from every day people.&lt;/p&gt;
&lt;h3 id=&quot;regulation-doesn&#39;t-work&quot; tabindex=&quot;-1&quot;&gt;Regulation - doesn&#39;t work &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#regulation-doesn&#39;t-work&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why? Julia Reda: &amp;quot;copyright proposals will strengthen google&amp;quot; Inadvertently? No.&lt;/p&gt;
&lt;p&gt;Google can put an identifier on anyting being uploaded by you, so it can be traced back to you.&lt;/p&gt;
&lt;p&gt;Who spends the most lobbying politicians? Google.&lt;/p&gt;
&lt;p&gt;&amp;quot;Revolving doors&amp;quot; go working at tech, go to govts, and back. &amp;quot;Public private partnerships.&amp;quot; Multistakeholderism. Perhaps a $n bn.&lt;/p&gt;
&lt;p&gt;&amp;quot;Coregulation.&amp;quot; &amp;quot;How would you like to be regulated?&amp;quot;&lt;/p&gt;
&lt;p&gt;= insituational corruption. Influence of corporate finance on public bodies.&lt;/p&gt;
&lt;p&gt;Can only regulate effectively if we remove it.&lt;/p&gt;
&lt;p&gt;Business model = &amp;quot;how do you make money&amp;quot; - &amp;quot;I don&#39;t know&amp;quot; &amp;quot;we haven&#39;t decided yet&amp;quot; = about the data.&lt;/p&gt;
&lt;p&gt;&amp;quot;We sell products to people&amp;quot; - old school, works.&lt;/p&gt;
&lt;p&gt;LifeBuzz coss ppl mob $4m in data to be tracked. You&#39;re paying to be tracked.&lt;/p&gt;
&lt;p&gt;Forbes = 5s x 46m users. = Every year, over 87 years of human life are lost to one door slam (interstitial) on one site.&lt;/p&gt;
&lt;p&gt;If you&#39;re UA is Google, you get in.&lt;/p&gt;
&lt;p&gt;Forbes! Journalism is part of a free society.&lt;/p&gt;
&lt;p&gt;&amp;quot;The core business is to delivery ads to its visitors. Jounalistic content is just a vehicle.&amp;quot;&lt;/p&gt;
&lt;p&gt;What is the free press? BAIT.&lt;/p&gt;
&lt;p&gt;Bild - detect &amp;amp; blocked Better. Are saying to visitors, &amp;quot;I do not want you to block trackers.&amp;quot; Disable JS = disable site.&lt;/p&gt;
&lt;p&gt;A game of chess. The browser always wins (the person using it).&lt;/p&gt;
&lt;p&gt;3 Strickes: if you&#39;re using malware, will block you (removed from the web). You don&#39;t deseve your place on the web.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;we are sharded beings&lt;/em&gt;. We are cyborgs. Extend ourselves using technoogy. Human rights should protect you.&lt;/p&gt;
&lt;p&gt;Create alternatives. Ethics. Respect.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Human rights&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Decent &amp;amp; open&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Human effort&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Build things that are functional &amp;amp; reliable.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Human experience&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Delightful.&lt;/p&gt;
&lt;h3 id=&quot;main-problem:-no-respect.&quot; tabindex=&quot;-1&quot;&gt;Main problem: no respect. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#main-problem:-no-respect.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What do the other layers mean? Decorating. Taking a core out. It&#39;s makeup. Experience design / user design is just decoration.&lt;/p&gt;
&lt;p&gt;All design is influence. Design without ethics is decoration.&lt;/p&gt;
&lt;p&gt;Decoration camurlages an unpalatable systems os it is not rejected by people targeted for exploitation.&lt;/p&gt;
&lt;p&gt;no. of 0&#39;s on paycheck might make us ignore ugly facts.&lt;/p&gt;
&lt;p&gt;VC do not invest in ghe business - they invest in the exit. They invest in the sale. Not long term. Startups are disposable. Fail / sold. A silicon valley brand.&lt;/p&gt;
&lt;p&gt;&amp;quot;Stay-ups&amp;quot;&lt;/p&gt;
&lt;p&gt;Heartbeat - peer-to-peer, no man in the middle.&lt;/p&gt;
&lt;p&gt;What if every user had their e-2-e encrypted node. All their devices connected p2p. Interoperatable for other companies to provide.&lt;/p&gt;
&lt;p&gt;Funded from commons (taxes). Free to create new functionality. Have to give back to the commons = free &amp;amp; open source.&lt;/p&gt;
&lt;p&gt;MIT licence - can be taken &amp;amp; close it off, not share back changes.&lt;/p&gt;
&lt;p&gt;Corporatious can compete on quality of service, not lock-in.&lt;/p&gt;
&lt;p&gt;We create a world where we own our technology.&lt;/p&gt;
&lt;p&gt;What is the future I want to live in?&lt;/p&gt;
&lt;p&gt;Built on reason, rights, justice &amp;amp; democracy.&lt;/p&gt;
&lt;h2 id=&quot;web-typography-richard-rutter&quot; tabindex=&quot;-1&quot;&gt;Web Typography - Richard Rutter &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#web-typography-richard-rutter&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&amp;quot;every designer should get good training in typography&amp;quot; Shaping written information.&lt;/p&gt;
&lt;p&gt;Most of the web is still unreadable, uninviting.&lt;/p&gt;
&lt;p&gt;Billboards &amp;amp; novels - interruption &amp;amp; novels&lt;/p&gt;
&lt;p&gt;There&#39;s not enough seduction on the web ... &amp;quot;good quality typography is responsible for greaer engagement.&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;good-typography-puts-you-in-a-good-mood.&quot; tabindex=&quot;-1&quot;&gt;Good typography puts you in a good mood. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#good-typography-puts-you-in-a-good-mood.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Choosing a typeface ...&lt;/p&gt;
&lt;p&gt;You can have an impact before it&#39;s even read. Conveys tone, trust, preconcieved ideas.&lt;/p&gt;
&lt;p&gt;&amp;quot;Multi sensory typogaphy&amp;quot; - visual communicates to our amygdala. Instinct.&lt;/p&gt;
&lt;p&gt;Jellybean font test - Sarah ? &amp;quot;I can make crisps taste saltier by the typeface&amp;quot;.&lt;/p&gt;
&lt;p&gt;Tap into complex library of associations. When you&#39;ve see n a font you build a profile of where you first saw it.&lt;/p&gt;
&lt;p&gt;It can feel &amp;quot;Spanish&amp;quot; &amp;quot;American&amp;quot; Costa = 60s / 70s.&lt;/p&gt;
&lt;p&gt;Mid Century Magazine.&lt;/p&gt;
&lt;p&gt;Batrice Warde, The Pople who love ideas must love words.&lt;/p&gt;
&lt;h3 id=&quot;what-do-you-want-your-type-to-be&quot; tabindex=&quot;-1&quot;&gt;What do you want your type to be? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#what-do-you-want-your-type-to-be&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Youthful, secure, hipster? Make a statement. Let the world know what you stand for. Connect with spirit &amp;amp; personality, develop a relationship with the person who&#39;s using it.&lt;/p&gt;
&lt;p&gt;&amp;quot;Good design is first about making people want to read.&amp;quot;&lt;/p&gt;
&lt;p&gt;2 kinds of display fonts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Workhorse - do whatever you want them to do (Helvetica, Futura, Proxima Nova. Found everywhere. Takes skill &amp;amp; practice.&lt;/li&gt;
&lt;li&gt;Add the detail&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Questa - Questa Grand. Display font has more interest, because it&#39;s being used big.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.type&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;font-variant-alternates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;swash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	@supports &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;font-variants ..&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.ligatures&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;font-variant-ligatures&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; discrationary-ligatures&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;font-feature-settings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pelican&lt;br /&gt;
Brandon Text not Grotesque - larger x-height, more childlike, accessible. Tightened tracking for display slightly.&lt;/p&gt;
&lt;p&gt;Set huge &amp;quot;in order to create a feeling&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;can-you-have-same-impact-on-small-screen&quot; tabindex=&quot;-1&quot;&gt;Can you have same impact on small screen &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#can-you-have-same-impact-on-small-screen&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How close do you hold your phone? Right up to your face.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Size Calculator&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Setting text bigger.&lt;/p&gt;
&lt;p&gt;ios uses 32, 34, 19, 16, (13) for default type sizes&lt;/p&gt;
&lt;h3 id=&quot;scale-text-with-the-viewport&quot; tabindex=&quot;-1&quot;&gt;Scale Text with the Viewport &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#scale-text-with-the-viewport&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;VW&lt;/code&gt; unit&lt;/p&gt;
&lt;p&gt;== &lt;code&gt;vmin&lt;/code&gt;  smaller of proportions.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;font-display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; swap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(not available yet)&lt;/p&gt;
&lt;p&gt;parachute&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;vw&lt;/code&gt; will use the &lt;em&gt;reported&lt;/em&gt; measurement of the browser screen).&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;don&#39;t-be-reverential-dogmatic-or-ordinary.&quot; tabindex=&quot;-1&quot;&gt;Don&#39;t be reverential, dogmatic, or ordinary. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#don&#39;t-be-reverential-dogmatic-or-ordinary.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;flexbox-today-zoe&quot; tabindex=&quot;-1&quot;&gt;Flexbox Today — Zoe &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#flexbox-today-zoe&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Designer &amp;amp;&amp;amp; Developer&lt;/p&gt;
&lt;p&gt;Its not so much about learning when to use it, and steps that works within real-world constraints.&lt;/p&gt;
&lt;h3 id=&quot;when&quot; tabindex=&quot;-1&quot;&gt;When &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#when&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What browsers do I need to support?&lt;/p&gt;
&lt;p&gt;Nearly always irrelevant. It&#39;s progressive enhancement. 97% coverage. &lt;a href=&quot;http://booking.com/&quot;&gt;Booking.com&lt;/a&gt; support ie7/8 and use fb as an enhancement.&lt;/p&gt;
&lt;h3 id=&quot;do-i-need-my-content-to-dictate-size-content-or-should-my-design-dictate&quot; tabindex=&quot;-1&quot;&gt;Do I need my content to dictate size / content or should my design dictate? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#do-i-need-my-content-to-dictate-size-content-or-should-my-design-dictate&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Flexbox is mega-useful when content is unknown and variable, or readability is a top priority.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&#39;t use flexbox because you can - have a reason for it.&lt;/p&gt;
&lt;h3 id=&quot;content-driven-user-made-sizes&quot; tabindex=&quot;-1&quot;&gt;Content driven, user-made sizes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#content-driven-user-made-sizes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;there was no reason to keep it consistently ugly for all users&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Things always look a little bit different, anyway.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 23px // does not flex&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1 0 auto // grows with 1 share&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; does not shrink&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1 1 auto // grows with 1 share&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; shrinks with 1 too&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This always adds up to 100% width. Leaves the maths to the browser.&lt;/p&gt;
&lt;p&gt;Flex items remain in the flow, unlike absolutely positioned items. Can evenly distribute unknown items on an unknown width.&lt;/p&gt;
&lt;p&gt;Ordering only works on child elements of a flex container. You&#39;re not re-ordering the tab order - make sure the content is tabbably in a logical order.&lt;/p&gt;
&lt;p&gt;Use flex to move the image to the top on small, text below.&lt;/p&gt;
&lt;p&gt;mobile&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;desktop&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // on parent&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zoe recommends skipping the &#39;09 syntax. Use the non-flexbox version. Unfortunately, Autoprefixer bundles the lot.&lt;/p&gt;
&lt;p&gt;Flexbox will not override &lt;code&gt;absolute&lt;/code&gt; positioning.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // like inline-block&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Least buggy syntax is writing out. Hidden default values can lead to mistakes. Explicit is best. Also avoids IE10 / 11 bugs.&lt;/p&gt;
&lt;p&gt;Decide &lt;code&gt;flex-basis&lt;/code&gt; in reverse order, ie &lt;code&gt;basis&lt;/code&gt;, then &lt;code&gt;grow&lt;/code&gt; then &lt;code&gt;shrink&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 32px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // this item cannot grow or shrink.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 1 32px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // this item can grow but not shrink&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;flex-shrink: always have at least 1 item per line that can shrink or wrap, or both as a last resort. Otherwise breaks can occur.&lt;/p&gt;
&lt;p&gt;Leave extra space alone? &lt;code&gt;flex-grow: 0&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;Flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 1 auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // this is the default&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;flexbox-just-takes-over-if-the-browser-understands-it.&quot; tabindex=&quot;-1&quot;&gt;Flexbox just takes over if the browser understands it. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#flexbox-just-takes-over-if-the-browser-understands-it.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;Browsers are not perfect.&lt;/p&gt;
&lt;p&gt;PostCSS -&amp;gt; &lt;a href=&quot;https://github.com/luisrudge/postcss-flexbugs-fixes&quot;&gt;https://github.com/luisrudge/postcss-flexbugs-fixes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;sidetracked-john-s&quot; tabindex=&quot;-1&quot;&gt;Sidetracked - John S &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/frontier-conference-2016/#sidetracked-john-s&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The thing that decides what get purchased / noticed is what&#39;s remarkable. It&#39;s worth thinking about.&lt;/p&gt;
&lt;p&gt;Releasing an online magazine didn&#39;t work - got a lovely traffic spike which was gone in 24hrs and never seen again. Drip feeding was more consistent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That&#39;s the absolute beauty of digital design, you can keep tweaking it, refine it, test it and keep coming back to it to see what works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grid Systems — Josef Müller-Brockmann&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s critical to give credit where credit is due - at every stage in the process.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Journey with Dylan</title>
    <link href="https://example.com/posts/a-journey-with-dylan/"/>
    <updated>2016-12-02T14:21:21Z</updated>
    <id>https://example.com/posts/a-journey-with-dylan/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve been in &amp;amp; out of love with Bob Dylan for many years. I started listening in my early 20&#39;s, bought a compilation album, but I have to say that I just didn&#39;t get it. Now, 16 years later, I&#39;m listening to every album he&#39;s produced so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I guess I might be a glutton for punishment, some of the albums aren&#39;t that easy to listen to. But I want to just chart this journey because Dylan is someone who demands constant reassessment. Every time you think you&#39;ve got the guy sussed, he does something you don&#39;t expect.&lt;/p&gt;
&lt;p&gt;My favourite albums up to this point are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Time Out of Mind&lt;/li&gt;
&lt;li&gt;The Freewheelin&#39;&lt;/li&gt;
&lt;li&gt;Love and Theft&lt;/li&gt;
&lt;li&gt;Blood on the Tracks&lt;/li&gt;
&lt;li&gt;Desire&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Time out of Mind&lt;/strong&gt; is because that&#39;s the album that got me into Dylan initially; when I heard it I was in a very sultry space and every track suited that atmosphere like it was made for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Freewheelin&#39;&lt;/strong&gt; is full of uniqueness and perspective that you just don&#39;t expect from someone that young, especially being his second album.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Love and Theft&lt;/strong&gt; was the third album I bought and I really didn&#39;t expect it&#39;s timelessness, antiquity and dry humour. I also love the F Scott Fitzgerald quotes peppered throughout the album.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blood on the Tracks.&lt;/strong&gt; Such raw loss gets my attention every time. This is a very personal album from Dylan, and it&#39;s isolation and pain comes through loud and clear. And then there&#39;s &amp;quot;Lily, Rosemary and the Jack of Hearts&amp;quot; which is a blindside.&lt;/p&gt;
&lt;p&gt;The duets with Emmylou Harris on &lt;strong&gt;Desire&lt;/strong&gt; work so well, but for me this album is more about atmosphere. I love the Southern American feel to what Dylan is doing here. &amp;quot;One More Cup of Coffee&amp;quot; is a great track, even though I&#39;m not a fan of the Spaghetti Western, I can&#39;t help being drawn into that atmosphere listening to this track.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OK so that&#39;s it for this one. Bit of an oddball post, but I really want to see what I think ... my next album is &amp;quot;Self Portrait&amp;quot;, which might not change my opinions at all ... although, like I said, constant reassessment is what Dylan, I think, wants from his audience.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Journey With Dylan: Halfway Through</title>
    <link href="https://example.com/posts/a-journey-with-dylan-halfway-through/"/>
    <updated>2016-12-06T14:21:21Z</updated>
    <id>https://example.com/posts/a-journey-with-dylan-halfway-through/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;A Few weeks ago, I wrote a post about how I was taking a journey through the studio albums of Bob Dylan, starting with his first eponymous album, and discovering new albums and tracks along the way which resonated with me. I&#39;m now about half way through the catalogue, and have encountered a few surprises.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://deliciousreverie.co.uk/blog/post.php?s=2016-12-02-a-journey-with-dylan&quot; title=&quot;A Journey with Dylan: Blog post on Delicious Reverie&quot;&gt;Here&#39;s the previous post,&lt;/a&gt; in case you haven&#39;t read it.)&lt;/p&gt;
&lt;p&gt;I wrote a few weeks ago that Dylan is an artist that demands constant re-assessment from his fans. And indeed, some of the assumptions and opinions which I had, and which I&#39;d heard, about his back catalogue have proved ... interesting, if not completely false.&lt;/p&gt;
&lt;h2 id=&quot;1.-dylan&#39;s-early-work-is-hard-going&quot; tabindex=&quot;-1&quot;&gt;1. Dylan&#39;s Early Work is Hard Going &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/a-journey-with-dylan-halfway-through/#1.-dylan&#39;s-early-work-is-hard-going&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had already struggled with Dylan&#39;s earliest work. I can appreciate that he was an artist absorbing, emulating and building on those around him at the time, but I really didn&#39;t identify at all with &lt;strong&gt;Bob Dylan&lt;/strong&gt;, &lt;strong&gt;The Times They Are A-Changin&#39;&lt;/strong&gt; and only just got through &lt;strong&gt;Another Side&lt;/strong&gt; . Maybe I have been tainted a bit by listening to a lot of what came afterwards, but I just can&#39;t see the appeal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Freewheeling&#39;&lt;/strong&gt; remains my favourite album of this period, and my favourite track of that album has become my favourite duet of all time: &amp;quot;Girl from the North Country&amp;quot; with Johnny Cash is an absolute gem of a record. Cash&#39;s perfectly toned pathos is a great contrast to Dylan&#39;s lighter, more introverted approach.&lt;/p&gt;
&lt;h2 id=&quot;2.-self-portrait-is-a-masterpiece&quot; tabindex=&quot;-1&quot;&gt;2. Self Portrait Is a Masterpiece &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/a-journey-with-dylan-halfway-through/#2.-self-portrait-is-a-masterpiece&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From what I&#39;d heard, the world was aghast at what Dylan had released in 1970. Even the artist himself claimed that the album was &amp;quot;something of a joke&amp;quot;. So I took the CD out of it&#39;s case ... and didn&#39;t listen to it for a few weeks, fearing the worst.&lt;/p&gt;
&lt;p&gt;Although I&#39;ve discovered a distaste for Dylan covering other artists&#39; work (I hated &lt;strong&gt;Dylan&lt;/strong&gt; — and don&#39;t get me started on the Sinatra albums) there are plenty of absolute diamonds in there. I could listen to &amp;quot;Copper Kettle&amp;quot; and &amp;quot;Early Morning Rain&amp;quot; for hours.&lt;/p&gt;
&lt;p&gt;Taking a rounded out view of the first half of this journey, I&#39;d have to add &amp;quot;Nashville Skyline&amp;quot; as one of my top albums.&lt;/p&gt;
&lt;p&gt;Oh, and listening to John Wesley Harding was going well, until &amp;quot;All Along the Watchtower&amp;quot; started playing, and for the first time I got the context of that song. Whoa.. that changes things. Just having that track amongst some instrumental movie soundtrack music makes it stand out as genius these 50 years later.&lt;/p&gt;
&lt;p&gt;I&#39;m currently on &lt;strong&gt;Street Legal&lt;/strong&gt;, which, after a few tracks, has again surprised me. &amp;quot;Señor (Tales of Yankee Power)&amp;quot; is a powerful and unique track that I love very much. So, on we go to Dylan&#39;s religious moment, which again I might find difficult ... or I might not ...&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introducing Biko: my new body font</title>
    <link href="https://example.com/posts/introducing-biko-my-new-body-font/"/>
    <updated>2016-12-06T14:21:21Z</updated>
    <id>https://example.com/posts/introducing-biko-my-new-body-font/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Typography on the web is a world of hard choices. I started this website using quite a different set of fonts than I have now. But since then my perspective has changed on a few things, and I&#39;ve finally switched to an entirely new set of fonts for &lt;a href=&quot;http://deliciousreverie.co.uk/&quot;&gt;deliciousreverie.co.uk&lt;/a&gt;. Here&#39;s a few of the processes I&#39;ve been through when considering these changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started out using one font in 2 styles and 2 weights from Google&#39;s excellently stocked and totally free Fonts library. At that time, I knew I wanted to convey a slightly more umm, could you call it &amp;quot;old fashioned&amp;quot; appearance to my site. This was because I wanted more than anything to differentiate myself from the ubiquitous &amp;quot;bootstrap&amp;quot; look.&lt;/p&gt;
&lt;p&gt;Vollkorn is a beautiful font, and I still love it very much. The trouble for me is two things that I&#39;ve been thinking a lot about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;The state of the web as a free, open platform&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;performance&quot; tabindex=&quot;-1&quot;&gt;Performance &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introducing-biko-my-new-body-font/#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found that loading sites from Google&#39;s CDN is still slower than loading them from my local computer. It&#39;s not much of course, but it&#39;s another dependency I can do without. I&#39;m happy that my site still loads in under 1s on wifi, which means it&#39;ll still be relatively quick on slower networks.&lt;/p&gt;
&lt;p&gt;It&#39;s also a connection that may drop without my control. Google&#39;s CDN may have a heavy traffic spike, or be unreachable, so my text might use fallback fonts at the very best, or it might not be visible for an extra few seconds, which is a worse scenario in my opinion.&lt;/p&gt;
&lt;p&gt;So switching fonts to something I could host locally was a big performance factor, as well as giving me some extra control in how fonts are loaded on my site (which I may do something with in the longer term).&lt;/p&gt;
&lt;h2 id=&quot;the-state-of-the-web&quot; tabindex=&quot;-1&quot;&gt;The State of the Web &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introducing-biko-my-new-body-font/#the-state-of-the-web&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These large corporations like Facebook, Google and others are getting too powerful. I have been alarmed that certain elements of what they do and why they operate the way they do. For example, people think of Facebook as a social network, and Google as a search engine. But they&#39;re not. They&#39;re advertising agencies who sell information we give them to the highest bidder.&lt;/p&gt;
&lt;p&gt;I also think that these organisations are getting too big to be safe. We were deeply upset with Microsoft for calling its browser &amp;quot;Internet Explorer&amp;quot;, which implied that it was the only means by which someone could access the web. But in some circles, Facebook is believed to be the web. That perception will only grow if Facebook &lt;em&gt;provides&lt;/em&gt; the web to certain countries and regions.&lt;/p&gt;
&lt;p&gt;If they have this much control, what can they do to transform the web into a proprietary platform, instead of an open platform that can be used any way.&lt;/p&gt;
&lt;p&gt;And if &lt;a href=&quot;https://webfoundation.org/&quot;&gt;Tim Berners Lee&lt;/a&gt; and &lt;a href=&quot;https://ind.ie/blog/internet-as-a-commons/&quot;&gt;Aral Balkan&lt;/a&gt; are worried, I think we all should be.&lt;/p&gt;
&lt;h2 id=&quot;about-biko&quot; tabindex=&quot;-1&quot;&gt;About Biko &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introducing-biko-my-new-body-font/#about-biko&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I came across Biko quite by accident whilst searching through type specimens, and loved its hints of  &amp;quot;Jazz Age&amp;quot;, somewhat international flavour, and it&#39;s versatility. Although I&#39;m using it as a body font, I think the light and Black weights could look lovely in the right application.&lt;/p&gt;
&lt;p&gt;Funnily enough it was the name of the typeface that caught my eye too:— when I was being home schooled by my mother, we had a study project about Steve Biko and watched the film &amp;quot;Cry Freedom&amp;quot; about his battle for justice in apartheid era South Africa.&lt;/p&gt;
&lt;p&gt;I&#39;m pleased to support fellow London artist &lt;a href=&quot;https://www.jesuismonreve.org/biko-font/&quot;&gt;Marco Ugolini&lt;/a&gt; by using this typeface in my work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I Created My Home Web Server</title>
    <link href="https://example.com/posts/how-i-created-my-home-web-server/"/>
    <updated>2017-02-18T14:21:21Z</updated>
    <id>https://example.com/posts/how-i-created-my-home-web-server/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Is it just me or does Apple&#39;s iCloud seem like a very simple solution to a problem all of us in a connected world face? That of storing, managing and sharing photos of our loved ones, holidays and interests with others?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of being faced with ever increasing charges from Apple to store my stuff, I decided to get a solution I could be more in control of.&lt;/p&gt;
&lt;h2 id=&quot;you-will-need&quot; tabindex=&quot;-1&quot;&gt;You Will Need &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#you-will-need&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I could have done this project by setting it up on my own existing home computer, but I already had a spare laptop that had been given to me. I also thought it would give me the freedom to wipe everything and start again if I messed it up irreversibly (which, coincidentally, did end up happening!).&lt;/p&gt;
&lt;p&gt;I decided that I&#39;d like to use the current LTS issue of Debian for my hosting platform. I liked the idea of using a bare bones OS, something that I hoped I would be able to customise and learn with. I installed this OS and got to know it, especially how to update and install core and third party packages.&lt;/p&gt;
&lt;p&gt;The main commands for this are:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; upgrade&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; dist-upgrade&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;first-hitch:-packages-not-upgrading&quot; tabindex=&quot;-1&quot;&gt;First hitch: Packages not upgrading &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#first-hitch:-packages-not-upgrading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;About the first thing I noticed when I went into the Terminal app from the GUI was this message that I could upgrade packages, but when I tried to install stuff, it said that no packages were updated.&lt;/p&gt;
&lt;p&gt;After some research, I found out it was because I needed to extend the Sources list to include some other sources, &lt;a href=&quot;https://wiki.debian.org/SourcesList&quot;&gt;as explained on the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was then able to install the AMP stack (Apache, Mysql, Php) and it gave me immense pleasure to see a &amp;quot;hello world&amp;quot; message when I added a php file to the www directory.&lt;/p&gt;
&lt;h4 id=&quot;second-hitch:-permissions&quot; tabindex=&quot;-1&quot;&gt;Second hitch: Permissions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#second-hitch:-permissions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At this point, I found that I was having trouble getting the right permissions for PHP and MySQL to operate.&lt;/p&gt;
&lt;p&gt;I didn&#39;t know at the time that the solution is to create a new group (its usually &amp;quot;www&amp;quot;), add the current user to the group, then add the user used by Apache (www-data) to this group.&lt;/p&gt;
&lt;h4 id=&quot;third-hitch:-sharing&quot; tabindex=&quot;-1&quot;&gt;Third hitch: Sharing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#third-hitch:-sharing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At this point, I got stuck trying to see how to see my website from another computer in my local network. It seemed that whatever IP I went to, nothing worked.&lt;/p&gt;
&lt;p&gt;I went down a bit of a maze, installing Samba file sharing system before second-guessing myself into the belief that I had taken a serious wrong turn somewhere previously. And now I had Samba, NFS and other file sharing services turned on, potentially exposing my computer to weaknesses.&lt;/p&gt;
&lt;p&gt;So in order to progress quickly and avoid having to retrace all my steps, I wiped the computer.&lt;/p&gt;
&lt;p&gt;It might seem a little drastic, that, but it did get me out of that situation quickly!!&lt;/p&gt;
&lt;h2 id=&quot;second-attempt&quot; tabindex=&quot;-1&quot;&gt;Second Attempt &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#second-attempt&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though there were a lot of reasons to like Debian I decided that the community support just wasn&#39;t there for me. It&#39;s not a criticism: those who use Debian really know what they&#39;re doing, but for that reason it&#39;s hard to find support for it.&lt;/p&gt;
&lt;p&gt;Also, I knew that Ubuntu came with a lot of the things I would need preinstalled.&lt;/p&gt;
&lt;p&gt;So I downloaded Ubuntu Server, reformatted my install USB, and started again!&lt;/p&gt;
&lt;p&gt;This time I discovered the &lt;code&gt;ifconfig&lt;/code&gt; command really quickly on support sites, and was very soon able to use SSH to log in to my new server. That was an amazing moment for me!&lt;/p&gt;
&lt;p&gt;Soon after that, I installed RSA keys and was able to log in much more easily and safely to my device. I went on to install &amp;amp; configure my AMP stack, and this time view my Hello World app right from my laptop.&lt;/p&gt;
&lt;p&gt;I uploaded a website I&#39;d been building that would serve as a replacement for our current iCloud workflow, which required a few tweaks to permissions again (creating a group for www-data user as I mentioned above) and could access the site.&lt;/p&gt;
&lt;h2 id=&quot;port-forwarding&quot; tabindex=&quot;-1&quot;&gt;Port Forwarding &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#port-forwarding&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I went into my router&#39;s control panel and turned on port forwarding for my web&#39;s default port. Almost instantly, I saw my website ... but could no longer access my routers control panel!!&lt;/p&gt;
&lt;p&gt;This suits me for now, because I don&#39;t have to worry about any other ports being open, and so there&#39;s also less vulnerability for my router. But I also don&#39;t have SSH access from outside my home network.&lt;/p&gt;
&lt;p&gt;I&#39;m going to fix this, but I don&#39;t currently have the headspace to go in and configure it and my port forwarding again.&lt;/p&gt;
&lt;h2 id=&quot;changing-ip-addresses&quot; tabindex=&quot;-1&quot;&gt;Changing IP Addresses &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#changing-ip-addresses&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At first, I was amazed at how quickly my home IP address would change. I realised that if I wanted to reduce outages, I needed a method to keep my site live enough for it to be useful by our family.&lt;/p&gt;
&lt;p&gt;I now have a free plan with No-Ip, which has installed a program on my server to update a DNS server when my IP address changes. If this works successfully, I will likely get a paid pla, unless I can figure out how to do it myself!&lt;/p&gt;
&lt;h4 id=&quot;fourth-hitch:-uploading-files-using-the-cms&quot; tabindex=&quot;-1&quot;&gt;Fourth hitch: Uploading files using the CMS &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#fourth-hitch:-uploading-files-using-the-cms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I how had a working website I could use and refine. But when I tried to upload files I came across an error where the file could be uploaded, but couldn&#39;t be moved to the content directory.&lt;/p&gt;
&lt;p&gt;Again, this was a permissions issue I had, where I needed to give the &amp;quot;nobody&amp;quot; user the ability to write to disc. I did this by adding this account to the user group I had created earlier.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot; tabindex=&quot;-1&quot;&gt;Conclusions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-i-created-my-home-web-server/#conclusions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Setting up my own home server has been frustrating at times, but its taught me a lot about the underlying technologies of the web.&lt;/p&gt;
&lt;p&gt;Given that, I&#39;d really like to try other projects in the future that will help me to better understand how browsers and the internet work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First Steps with Laravel</title>
    <link href="https://example.com/posts/first-steps-with-laravel/"/>
    <updated>2017-03-04T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-laravel/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;For a while now I&#39;ve felt like I&#39;m leaving Wordpress behind me. It&#39;s a great platform and I certainly wouldn&#39;t be a developer if Wordpress hadn&#39;t got me started along this route. However, comes a time when all of us must press on to things that help us to continue to grow; I don&#39;t feel that Wordpress is that tool. So I&#39;m moving on to Laravel.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some developers at my current place of work really love Laravel. Although our primary platform is Wordpress, these individuals looked at Laravel when building our in-house theme, Origin. They took key ideas from Laravel that they could implement in Wordpress, specifically it&#39;s object-oriented structure and command-line &lt;code&gt;make&lt;/code&gt; tools.&lt;/p&gt;
&lt;p&gt;Working with this theme got me really excited about PHP web development again. With their scripts I was able to speed up and streamline my development. But one comment made by senior developer Chris Geary has stuck in my head:&lt;/p&gt;
&lt;h2 id=&quot;&amp;quot;learning-laravel-would-make-you-a-better-wordpress-developer&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;Learning Laravel would make you a better Wordpress developer&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-laravel/#%22learning-laravel-would-make-you-a-better-wordpress-developer%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking this forward, I decided to learn Laravel, especially since Indigo Tree seem to be gaining traction, leading to the very real possibility of us taking on even more Laravel projects which would require my involvement.&lt;/p&gt;
&lt;h2 id=&quot;thoughts-so-far&quot; tabindex=&quot;-1&quot;&gt;Thoughts So Far &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-laravel/#thoughts-so-far&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I signed into the company&#39;s Laracasts account and began watching. Very quickly it became clear how well thought-out Laravel is. It&#39;s not only the things I had already been exposed to, such as Artisan. Migrations, Seeds and other things that I&#39;ve barely touched on at this stage, seem to make it so easy to develop, extend and maintain sites and apps.&lt;/p&gt;
&lt;p&gt;I&#39;ve determined to build a new site using Laravel this year if I can, so that I can solidify my understanding of the framework. Lets&#39; hope I  can stick to that!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2016 Review / 2017 Aims</title>
    <link href="https://example.com/posts/2016-review-2017-aims/"/>
    <updated>2017-05-12T14:21:21Z</updated>
    <id>https://example.com/posts/2016-review-2017-aims/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;2016 as a year was as unconventional as they come. Globally there have been some massive shifts politically, socially and in other ways. My life too has taken some pretty interesting turns. I&#39;m following suit here by posting a quick review of my year and what I hope I can achieve in 2017 from a professional perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I look back at the start of 2016 it is with a huge amount of mixed feelings. Hannah and I were still getting used to the sleepless nights with Morgan, who was just then a year old. We&#39;d also recently got told to move out of our house with 4 weeks notice. That proved to be incredibly stressful.&lt;/p&gt;
&lt;h2 id=&quot;the-summit-media-project&quot; tabindex=&quot;-1&quot;&gt;The Summit Media project &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#the-summit-media-project&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From a professional perspective, I was doing some of the best work of my career for Ech Design on the Summit website, a monster Wordpress build with multiple custom post types, and some pretty involved animations. The deployment process was also a bit of a minefield for a team that had only just started using git.&lt;/p&gt;
&lt;p&gt;That build nearly killed the 4 of us, especially Neil and Phil, the project leads, but it&#39;s something we are all incredibly proud of even today. It was nice to have the confidence and gratitude of the Summit team after a very intense 4 / 5 month design and build period.&lt;/p&gt;
&lt;p&gt;It was also my first introduction to using a slew of new technologies, including Composer, Atlassian JIRA, a range of new animation techniques and git branching &amp;amp; deployment strategies.&lt;/p&gt;
&lt;h2 id=&quot;moving-on-from-ech&quot; tabindex=&quot;-1&quot;&gt;Moving on from Ech &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#moving-on-from-ech&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Until late in October I was still contracting at Ech, a great team with some exciting ambitions. I&#39;m looking forward to hearing what they achieve in the future. I was sad to say farewell after almost a year there to go and work at Indigo Tree, a move which was conducive to a better work / life balance (because it&#39;s a much shorter commute).&lt;/p&gt;
&lt;p&gt;Looking back, I certainly was pushed to move my skills forwards, at times much further than I believed I could. I also was able to leave Ech having imparted to them some useful processes that I had acquired already (kanban boards for project management, git for version control, and working locally instead of via ftp).&lt;/p&gt;
&lt;p&gt;I also moved to Indigo Tree for the chance to work with the current team and their excellent in-house Wordpress theme. This theme has many fantastic features, including the fact that it uses OO PHP and has command-line interface similar to Laravel&#39;s Artisan tool for making meta fields, widgets and custom settings area.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ origin make:metabox mymetabox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The one thing that really got to me about it&#39;s nearest competitor, Elliot Condon&#39;s Advanced Custom Fields, is that you can create everything in the theme in code. This speeds up my development time exponentially, to the point that I can create an entire theme in as few as 3 days.&lt;/p&gt;
&lt;h2 id=&quot;aims-for-2017&quot; tabindex=&quot;-1&quot;&gt;Aims for 2017 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#aims-for-2017&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few things I had in my goals list which are underway already include the following:&lt;/p&gt;
&lt;h3 id=&quot;1.-build-a-home-web-server&quot; tabindex=&quot;-1&quot;&gt;1. Build a home web server &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#1.-build-a-home-web-server&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After a few false starts (I initially used Debian, but struggled without the support as a beginner at this), my home server is up and running . The main reasons for wanting to do this is because we currently maxed out on iCloud storage and don&#39;t want to pay increasing amounts ad infinitum to store &amp;amp; share our stuff.&lt;/p&gt;
&lt;p&gt;It was also a good task to help me discover more about servers and the LAMP stack in general, which will help me understand my role and how it connects to other roles in the workplace.&lt;/p&gt;
&lt;h3 id=&quot;2.-get-to-grips-with-svgs-and-svg-animations&quot; tabindex=&quot;-1&quot;&gt;2. Get to grips with SVGs and SVG animations &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#2.-get-to-grips-with-svgs-and-svg-animations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I really believe SVGs and animations are the future of the web. There&#39;s an insane amount going on with these at the moment, and I&#39;ve built sites using some rudimentary animations. Unfortunately, none of them have gone live yet. I would really like to showcase some of what I&#39;ve done and find out new ways of using animations to tell stories on websites.&lt;/p&gt;
&lt;h3 id=&quot;3.-graduate-to-laravel&quot; tabindex=&quot;-1&quot;&gt;3. Graduate to Laravel &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#3.-graduate-to-laravel&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve already had the opportunity at Indigo Tree to start learning Laravel, and already love it. I think this could quickly develop into a standalone blog post (umm, yep, it probably will) so I won&#39;t say anything more about it, other than I know I&#39;m going to love the framework. A colleague has already told me &amp;quot;learning laravel will make you a better Wordpress developer&amp;quot;. I can already see the truth of that statement.&lt;/p&gt;
&lt;h3 id=&quot;4.-design-more&quot; tabindex=&quot;-1&quot;&gt;4. Design More &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2016-review-2017-aims/#4.-design-more&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one is a bit more of a vague idea than a concrete goal:- I only designed one website in 2016 and think I&#39;m losing my sensitivity to design a bit. I want to get that back a little so that I can continue to break down the siloed approach to building websites which is sadly so prevalent still.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OK I&#39;d better stop there! I&#39;m going to have a lot going on in my personal life this year too with the imminent arrival of baby no.2, so here&#39;s hoping I can cope with the lack of sleep and still turn out some stuff I am proud of.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published article: Designing for Animation</title>
    <link href="https://example.com/posts/stub-designing-for-animation/"/>
    <updated>2017-05-16T14:21:21Z</updated>
    <id>https://example.com/posts/stub-designing-for-animation/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Deciding what to animate as a designer can be difficult, particularly because everything you do has to be expressed in code. And not everything can be. This post for the Indigo Tree blog aims to help designers identify some things they might like to keep in mind when designing for interactions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an article I had published on the Indigo Tree website. In it, I discuss some principle factors that designers could consider when designing interactions, even though they might not understand how to code.&lt;/p&gt;
&lt;p&gt;There&#39;s also a follow up article which gives our designers some ideas for what they could animate on a website project.&lt;/p&gt;
&lt;p&gt;You can read the full article here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/designing-animation-part-1-can-animate/&quot;&gt;https://indigotree.co.uk/designing-animation-part-1-can-animate/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published article: The Hidden Cost of Slow Websites</title>
    <link href="https://example.com/posts/stub-hidden-cost-of-slow-websites/"/>
    <updated>2017-05-16T14:21:21Z</updated>
    <id>https://example.com/posts/stub-hidden-cost-of-slow-websites/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;In this article, I ask Indigo Tree customers if they think that website load speed matters? Is it something they factor into design decisions, pricing, and expected Return on Investment when commissioning a website project? I then hilight the business reasons why it should…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an article I had published on the Indigo Tree website. In it, I discuss how we&#39;ve found that hastily commissioned websites based on cost only leads to further issues for companies further down the line, and that they could actually end up costing more than a website from Indigo Tree.&lt;/p&gt;
&lt;p&gt;Well, that&#39;s what I hope they&#39;ll realise.&lt;/p&gt;
&lt;p&gt;You can read the full article here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/hidden-cost-slow-websites/&quot;&gt;https://indigotree.co.uk/hidden-cost-slow-websites/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published article: Pursuing Professionalism in Web Accessibility</title>
    <link href="https://example.com/posts/stub-pursuing-professionalism-in-web-accessibility/"/>
    <updated>2017-05-16T14:21:21Z</updated>
    <id>https://example.com/posts/stub-pursuing-professionalism-in-web-accessibility/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;There’s been a growing amount of talk about making websites more useable to people with disabilities in recent weeks. In this article I wrote for the Indigo Tree blog, I notice how we have been increasingly aware of our role in providing access to the web to a wider range of people and discuss how it’s already helping our clients increase their reach.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an article I had published on the Indigo Tree website. In it, I discuss how accessibility is for everyone, and how we&#39;re benefiting our customers by working towards an Accessibility manifesto.&lt;/p&gt;
&lt;p&gt;The article is aimed at our existing and potential customers.&lt;/p&gt;
&lt;p&gt;You can read the full article here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/pursuing-professionalism-web-accessibility/&quot;&gt;https://indigotree.co.uk/pursuing-professionalism-web-accessibility/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Continuous Deployment with Netlify and Hugo</title>
    <link href="https://example.com/posts/continuous-deployment-with-netlify-and-hugo/"/>
    <updated>2017-05-18T14:21:21Z</updated>
    <id>https://example.com/posts/continuous-deployment-with-netlify-and-hugo/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Over the past few days, I&#39;ve moved tech stack entirely for &lt;a href=&quot;http://deliciousreverie.co.uk/&quot;&gt;deliciousreverie.co.uk&lt;/a&gt;, from reseller hosting using PHP to cloud hosting on AWS by Netlify, and using continuous deployment. This post details some of the hazards and benefits I encountered.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since I created this blog, I&#39;ve always been a very proud user of Perch CMS and have recently upgraded to Perch 3, which brought loads of enhancements as well as an improved interface. So why the switch?&lt;/p&gt;
&lt;p&gt;The truth of it is that I&#39;ve been paying for reseller hosting with my previous provider, UK Web Solutions Direct, for 7 years. They&#39;ve always been quick to respond to my support questions, and I&#39;d highly recommend them.&lt;/p&gt;
&lt;p&gt;However, since I gave up my freelance work, it came to the point where I only had this website hosted on it, which seemed a bit of a waste. I also wanted to try out Netlify&#39;s continuous deployment service as an alternative to FTP.&lt;/p&gt;
&lt;h2 id=&quot;building-a-hugo-site&quot; tabindex=&quot;-1&quot;&gt;Building a Hugo Site &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#building-a-hugo-site&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I felt that Hugo was fairly easy to get a grasp of. Once you get around how strange Go templates look initially, I grabbed the theme called &lt;code&gt;base&lt;/code&gt; from the Hugo theme repo and began rolling my own.&lt;/p&gt;
&lt;p&gt;I&#39;ve since found that Base theme isn&#39;t maintained and doesn&#39;t contain some of the new shiny that&#39;s present in Hugo 0.20. Just a caution if you were thinking of doing the same. Sadly, there isn&#39;t yet another theme that can replace it to give you a quick leg-up without any CSS already present in the theme.&lt;/p&gt;
&lt;p&gt;The hardest thing I found when using Hugo was ... how to build my site. Hah, yes it&#39;s hilarous, but having used commands like &lt;code&gt;hugo server&lt;/code&gt; and &lt;code&gt;hugo new site&lt;/code&gt; and &lt;code&gt;hugo new theme&lt;/code&gt; it totally passed me by that to actually build my static site, all I needed to do was run &lt;code&gt;hugo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There you are. Laugh all you want. I&#39;m maybe being a little bit dense, but I think it&#39;s counterintuitive. Why not &lt;code&gt;hugo build&lt;/code&gt; or something?&lt;/p&gt;
&lt;p&gt;So, I had my theme and set up a Netlify repo. Next was deployment.&lt;/p&gt;
&lt;h2 id=&quot;deploying-to-netlify&quot; tabindex=&quot;-1&quot;&gt;Deploying to Netlify &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#deploying-to-netlify&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Netlify&#39;s interface makes deployment pretty painless. Once I authorised GitHub on my account, it slurped the code, installed dependencies, ran the &lt;code&gt;hugo&lt;/code&gt; build process ... and failed miserably.&lt;/p&gt;
&lt;p&gt;It failed because currently, by default, Netlify seems to default to an older version of Hugo (v0.16 or something) which meant I was getting build failures.&lt;/p&gt;
&lt;p&gt;I eventually found out that you need to add a &lt;code&gt;netlify.toml&lt;/code&gt; file in the root directory to specify the Hugo version you need:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[context.production.environment]
  HUGO_VERSION = &amp;quot;0.20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seemed to work! I switched my DNS over to Cloudflare and the site went live!&lt;/p&gt;
&lt;h2 id=&quot;using-pygments-on-netlify&quot; tabindex=&quot;-1&quot;&gt;Using Pygments on Netlify &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#using-pygments-on-netlify&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing I noticed post-launch was a that a Python dependency I had started to use wasn&#39;t working on Netlify. My code blocks would render as plain text, making them unfathomable and messy.&lt;/p&gt;
&lt;p&gt;I came across &lt;a href=&quot;https://discuss.gohugo.io/t/hugo-on-netlify/1505/10&quot;&gt;this post - entitled Hugo on Netlify&lt;/a&gt; - which helped me to see I could add that dependency to Netlify&#39;s build process by adding another config file, &lt;code&gt;requirements.txt&lt;/code&gt; to the root, and adding &lt;code&gt;Pygments==2.1.1&lt;/code&gt; as the content.&lt;/p&gt;
&lt;p&gt;So I ran &lt;code&gt;hugo&lt;/code&gt; again, added the commit, and waited ... and waited. Quite a long wait this time actually. Pygments does slow Netlify down quite a bit. But the alternative to Pygments is a Javascript library, which would slow down my users. So I don&#39;t mind taking a bit of a hit to save them the extra load time.&lt;/p&gt;
&lt;h2 id=&quot;https&quot; tabindex=&quot;-1&quot;&gt;HTTPS &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#https&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I initially had trouble setting up by DNS with Cloudflare and applying Netlify&#39;s HTTPs certificate. It turns out, after having talked to Netlify, that they don&#39;t have IPv6 yet. Cloudflare adds an AAAA record to your DNS which messes up the HTTPS somehow.&lt;/p&gt;
&lt;p&gt;Once I&#39;d disabled Cloudflare&#39;s CDN, I reapplied the certificate and everything worked fine, and I was able to secure my content.&lt;/p&gt;
&lt;h2 id=&quot;aims&quot; tabindex=&quot;-1&quot;&gt;Aims &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#aims&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My site now loads in 1.526 seconds and serves 182kb of content in 8 requests. I&#39;m going to continue to refine this so that hopefully I can find out how to preload fonts and the background image, inline my CSS and JavaScript, or find other improvements that&#39;ll hopefully bring this down as much as I can.&lt;/p&gt;
&lt;p&gt;I also aim to add commenting via &lt;a href=&quot;https://staticman.net/&quot;&gt;Staticman&lt;/a&gt;, contact forms using &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt;, and &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; as a CMS so that I can author posts online.&lt;/p&gt;
&lt;p&gt;Ahh, static sites aren&#39;t so static after all, are they?&lt;/p&gt;
&lt;h2 id=&quot;verdict&quot; tabindex=&quot;-1&quot;&gt;Verdict &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#verdict&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the web becomes more bloated, I really believe static site generators are going to be the way to get ahead. Once you add the previously mentioned services, they can adequately compete with some of the lumbering, huge CMSes out there (of which &lt;a href=&quot;https://grabaperch.com/&quot;&gt;Perch&lt;/a&gt; isn&#39;t one, I hasten to add).&lt;/p&gt;
&lt;p&gt;Continuous delivery can a bit cumbersome to manage for some projects in my view. I say this because my build and production environments were different and that caused me a few issues. I&#39;m on the free Netlify plan, which means I get a lot less in terms of build previews. Looking through their documentation, it seems there&#39;s a lot more available on their paid tiers.&lt;/p&gt;
&lt;p&gt;That being said, it&#39;s certainly a lot more safe than the somewhat shakier transfers of FTP/SFTP. One of the benefits became real to me when a friend of mine submitted a pull request, but I was able to see before I merged the code that the change would&#39;ve broken my site, resulting in down time. That was a really useful feature. Now I know I can change my theme, and even if it succeeds locally, if it fails on production you won&#39;t break your site, which I know I&#39;ve done a few times.&lt;/p&gt;
&lt;h4 id=&quot;addendum&quot; tabindex=&quot;-1&quot;&gt;Addendum &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/continuous-deployment-with-netlify-and-hugo/#addendum&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This article was edited to remove the references to custom headers, which aren&#39;t yet available on Netlify yet.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>SVG Animation on Hover with GreenSock</title>
    <link href="https://example.com/posts/svg-animation-on-hover-with-greensock/"/>
    <updated>2017-05-21T14:21:21Z</updated>
    <id>https://example.com/posts/svg-animation-on-hover-with-greensock/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;One thing I&#39;ve tried to do more of is to use animations on frontend projects I&#39;ve been involved with. GreenSock animation library is a great way of standardising and improving on animations that otherwise wouldn&#39;t be available on all browsers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Animations add another dimension to your projects that helps users and can provide either an extra bit of feedback, extra charachter, and even increase conversions.&lt;/p&gt;
&lt;p&gt;I really love GreenSock for it&#39;s performance and range of animations. I particularly like their modular approach to the library. For example, if you have something relatively straightforward in mind, you can just use the &amp;quot;Tween Lite&amp;quot; plugin, which is 27kb minified. If you need more flexibility with timelines, you can add Timeline Lite, a further 12kb.&lt;/p&gt;
&lt;p&gt;This means that you&#39;re not tied to a monolithic platform that covers all bases. You can customise and work towards a performance budget whilst still using some great features.&lt;/p&gt;
&lt;p&gt;GreenSock also works really well with ScrollMagic to make rich interactive experiences. It&#39;s often the combination of these libraries that result in great experiences that are often featured on the &lt;a href=&quot;https://www.awwwards.com/&quot;&gt;Website Awwards&lt;/a&gt; site.&lt;/p&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/svg-animation-on-hover-with-greensock/#example&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a recent project, I wanted to add some hover effects to a UI element that made it seem as if it was almost a fluid change of state. The element was contained in an SVG shape with 2 layers, the background and the graphic.&lt;/p&gt;
&lt;p&gt;&lt;svg class=&quot;connectcircle connectcircle--data&quot; version=&quot;1.1&quot; id=&quot;Layer_1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;400&quot; viewBox=&quot;0 0 800 800&quot; style=&quot;enable-background:new 0 0 800 800;&quot; xml:space=&quot;preserve&quot;&gt;&lt;br /&gt;
&lt;path class=&quot;semicircle&quot; fill=&quot;#d7d7d7&quot; d=&quot;M621.3,592.6c-49.1,45.9-112.9,71.1-179.8,71.1c-145.4,0-263.6-118.3-263.6-263.6
    c0-145.4,118.3-263.6,263.6-263.6c72.5,0,142.7,30.5,192.5,83.8l21.1,22.6l96.5-96.5l-20-21.1c-76.4-80.6-179.5-125-290.1-125
    c-220.6-0.2-400,179.3-400,399.8S220.9,800,441.4,800c102.6,0,200.2-39,274.9-109.8l22.3-21.1l-96.2-96.2L621.3,592.6z&quot;&gt;&lt;/path&gt;&lt;br /&gt;
&lt;ellipse class=&quot;disc&quot; cx=&quot;441.9&quot; cy=&quot;400.1&quot; rx=&quot;265.8&quot; ry=&quot;264.3&quot; fill=&quot;#b52172&quot;&gt;&lt;/ellipse&gt;&lt;br /&gt;
&lt;g&gt;&lt;br /&gt;
&lt;g&gt;&lt;br /&gt;
&lt;path class=&quot;cloud&quot; fill=&quot;white&quot; d=&quot;M417.1,530v-91.8c0-3.2-2.6-5.7-5.7-5.7h-38.2c-3.2,0-5.7,2.6-5.7,5.7c0,3.2,2.6,5.7,5.7,5.7h32.5V530
            c-10.9,2.6-19.1,12.4-19.1,24.2c0,13.7,11.1,24.8,24.8,24.8c13.7,0,24.8-11.1,24.8-24.8C436.2,542.5,428,532.6,417.1,530z
             M411.3,567.5c-7.4,0-13.4-6-13.4-13.4c0-7.4,6-13.4,13.4-13.4c7.4,0,13.4,6,13.4,13.4C424.7,561.5,418.7,567.5,411.3,567.5z
             M478.2,530v-91.8c0-3.2-2.6-5.7-5.7-5.7h-38.2c-3.2,0-5.7,2.6-5.7,5.7c0,3.2,2.6,5.7,5.7,5.7h32.5V530
            c-10.9,2.6-19.1,12.4-19.1,24.2c0,13.7,11.1,24.8,24.8,24.8c13.7,0,24.8-11.1,24.8-24.8C497.3,542.5,489.1,532.6,478.2,530z
             M472.5,567.5c-7.4,0-13.4-6-13.4-13.4c0-7.4,6-13.4,13.4-13.4c7.4,0,13.4,6,13.4,13.4C485.8,561.5,479.8,567.5,472.5,567.5z
             M575.6,491.2c-11.7,0-21.6,8.2-24.2,19.1h-12.1v-72c0-3.2-2.6-5.7-5.7-5.7h-38.2c-3.2,0-5.7,2.6-5.7,5.7c0,3.2,2.6,5.7,5.7,5.7
            h32.5v72c0,3.2,2.6,5.7,5.7,5.7h17.9c2.6,10.9,12.4,19.1,24.2,19.1c13.7,0,24.8-11.1,24.8-24.8S589.3,491.2,575.6,491.2z
             M575.6,529.4c-7.4,0-13.4-6-13.4-13.4s6-13.4,13.4-13.4c7.4,0,13.4,6,13.4,13.4S583,529.4,575.6,529.4z M607.8,343.4
            c-7.7-9.6-18.2-16.7-29.9-20.3c-1.3-27.1-12.6-52.4-32-71.7c-20.4-20.3-47.6-31.4-76.4-31.4c-37.8,0-72.8,19.7-92.5,51.8
            c-4.8-1.5-9.8-2.3-14.8-2.3c-23.4,0-43.5,16.5-48.4,39c-30.1,7.8-51.5,35.2-51.5,66.6c0,37.9,30.9,68.8,68.8,68.8h13.3v66.3h-12.1
            c-2.6-10.9-12.4-19.1-24.2-19.1c-13.7,0-24.8,11.1-24.8,24.8s11.1,24.8,24.8,24.8c11.7,0,21.6-8.2,24.2-19.1h17.9
            c3.2,0,5.7-2.6,5.7-5.7v-77.8c0-3.2-2.6-5.7-5.7-5.7h-19c-31.6,0-57.4-25.7-57.4-57.3c0-27.3,19.4-50.9,46.1-56.2
            c2.4-0.5,4.2-2.4,4.6-4.9c2.5-18.8,18.7-33.1,37.7-33.1c5.2,0,10.3,1,15.1,3.1c2.7,1.2,5.9,0.1,7.3-2.5
            c17.1-30.9,49.7-50.1,85-50.1c53,0,96.5,43.1,97,96.1c0,2.6,1.9,4.9,4.4,5.5c22.9,5.3,39,25.5,39,49c0,27.8-22.6,50.4-50.4,50.4
            h-3.1c-3.2,0-5.7,2.6-5.7,5.7c0,3.2,2.6,5.7,5.7,5.7h3.1c34.1,0,61.8-27.7,61.8-61.8C621.4,368.1,616.6,354.3,607.8,343.4z
             M308.2,529.4c-7.4,0-13.4-6-13.4-13.4s6-13.4,13.4-13.4c7.4,0,13.4,6,13.4,13.4S315.6,529.4,308.2,529.4z M541.7,333.5
            L541.7,333.5c3.2,0,5.8-2.6,5.7-5.8c-0.1-9.4-1.9-18.7-5.3-27.4c-1.2-2.9-4.5-4.4-7.4-3.3c-2.9,1.2-4.4,4.5-3.3,7.4
            c2.9,7.5,4.4,15.3,4.5,23.4C536,331,538.6,333.5,541.7,333.5z M520.8,286.3c1.1,1.4,2.8,2.1,4.4,2.1c1.3,0,2.6-0.4,3.6-1.3
            c2.4-2,2.8-5.6,0.8-8.1c-14.9-18.1-36.8-28.4-60.1-28.4c-3.2,0-5.7,2.6-5.7,5.7c0,3.2,2.6,5.7,5.7,5.7
            C489.4,262,508.1,270.9,520.8,286.3z&quot;&gt;&lt;/path&gt;&lt;br /&gt;
&lt;/g&gt;&lt;br /&gt;
&lt;/g&gt;&lt;br /&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;h2 id=&quot;a-fluid-feeling-interaction&quot; tabindex=&quot;-1&quot;&gt;A fluid-feeling interaction &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/svg-animation-on-hover-with-greensock/#a-fluid-feeling-interaction&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found that there are a few caveats when working with SVGs. The first is how to scale from the center of the animation. To do that you can add &lt;code&gt;transformOrigin: 50% 50%&lt;/code&gt; to the properties you&#39;re applying. That will find the center of the SVG element, and animate from there.&lt;/p&gt;
&lt;p&gt;Initially, to animate this I tried to create one timeline that targeted both elements, but this resulted in an effect that looked artificial, since the animations didn&#39;t overlap each other. One scale effect was applied to one element. It was only after that that the other scale effect started.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; connectCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimelineMax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;connectCircles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staggerTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.cloud, .microphone, .handset&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Elastic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;easeOut&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;transformOrigin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;50% 50%&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staggerTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.disc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Elastic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;easeOut&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;transformOrigin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;50% 50%&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;dWQevw&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;endymion1818&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;greensock hover group svg — one timeline&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/endymion1818/pen/dWQevw/&quot;&gt;greensock hover group svg — one timeline&lt;/a&gt; by Ben Read (&lt;a href=&quot;https://codepen.io/endymion1818&quot;&gt;@endymion1818&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;To resolve this issue, I split the functions into seperate timelines that allowed them to run seperately:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; connectCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimelineMax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; connectShapes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimelineMax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;connectCircles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staggerTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.cloud, .microphone, .handset&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Elastic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;easeOut&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;transformOrigin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;50% 50%&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// second timeline&lt;/span&gt;&lt;br /&gt;      connectShapes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staggerTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.disc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;scaleY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Elastic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;easeOut&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;transformOrigin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;50% 50%&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That way, when we run the animation, the two timelines run independently from each other:&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xgEYqG&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;endymion1818&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;greensock hover group svgs&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/endymion1818/pen/xgEYqG/&quot;&gt;greensock hover group svgs&lt;/a&gt; by Ben Read (&lt;a href=&quot;https://codepen.io/endymion1818&quot;&gt;@endymion1818&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Getting the timing right in animations is one of the hardest things, and takes the longest amount of time. It took me quite a bit of experiementation and asking for feedback to arrive at the duration of each transition so that it appeared that the effects were interacting with each other in a natural way.&lt;/p&gt;
&lt;p&gt;A lot of animation is fooling the eye into thinking it&#39;s real. Our brains recognise natural interactions which follow our experience of phyiscal reality, for example, the way a water droplet responds when you touch it. But if you get it wrong by a fraction, it looks strange or unfamiliar, and it can have an adverse effect on your audience.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/svg-animation-on-hover-with-greensock/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve had so much fun with this you wouldn&#39;t believe. I am really excited about animations and look forward to working with GreenSock and the Web Animations API more in the future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Performance: Should We Name and Shame?</title>
    <link href="https://example.com/posts/performance-should-we-name-and-shame/"/>
    <updated>2017-06-16T14:21:21Z</updated>
    <id>https://example.com/posts/performance-should-we-name-and-shame/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;As a conscientious developer, I&#39;ve become more determined to put performance front &amp;amp; center on new projects I create. As an industry, we&#39;ve had more and more focus on this issue, and it&#39;s often the topic of conference talks and articles. But I think it could be time to go further than we have in the past.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my day job I get to analyse a lot of websites. I often get the opportunity to perform an in-depth analysis of a given site, which involves a code quality review, SEO analysis, and a performance analysis.&lt;/p&gt;
&lt;p&gt;Sometimes the performance review shocks me a little.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;As much as I hate to say it, we really need to start naming &amp;amp; shaming devs who do this. I think it&amp;#39;s massively hurting our credibility. &lt;a href=&quot;https://t.co/f1nNswmhgE&quot;&gt;pic.twitter.com/f1nNswmhgE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Read (@muzzlehatch_) &lt;a href=&quot;https://twitter.com/muzzlehatch_/status/874593109052723201&quot;&gt;June 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;This site, in case you aren&#39;t able to see the image in the above tweet, has a load time of 41.56 seconds, makes 77 HTTP requests,  and is 21MB in size. All this despite it&#39;s simple nature as a brochure site with nothing special except text and a few images. The only animation is a page transition which seems to have been implemented to mask the poor performance of the site.&lt;/p&gt;
&lt;p&gt;The subsequent rebuild I&#39;ve been working on hasn&#39;t gone live yet, but based on previous projects I can say with confidence that it&#39;s probably going to load in under 2 seconds.&lt;/p&gt;
&lt;h2 id=&quot;what-went-wrong&quot; tabindex=&quot;-1&quot;&gt;What Went Wrong &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/performance-should-we-name-and-shame/#what-went-wrong&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How does a project end up this badly?&lt;/p&gt;
&lt;p&gt;I typically work in the &amp;quot;brochure website&amp;quot; sector of web development. We turn out 3-4 of them on an average week. The advantage with this sector is that with such a huge churn, you can experiment with something on one project, and if it works well, you can implement it on the next project.&lt;/p&gt;
&lt;p&gt;But the temptation is that you can work with diminishing quality because you are pushing out essentially the same code base, with a few cosmetic changes, so you have a bloated project that attempts to cater for everything you might do.&lt;/p&gt;
&lt;p&gt;The other factor, which is a lot more dangerous, is that other, &lt;em&gt;less scrutable&lt;/em&gt; companies, know that they can use commercially available themes and plugins to build whatever is needed, &amp;quot;without ever having to touch a line of code&amp;quot;.&lt;/p&gt;
&lt;p&gt;These are the organisations that I think need a bit more attention.&lt;/p&gt;
&lt;h2 id=&quot;name-and-shame&quot; tabindex=&quot;-1&quot;&gt;Name And Shame &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/performance-should-we-name-and-shame/#name-and-shame&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m sorry, I&#39;m not trying to be inflammatory here. I don&#39;t want to victimise well intentioned individuals who have no budget and are creating a website for something they passionately believe in or want to support.&lt;/p&gt;
&lt;p&gt;But I do think there&#39;s a place for a &amp;quot;website performance league table&amp;quot; of sorts, where the worst &lt;strong&gt;comercially sold&lt;/strong&gt; websites we find get a mention, and the slowest ones get to the top of the list.&lt;/p&gt;
&lt;p&gt;I&#39;m hoping this could be a way of motivating people who should know better to do better. And to raise awareness to individuals who could easily become victims of this practice that this is something they should specifically ask for when commissioning a website.&lt;/p&gt;
&lt;h2 id=&quot;reward-and-compliment&quot; tabindex=&quot;-1&quot;&gt;Reward and Compliment &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/performance-should-we-name-and-shame/#reward-and-compliment&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What I&#39;m also hoping to suggest is that we as an industry reward good performance. I reached out to a number of organisations that I thought might be interested in following this up, including Awwards, an organisation that celebrates beautiful and interesting website UIs.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I&amp;#39;m wondering if &lt;a href=&quot;https://twitter.com/AWWWARDS&quot;&gt;@AWWWARDS&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/webawards&quot;&gt;@webawards&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/WebGuildSeal&quot;&gt;@WebGuildSeal&lt;/a&gt; would ever get involved to promote / reward good performance practice &lt;a href=&quot;https://twitter.com/hashtag/perfmatters?src=hash&quot;&gt;#perfmatters&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Read (@muzzlehatch_) &lt;a href=&quot;https://twitter.com/muzzlehatch_/status/874657130367913984&quot;&gt;June 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;And Awwards replied!&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We 100 % agree it&amp;#39;s our responsibility to promote good performance practice, see our developer jury guidelines &lt;a href=&quot;https://t.co/Yzxo6FxwIx&quot;&gt;https://t.co/Yzxo6FxwIx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Awwwards (@AWWWARDS) &lt;a href=&quot;https://twitter.com/AWWWARDS/status/874896069024509954&quot;&gt;June 14, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re interested in web performance, I think this document could be a good place to start making yourself aware of what could to be done. Awwards further replied saying that they had something in the pipeline about this topic.&lt;/p&gt;
&lt;h2 id=&quot;pain-points&quot; tabindex=&quot;-1&quot;&gt;Pain Points &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/performance-should-we-name-and-shame/#pain-points&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like I said, I tend to work in a sector of the web industry that is pretty stuck with smaller, repeatable builds on familiar platforms. For us, we aren&#39;t able to do extensive testing using XDEBUG, of spinning up AWS and using lambda functions, or using load balancing on multiple servers. It&#39;s just not going to happen for most of us.&lt;/p&gt;
&lt;p&gt;But there are things we can do within our industry to promote better practices, to raise the bar for web development by educating ourselves, our PMs and our business owners to promote better performance practices:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Main things I would say: educate dev teams &amp;amp; clients. Read &lt;a href=&quot;https://twitter.com/ResponsibleRWD&quot;&gt;@ResponsibleRWD&lt;/a&gt; &amp;amp; act on it wherever possible. Use &lt;a href=&quot;https://t.co/288vNrRuYJ&quot;&gt;https://t.co/288vNrRuYJ&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Benjamin Read (@muzzlehatch_) &lt;a href=&quot;https://twitter.com/muzzlehatch_/status/874617990653890560&quot;&gt;June 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I haven&#39;t acted on this league table idea. But I am gathering a catalogue of the worst sites I find, and may publish it at some point.&lt;/p&gt;
&lt;p&gt;On the other hand, promoting performance within the industry is a good way of positively affecting those I associate with to focus on performance, sell it to their clients as a benefit, and to do better when building sites in the future.&lt;/p&gt;
&lt;p&gt;It&#39;s something we should all be intensely interested in doing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 2nd July 2017&lt;/strong&gt;&lt;br /&gt;
I have decided against this idea. I think perhaps this idea is taking the principle too far. I spoke to a friend who hosts Relative Paths podcast, and decided that it would be best to shelve the idea. I don&#39;t wish to cause conflict in an already divisive environment.&lt;/p&gt;
&lt;p&gt;I wish to say that websites with poor performance aren&#39;t usually the result of a choice developer makes about a website, in my experience. Rather, it&#39;s been the cumulative poor decicions of agencies (not individuals) who build websites for one person: the client, or the MD who has commissioned the project, and not with the ordinary visitor in mind.&lt;/p&gt;
&lt;p&gt;Google recently launched a tool which excellently captures the essence of my idea: Test My Site with Google shows pretty clearly where a site is positioned in terms of performance.&lt;/p&gt;
&lt;p&gt;I really think that this tool can be a good way of promoting performance best practice within our industry.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://testmysite.withgoogle.com/intl/en-gb&quot;&gt;&amp;gt; Test My Site With Google&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Music of Mike Oldfield</title>
    <link href="https://example.com/posts/music-of-mike-oldfield/"/>
    <updated>2017-07-09T01:21:21Z</updated>
    <id>https://example.com/posts/music-of-mike-oldfield/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve enjoyed the music of Mike Oldfield since I was about 15. Wow, I&#39;ve just realised that&#39;s about 20 years. What makes me keep coming back to this artist? What tracks would I recommend if you wanted to get an overview of his work?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I used to hang out with a group of kids who loved all kinds of music. I admit that I didn&#39;t have much of an idea myself, but took on board their recommendations, and quite early on one of them gave me a cassette tape of &amp;quot;Tubular Bells 2&amp;quot;.&lt;/p&gt;
&lt;p&gt;I had never heard of the artist before, but that wasn&#39;t unusual. What impressed me initially were the titles of some of the tracks. &amp;quot;Weightless&amp;quot;, &amp;quot;Blue Dawn&amp;quot; and &amp;quot;Sentinel&amp;quot; sounded awesome to this hapless, sci-fi loving word-nerd. But when I stuck it in my stereo, it was the sound that really amazed me.&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/3PMDIrVYvCEiToekxLI5J3&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Looking back now on the albums released around that time, I can see this one represented a clear shift in Mike&#39;s style. For years he&#39;d been releasing albums of rock music, with tracks typically around 5 minutes, lots of prominent vocals by mostly unknown artists, and some outstanding music and guitar solos.&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/6Yg8kYhVLjFxqKBSbLVfpv&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/3AfeqqbWGlrJjOICHxUpCk&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Over the years, my favourite albums from this era have become &amp;quot;Islands&amp;quot;, &amp;quot;Discovery&amp;quot; and &amp;quot;Crises&amp;quot;, with the latter being the most challenging and rewarding of the three.&lt;/p&gt;
&lt;h2 id=&quot;paradigm-shift&quot; tabindex=&quot;-1&quot;&gt;Paradigm Shift &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/music-of-mike-oldfield/#paradigm-shift&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But this album, Tubular Bells 2, was a paradigm shift. When &amp;quot;Songs of Distant Earth&amp;quot; was released a short time later, I instantly bought the CD (for £18 I might add). I listened to it constantly for years.&lt;/p&gt;
&lt;p&gt;This album still is my absolute favourite. It&#39;s sublime arrangements, for me at least, defy any genre classification. They instill in me a sense of wonder that only the TV series &amp;quot;Babylon 5&amp;quot; has managed to compete with.&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/5KoUHqhv8cqqAZ4LwyeJG9&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;At the time, I was getting into James Joyce. His idea of the &amp;quot;literary epiphany&amp;quot;, a moment when you might percieve some kind of absolute beauty, I think is expressed by this album. Loved it.&lt;/p&gt;
&lt;p&gt;Over the next few years I soaked up everything Mike published, which morphed into a dance / trance influenced style, I am told which came from living on the island of Ibiza.&lt;/p&gt;
&lt;p&gt;I think of this era of ending with the very left-field classical album &amp;quot;Music of the Spheres&amp;quot;. Mike doesn&#39;t talk about this album much, and I secretly wonder if was a studio-ordered collaboration between Mike and Karl Jenkins, which may have been difficult for such an independent and determined artist.&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/6ohgMbEWp1F2PUJQLJHTzz&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The album is nonetheless fantastic and one I listen to very frequently.&lt;/p&gt;
&lt;p&gt;Others that I would recommend from this era are &amp;quot;Tubular Bells 3&amp;quot; and &amp;quot;Tr3s Lunas&amp;quot;.&lt;/p&gt;
&lt;p&gt;But there are two albums near the beginning and end of this group that are totally different: &amp;quot;Voyager&amp;quot;, which consists mostly of arrangements of folk music, and &amp;quot;Man on the Rocks&amp;quot;, a heavily vocal-led collection which seems to have been a bit of a catharthis from the solely classical &amp;quot;Music of the Spheres&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;origin-story&quot; tabindex=&quot;-1&quot;&gt;Origin Story &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/music-of-mike-oldfield/#origin-story&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mike had originally started out bringing, as I like to call it, classical structure to rock music. His original few albums had very few track splits, each being around the 20-minute mark.&lt;/p&gt;
&lt;p&gt;I was very pleased to hear that Mike was going to go back to this style with &amp;quot;Return to Ommadawn&amp;quot;, for a few reasons.&lt;/p&gt;
&lt;p&gt;Primarily, it seems this album was &amp;quot;one for the fans&amp;quot; - Mike was rewarding the people who had stuck with him through the years, even if it seemed as if that style of his was a thing of the past. But listening to interviews, it&#39;s clear that this is Mike&#39;s &amp;quot;home style&amp;quot; - that he&#39;s most comfortable with this structure and form of composition.&lt;/p&gt;
&lt;p&gt;I must be honest, it took me years to understand and appreciate these albums.&lt;/p&gt;
&lt;p&gt;I think my first mistake was believing that I had to enjoy the original Tubular Bells in order to do so. I didn&#39;t - and still don&#39;t - enjoy the one single album that people generally remember Mike for!&lt;/p&gt;
&lt;p&gt;Yes it was a groundbreaking album that displayed a certain genius. But for me, it doesn&#39;t resonate for some reason.&lt;/p&gt;
&lt;p&gt;Now, going through that early set, I genuinely can say I enjoy these albums as much as the others. Something that helped a great deal was the &lt;a href=&quot;spotify:user:11155153810:playlist:1qfqJdIgW34wrt9PADuxcv&quot;&gt;Elements album&lt;/a&gt;, which showcases shortened excerpts from these longer works.&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/6jTfPKiniEwfZk1QmkiWIm&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;the-future&quot; tabindex=&quot;-1&quot;&gt;The Future &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/music-of-mike-oldfield/#the-future&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mike Oldfield has produced a body of work that I constantly go back to. I eagerly anticipate his next work, and appreciate that even if I don&#39;t love it, at least I know I will enjoy and appreciate it.&lt;/p&gt;
&lt;p&gt;Mike might not be one of those artists who get a vast amount of attention. However, his work on the whole has really resonated with me. I hope this short tour gives you some background and insight into an artist who is multi-layered, complex and deeply moving.&lt;/p&gt;
&lt;p&gt;If you&#39;re looking for a few tracks to introduce you to his work, I&#39;ve embedded a few individual tracks on this page that are around the 5 minute mark. Hope you like them!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using CSS Grid In Production Today</title>
    <link href="https://example.com/posts/using-css-grid-in-production-today/"/>
    <updated>2017-07-09T07:21:21Z</updated>
    <id>https://example.com/posts/using-css-grid-in-production-today/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;For me, as well as a lot of others, CSS Grid is the most exciting thing to happen since CSS3 ... possibly even CSS2. But many fear using it in production. This post tackles one common use case where a Flexbox fallback provides support for Internet Explorer and Edge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m really, really excited about CSS Grid. This new technology, which allows developers to finally build a structured document layout natively without using a hack, was released in most major browsers in about March of this year.&lt;/p&gt;
&lt;p&gt;I&#39;ve been closely following the work of Jen Simmons and Rachel Andrew on this subject, and have attended other talks about the subject. But now I want to join the chorus and say with a definite certainty: yes, you can use CSS Grid in production today.&lt;/p&gt;
&lt;p&gt;I already have.&lt;/p&gt;
&lt;h2 id=&quot;why-css-grid&quot; tabindex=&quot;-1&quot;&gt;Why CSS Grid? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-css-grid-in-production-today/#why-css-grid&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I imagine that many of us are quite happy with the tools we currently use to lay out our web pages. I too was pretty confident using either Bootstrap&#39;s grid, Susy, or something I custom-built, to lay out my document using floats.&lt;/p&gt;
&lt;p&gt;I don&#39;t need to say here what&#39;s already been said, and which you&#39;ve probably heard, about floats being a hack. Suffice to say, that this approach leads to increased maintenance cost over the lifetime of a project and contributes to poor performance of a website.&lt;/p&gt;
&lt;p&gt;But floats are also a hack, just like tables were before that. CSS Grid is the hero the web needs.&lt;/p&gt;
&lt;h2 id=&quot;but-...-it&#39;s-not-supported!&quot; tabindex=&quot;-1&quot;&gt;But ... It&#39;s Not Supported! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-css-grid-in-production-today/#but-...-it&#39;s-not-supported!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like Rachel Andrew said in her recent blog post &lt;a href=&quot;https://rachelandrew.co.uk/archives/2017/07/04/is-it-really-safe-to-start-using-css-grid-layout/&quot;&gt;(link here)&lt;/a&gt; around 70% of browsers have support for Grid. That&#39;s most of the web. You might want to check your own analytics to see what you need to support for your project, however I believe I have come up with a workable solution for when you need to support IE11.&lt;/p&gt;
&lt;h2 id=&quot;the-scenario&quot; tabindex=&quot;-1&quot;&gt;The Scenario &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-css-grid-in-production-today/#the-scenario&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I often find myself with this UI layout in my projects: 2 repeating columns of content, inside which are elements, usually designed with dummy content of the same height. This &lt;em&gt;never&lt;/em&gt; works in production with floats. Sooner or later I get gaps like great big ugly missing teeth everywhere.&lt;/p&gt;
&lt;p&gt;The way I&#39;ve traditionally coped with this is very convoluted:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$items&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;endforeach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token delimiter important&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;row&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew!&lt;/p&gt;
&lt;p&gt;This assumes that 1) Your frontend developer is authorised to, and competent at, writing server-side code, 2) you don&#39;t mond doing a lot of counting, 3) you don&#39;t mind spurious markup everywhere.&lt;/p&gt;
&lt;p&gt;This approach is messy, but it works.&lt;/p&gt;
&lt;h2 id=&quot;supporting-97percent-of-the-web&quot; tabindex=&quot;-1&quot;&gt;Supporting 97% of the Web &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-css-grid-in-production-today/#supporting-97percent-of-the-web&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&#39;s the alternative. The Codepen embed below shows how I can support IE11, Edge, and older versions of some browsers, by using &lt;code&gt;flexbox&lt;/code&gt; instead of grid.&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;mwGxOP&quot; data-default-tab=&quot;result&quot; data-user=&quot;endymion1818&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;grid-fallbacks&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/endymion1818/pen/mwGxOP/&quot;&gt;grid-fallbacks&lt;/a&gt; by Ben Read (&lt;a href=&quot;https://codepen.io/endymion1818&quot;&gt;@endymion1818&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;First, I declare the flexbox layout:&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 768px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.container &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;flex-wrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; wrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;&gt; * &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;flex-basis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 46%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1200px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.container &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;&gt; * &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;flex-basis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 47%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note: this is 22 lines of code that I hope I will be able to remove from the project at some point. If not, it isn&#39;t doing any harm where it&#39;s not used.&lt;/p&gt;
&lt;p&gt;Now, below that I use an &lt;code&gt;@supports&lt;/code&gt; rule to scope the grid layouts:&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 768px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;.container &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token selector&quot;&gt;&gt; * &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is only 11 lines of code (not counting the lack of a &lt;code&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;&lt;/code&gt; etc, and doesn&#39;t use hacks like negative margins. Much better.&lt;/p&gt;
&lt;p&gt;This works in 97% of browsers &lt;em&gt;today&lt;/em&gt;, &lt;a href=&quot;https://caniuse.com/#search=flexbox&quot;&gt;even Internet Explorer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, in both layouts, you get 2 columns of content, each item on a row has the same height, and they can expand to the content that you put into them.&lt;/p&gt;
&lt;p&gt;One thing to note: I&#39;m not replacing my floated grid in this project. I&#39;m complementing them at this stage for when floats are inadequate.&lt;/p&gt;
&lt;p&gt;But in the near future, I&#39;m really looking forward to swapping out this approach for more semantic, web-native code.&lt;/p&gt;
&lt;p&gt;I hope this little demonstratons helps you to see how CSS grid works, is faster, less costly to maintain, and great for the web.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: 5 Steps To Speed Up a Slow Website</title>
    <link href="https://example.com/posts/5-steps-speed-up-slow-website/"/>
    <updated>2017-07-15T13:21:21Z</updated>
    <id>https://example.com/posts/5-steps-speed-up-slow-website/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I wrote this post for the Indigo Tree blog. It&#39;s a case study about how I reduced loading times on a site from 42 seconds (I know, right?!) to only 3 seconds.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can read the full post here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/5-steps-speed-up-slow-website/&quot;&gt;https://indigotree.co.uk/5-steps-speed-up-slow-website/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First Steps with Story Animations</title>
    <link href="https://example.com/posts/first-steps-with-story-animations/"/>
    <updated>2017-07-15T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-story-animations/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;For a while now I&#39;ve really enjoyed tinkering with animations as a way to bring a lot more quality to my projects. But as well as providing interactivity, I was curious to explore another way animations can be used in a project: to tell a story.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve discovered that animations can really make a project stand out from the competition, and I find myself driven to this field more and more. Partly, I want to do this to showcase what the web is really capable of in difference to other mediums. But, being practical about it, it&#39;s also a great way of getting users to stay on your site more and for it to be memorable.&lt;/p&gt;
&lt;p&gt;The style I adopted for this site was heavily influenced by my love of the English and Welsh countryside. I&#39;ve also been thinking a lot about the animation film &amp;quot;Watership Down&amp;quot; lately. I watched that film as a kid and it seems to have made a lasting impression on me. So I took the idea from those influences.&lt;/p&gt;
&lt;h2 id=&quot;drawing-the-svgs&quot; tabindex=&quot;-1&quot;&gt;Drawing the SVGs &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-story-animations/#drawing-the-svgs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used both Affinity Designer and Sublime Text to manipulate some SVGs I shamefully got free from the internet. I&#39;m sorry, I&#39;m not proud of that fact, but time was not on my side.&lt;/p&gt;
&lt;p&gt;Although you percieve there to be one tree that transitions from winter to summer, and one rabbit that moves across from one side of the screen to the other, there are actually 2 trees and 8 rabbits.&lt;/p&gt;
&lt;p&gt;This is because the easiest way to create the perception of movement I have found is to change the opacity.&lt;/p&gt;
&lt;h2 id=&quot;animating&quot; tabindex=&quot;-1&quot;&gt;Animating &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-story-animations/#animating&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each element is changed by modifying the opacity in GreenSock Animation Platform, which is tied to ScrollMagic, in order to perform the animations not on a timeline, but on scroll.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// smController = new ScrollMagic.Controller();&lt;/span&gt;&lt;br /&gt;  smTreeController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Controller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  smRabbitController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Controller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// getters&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; trigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;main&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; treeSummer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tree-summer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; treeWinter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tree-winter&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-4&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-5&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit6 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-6&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rabbit8 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rabbit-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// from winter to summer&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; treeWinterToSummer1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;400%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;treeSummer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smTreeController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; treeWinterToSummer2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;500%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;treeWinter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smTreeController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; heyRabbit0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;500%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;15%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbit0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smRabbitController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; byeRabbit0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;600%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;15%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbit0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smRabbitController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; heyRabbit1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;650%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;15%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbit1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smRabbitController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; byeRabbit1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScrollMagic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scene&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;triggerElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; trigger&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;750%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;15%&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTween&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbit1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;smRabbitController&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and so on...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There were actually 2 versions of this animation. I played with greensock to tween the appearance and disappearance of the rabbits. However, I decided against this approach beacuse in order to make the last-but-one rabbit stay in view for longer, I would have to set a pin, and release it later.&lt;/p&gt;
&lt;p&gt;I didn&#39;t think this approach was robust enough, especially since I want to build on this animation in the future. Having lots of spurious divs positioned around my dom didn&#39;t feel right.&lt;/p&gt;
&lt;h2 id=&quot;performance-considerations&quot; tabindex=&quot;-1&quot;&gt;Performance Considerations &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-story-animations/#performance-considerations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Loading up these libraries does have a performance cost of course. A cost that is most noticeable on mobile devices. So instead of enqueueing my Javascript in the normal way, I&#39;ve been working on a script that writes the tag into the DOM once you&#39;re at a certain breakpoint:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;querySelector&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; document &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;addEventListener&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; windowWidth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientWidth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;windowWidth &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\bno-js\b&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unescape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%3Cscript src=&#39;/js/deliciousreverie-noncriticalscripts.min.js&#39; type=&#39;text/javascript&#39; defer%3E%3C/script%3E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I further scoped this hit by adding a partial to the footer in hugo, so that the partial containing the SVG would only load on the home page.&lt;/p&gt;
&lt;p&gt;The home page loading time hovers around 3 seconds on desktop now. I know it could be better, but frankly, I feel the hit is worth it for something that I think will add plenty of value to my site.&lt;/p&gt;
&lt;h2 id=&quot;accessibility&quot; tabindex=&quot;-1&quot;&gt;Accessibility &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-story-animations/#accessibility&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&#39; think there are accessibility concerns with this project. The animation is purely illustrative and shouldn&#39;t affect screen readers or sight impaired ... I hope!&lt;/p&gt;
&lt;p&gt;Please don&#39;t hesitate to let me know if it does.&lt;/p&gt;
&lt;h2 id=&quot;future-plans&quot; tabindex=&quot;-1&quot;&gt;Future Plans &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-story-animations/#future-plans&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I already have plans for similarly-themed animations on other pages on the site, and have started building a bird that will fly across the screen, circle near the tree, and disappear off-screen.&lt;/p&gt;
&lt;p&gt;These I&#39;ll hopefully get done before the kids leave home.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: What Is JAMStack Web Technology</title>
    <link href="https://example.com/posts/jamstack-web-technology/"/>
    <updated>2017-08-09T13:21:21Z</updated>
    <id>https://example.com/posts/jamstack-web-technology/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I wrote this post for the Indigo Tree blog. It&#39;s aimed at a non-technical audience who want to get a grasp of the benefits of JAMStack, how it compares to LAMP and considers some of the implications such as changes to a users&#39; CMS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can read the full post here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/jamstack-web-technology/&quot;&gt;https://indigotree.co.uk/jamstack-web-technology/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Losing Peter</title>
    <link href="https://example.com/posts/losing-peter/"/>
    <updated>2017-09-14T13:21:21Z</updated>
    <id>https://example.com/posts/losing-peter/</id>
    <content type="html">&lt;p&gt;I don&#39;t recall how Peter and I became friends. We must&#39;ve struck up some conversation at school, is the only thing I can think of, and quickly found out we had similar interests. Peter is the guy who I used to call up on a Tuesday evening after the latest episode of Babylon 5 aired, and talk abut the episode, speculate about further plot details, and share our amazement of its then cutting edge FX.&lt;/p&gt;
&lt;p&gt;Peter was adopted. He never talked about this situation apart from on one occasion where we were pranking each other that we were both secretly aliens. Of course, being adopted was great backstory material.&lt;/p&gt;
&lt;p&gt;As time went on, Peter and I got more intensely interested in writing. We used to meet and flush out story outlines for hours, discussing main plot points, charachters, cultures, technology (most of them were science fiction stories, of course) and story arcs. Peter had a natural talent and I enjoyed listening to him flesh out an idea from nothing.&lt;/p&gt;
&lt;p&gt;Quite often our imaginations would be fired by some news of this new technology called The Internet. I had been given a 14.4k Apple modem and would excitedly chime &amp;quot;Let&#39;s try to get on the internet!&amp;quot;. Hours passed, and we would still be waiting for a beta of NCSA Mosaic or later Netscape Navigator to download, and feel frustrated when all we got was a blue box where a gif header image should be.&lt;/p&gt;
&lt;p&gt;14.4k was becoming slow even by standards of those days.&lt;/p&gt;
&lt;h2 id=&quot;drifting-apart&quot; tabindex=&quot;-1&quot;&gt;Drifting Apart &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/losing-peter/#drifting-apart&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Peter and I didn&#39;t stay friends for long after school. We went to different colleges (and were in different year groups - he was a year older than me). We did meet up a few times. He&#39;d gotten into the madcap humour of Monty Python&#39;s Flying Circus. This kind of humour was beyond me and I didn&#39;t understand why he was rolling around, creased double on the floor at the absurdity of it until much later on in life.&lt;/p&gt;
&lt;h2 id=&quot;final-scenes&quot; tabindex=&quot;-1&quot;&gt;Final Scenes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/losing-peter/#final-scenes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&#39;t know how we came to meet the last time. Perhaps we saw one another in the stret whilst Peter was at Cardiff Uni, and I was working in a recruitment office nearby.&lt;/p&gt;
&lt;p&gt;By that point we had not seen each other in a year or two. Peter seemed distracted. There was no absurd laughter, no jollility, and scarcely a mention of the things we used to enjoy.&lt;/p&gt;
&lt;p&gt;Looking back, I have to wonder if this wasn&#39;t a silent plea for help. He clearly wasn&#39;t himself. I think now, perhaps that wasn&#39;t due to his occupation with his studies, his involvement with some relationship or whatever else.&lt;/p&gt;
&lt;p&gt;Instead, was it an absence of anything that he might have otherwise been occupied with. I know from personal forays into feelings of depression, it&#39;s the absence of anything rather than a struggle to find common ground that results in these unhealthy silences.&lt;/p&gt;
&lt;p&gt;&amp;quot;As you know, we don&#39;t have Peter now&amp;quot;, his adoptive mother said to my mother when she met her shopping. Again, a shielding, or an absence of emotion, similar to Peters, I thought.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts&quot; tabindex=&quot;-1&quot;&gt;Final Thoughts &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/losing-peter/#final-thoughts&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Peter&#39;s gone. But I wonder regularly, if not daily, if I could have done anything to change his mind. I didn&#39;t speak to him about my faith after he expressed contentment with his Catholic heritage. Would that have made any difference? I didn&#39;t breach many personal subjects with him. I didn&#39;t even keep in touch. Was that neglectful of me?&lt;/p&gt;
&lt;p&gt;I wsh I could talk to him again, if only just to ask him, &amp;quot;Why did you choose that path?&amp;quot;, to try to understand what it was that made him take his life.&lt;/p&gt;
&lt;p&gt;My father thinks that individuals tend to be more compassionate after a bereavement. That the harrowing experience of losing someone makes you see our temporary situation for what it is, and are more appreciative of friendships and relationships we have because of that.&lt;/p&gt;
&lt;p&gt;I really hope that I can value this experience, use it to become more compassionate, more understanding, more empathic, towards those I encounter. And less wasteful of the very limited time we have left.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Borges and I</title>
    <link href="https://example.com/posts/borges-and-i/"/>
    <updated>2017-09-30T13:21:21Z</updated>
    <id>https://example.com/posts/borges-and-i/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;As a teenager, and on into my twenties, I developed a real affinity for existential philosophy, and really enjoyed reading the works of Kafka, Alain Robbe-Gruillet, Satre, Camus, Samuel Beckett and others. Though these writings aren&#39;t what you might call &amp;quot;easy reading&amp;quot;, they appealed to this somewhat narcissistic, isolated youth who already felt as if he didn&#39;t really belong anywhere.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One author that I never encountered as part of that group was the Argentinian writer and translator Jorge Luis Borges, and it wasn&#39;t until I stumbled across a collection of his work that I even heard of him.&lt;/p&gt;
&lt;h2 id=&quot;borges-the-translator&quot; tabindex=&quot;-1&quot;&gt;Borges the Translator &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/borges-and-i/#borges-the-translator&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Borges was a translator into Argentinian of popular Western works. I get the sense that this work must not have challenged him very much, since he didn&#39;t exactly stick to the material he had been given. I am told that he sometimes introduces new text, plot lines and even entirely new characters.&lt;/p&gt;
&lt;p&gt;I know what you&#39;re thinking, &amp;quot;that is a betrayal of what it means to &lt;em&gt;translate&lt;/em&gt;&amp;quot; ... and perhaps you would be right.&lt;/p&gt;
&lt;p&gt;But perhaps there&#39;s another view.&lt;/p&gt;
&lt;p&gt;I&#39;ve often thought that the work of a translator is an act of co-creation, not merely one of replacing one word for another. What got me thinking along these lines is when I heard that people signing for the deaf are called &amp;quot;interpreters&amp;quot;, not &amp;quot;translators&amp;quot;, since they are interpreting words into something else - thoughts or phrases that can be understood in a different medium.&lt;/p&gt;
&lt;p&gt;Was Borges trying to force this point? Or was he just being facetious, taking liberties because he knew his audience would be none the wiser. I guess we may never know.&lt;/p&gt;
&lt;h2 id=&quot;borges-the-writer&quot; tabindex=&quot;-1&quot;&gt;Borges the Writer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/borges-and-i/#borges-the-writer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When he came into his own as a writer, Borges&#39; tales can verge on the kind of creepiness HP Lovecraft fans would adore; tales of vast, hidden cultures with special knowledge in dense jungle lands, of unintelligible worlds existing just beyond our own.&lt;/p&gt;
&lt;p&gt;As an example of this type of story, &amp;quot;The Garden of Forking Paths&amp;quot;, takes a somewhat paranoid narrator trying to escape a determined killer by finding some hidden garden through which he can escape, only to find that the killer knows the maze better than he knows it himself, and so the narrator cannot escape the inevitable.&lt;/p&gt;
&lt;p&gt;But what I really love is Borges&#39; ability to get me to question my own world view: more often than not, his mostly short, single page or two-chapter stories end with a plot twist sure to cut you to the quick; quite often playing tricks with the role of narrator to spin your interpretation of the story completely on its heels.&lt;/p&gt;
&lt;p&gt;My absolute favourite of these stories is &amp;quot;Borges and I&amp;quot;, the last story in the compendium I own. I&#39;ll reproduce the entire delicious text here by way of a conclusion.&lt;/p&gt;
&lt;p&gt;I argue that Borges should not so readily be ignored, and be much less eagerly forgotten as he seems to be today. Instead I think he should be considered as among the core group of existentialist writers that I mentioned at the start of this article. I&#39;d love to see more people recognise this talented, mischevious and thought-provoking artist for what he was, a true original among his contemporary 20th century authors.&lt;/p&gt;
&lt;h2 id=&quot;borges-and-i&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Borges and I&lt;/em&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/borges-and-i/#borges-and-i&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;It’s to that other one, to Borges, that things happen. I walk through Buenos Aires and I pause, one could say mechanically, to gaze at a vestibule’s arch and its inner door; of Borges I receive news in the mail and I see his name in a list of professors or in some biographical dictionary. I like hourglasses, maps, eighteenth-century typefaces, etymologies, the taste of coffee and the prose of Stevenson; the other shares these preferences, but in a vain kind of way that turns them into an actor’s attributes. It would be an exaggeration to claim that our relationship is hostile; I live, I let myself live so that Borges may write his literature, and this literature justifies me. It poses no great difficulty for me to admit that he has put together some decent passages, yet these passages cannot save me, perhaps because whatsoever is good does not belong to anyone, not even to the other, but to language and tradition. In any case, I am destined to lose all that I am, definitively, and only fleeting moments of myself will be able to live on in the other. Little by little, I continue ceding to him everything, even though I am aware of his perverse tendency to falsify and magnify.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Spinoza understood that all things strive to persevere being; the stone wishes to be eternally a stone and the tiger a tiger. I will endure in Borges, not in myself (if it is that I am someone), but I recognise myself less in his books than in those of many others, or in the well-worn strum of a guitar. Years ago I tried to free myself from him by moving on from the mythologies of the slums to games with time and infinity, but those games are now Borges’ and I will have to conceive of other things. Thus my life is a running away and I lose everything and everything is turned over to oblivion, or to the other.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I do not know which of the two is writing this piece.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published article: Notes from React London September 2017</title>
    <link href="https://example.com/posts/stub-react-london-sept-2017/"/>
    <updated>2017-10-14T14:21:21Z</updated>
    <id>https://example.com/posts/stub-react-london-sept-2017/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;In September I attended React London meetup at Facebook’s offices near King’s Cross to hear Benjie Gillam, Faraz Khan and Robbie McCorkell talk about GraphQL and css-in-js strategies.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You&#39;ll notice that I&#39;ve only taken notes from Benie&#39;s and Faraz&#39; talks ... Robbies was about a subject which went right over my head.&lt;/p&gt;
&lt;p&gt;I&#39;m definitely going to be joining React London for another series of excellent talks in the next few months.&lt;/p&gt;
&lt;p&gt;This is a stub from an article I had published on the Indigo Tree website.&lt;/p&gt;
&lt;p&gt;You can read the full article here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://indigotree.co.uk/notes-react-london-september-2017/&quot;&gt;https://indigotree.co.uk/notes-react-london-september-2017/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published article: From Wordpress to Developing in React — Starting to See It</title>
    <link href="https://example.com/posts/from-wordpress-to-developing-in-react-starting-to-see-it/"/>
    <updated>2017-10-20T13:21:21Z</updated>
    <id>https://example.com/posts/from-wordpress-to-developing-in-react-starting-to-see-it/</id>
    <content type="html">&lt;p&gt;As a frontend designer I&#39;ve always prided myself on being a HTML and CSS specialist. My use of JavaScript has been limited to animations and DOM manipulation. However, at Indigo Tree we&#39;re branching out from our staple of Wordpress and trying different methods of creating websites with functionality that our clients require, whilst maximising their budget.&lt;/p&gt;
&lt;p&gt;This article was published on the GatsbyJS blog.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/blog/2017-10-20-from-wordpress-to-developing-in-react-starting-to-see-it/&quot; title=&quot;From Wordpress to Developing in React — Starting to See It on Gatsbjs.org blog&quot;&gt;Read the full article&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Planning Projects — a guide to user journeys</title>
    <link href="https://example.com/posts/planning-projects-a-guide-to-user-journeys/"/>
    <updated>2017-12-07T14:21:21Z</updated>
    <id>https://example.com/posts/planning-projects-a-guide-to-user-journeys/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;A few years ago I was lucky enough to work with a really talented team on a large software application that we built from scatch to serve a large, distributed construction organisation. I learned a huge amount working for this company. One of the things that I enjoyed learning most was how to capture project requirements so that what we delivered met or exceeded user expectations. I&#39;d like to share with you how we achieved that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The team were good enough to train me in how to work within their process, and a few times I got invited to represent the frontend team in project scoping meetings.&lt;/p&gt;
&lt;p&gt;I&#39;m going to outline what we did so that you can see the benefits of documenting a project as user journeys.&lt;/p&gt;
&lt;p&gt;We&#39;re going to take a specific story that we wrote for this project, examine who should be involved, what epics are and how they can help, then break down the story title and description to examine why we did things this way.&lt;/p&gt;
&lt;h2 id=&quot;part-1:-who-should-be-involved&quot; tabindex=&quot;-1&quot;&gt;Part 1: Who Should Be Involved &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#part-1:-who-should-be-involved&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The project meetings were a really open discussion between the developers, both front and backend, a business analyst and one or two key stakeholders who would be using the project day to day.&lt;/p&gt;
&lt;p&gt;The user and stakeholder would start by describing what their current system was. For the most part, this involved gathering data about construction projects into a huge spreadsheet, including proposed schedule of works, availability of contractors and in-house staff, as well as materials purchase and hire.&lt;/p&gt;
&lt;p&gt;The project director would originate the spreadsheet and various site managers, materials handlers, personnel teams, would contribute to the spreadsheet, mailing it round to each other as they went.&lt;/p&gt;
&lt;p&gt;Before this meeting, I had literally no idea of the workflow they were using. Already I was beginning to see the potential of what we were building, and how it would simplify and standardise things for our users.&lt;/p&gt;
&lt;p&gt;As a result, I began to empathise with them more, and started to think about how things could be represented so that they would be familiar and helpful.&lt;/p&gt;
&lt;p&gt;It is very important that user journeys are not composed in isolation. Individually, we were all pieces of a puzzle, and had essential insights into the process of building that resulted in a much clearer document that was practically useful.&lt;/p&gt;
&lt;p&gt;If no developers had been involved in the meeting, essential information about the functionality would have been missed, rendering the stories less useful or even potentially harmful to the build process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Hell is other peoples undocumented assumptions&amp;quot; — Nicole Fenton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;part-2:-epics-story-overviews&quot; tabindex=&quot;-1&quot;&gt;Part 2: Epics — Story Overviews &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#part-2:-epics-story-overviews&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the stakeholders talked we documented things, together with the business analyst, in a way that would lead to some specific user stories.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example of an epic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a department overseer I want to display current users so that I can select personnel for a project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The structure of this story is very important:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;as a (&lt;strong&gt;role&lt;/strong&gt;) I want to (&lt;strong&gt;tasks&lt;/strong&gt;) so that I can (&lt;strong&gt;achieve goal&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first, it doesn&#39;t seem as if the final statement is important. You  might think it&#39;s too obvious to state a goal, or you might have little idea what that goal is.&lt;/p&gt;
&lt;p&gt;However, the goal can be critically important to meeting user expectations, and reducing wasted development time. If you don&#39;t clearly understand what the users&#39; goal is, even if you&#39;ve identified the task they are doing, you can miss the mark entirely.&lt;/p&gt;
&lt;p&gt;From this epic we built up a workflow that helped us see the task in context with the rest of the application:&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;Department overseer sets dates which generates email to all department staff&lt;/li&gt;
&lt;li&gt;staff respond via authenticated webpage&lt;br /&gt;
2.1.	availability&lt;br /&gt;
2.2.	max no of days&lt;br /&gt;
2.3.	transport required?&lt;br /&gt;
2.4.	Can provide transport?&lt;br /&gt;
2.5.	(Veggie – see separate user story re staff page)&lt;/li&gt;
&lt;li&gt;Coordinator selects and sets staff dates&lt;/li&gt;
&lt;li&gt;Reviews and generates email confirmation of dates&lt;br /&gt;
4.1.	Includes in email, details of things they need to know (transport, PPE, badges, checklist)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;From this workflow we have started to identify stories that need to be written up and queued into the project.&lt;/p&gt;
&lt;h2 id=&quot;part-3:-user-stories-(or-journeys)&quot; tabindex=&quot;-1&quot;&gt;Part 3: User Stories (or journeys) &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#part-3:-user-stories-(or-journeys)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;User Journeys don&#39;t have to come from epics, but often you&#39;ll find that you have a story that begins to look unwieldy, as if it might involve several different stages or work in different areas of the application.&lt;/p&gt;
&lt;p&gt;My opinion on this is that if one story can be broken up into several smaller ones, it should. There&#39;s no harm done by having more stories, and they&#39;ll be easier for the developer to process, and less of a pain for the QA testers too.&lt;/p&gt;
&lt;p&gt;Here&#39;s a story that&#39;s closely related to the epic above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a Department Overseer I want to select staff for projects, based on criteria so that the right mix of staff are invited&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I know what you&#39;re thinking, &amp;quot;what criteria?&amp;quot; - that&#39;s part of another story. It was easier for us to break this one down so that we could handle the criteria seperately. But this task was merely concerned with selecting staff.&lt;/p&gt;
&lt;p&gt;Following this story is a description, which has three main groups of information: Prerequisites, Acceptance Criteria, and Process.&lt;/p&gt;
&lt;h3 id=&quot;anatomy-of-a-story:-prerequisites&quot; tabindex=&quot;-1&quot;&gt;Anatomy of a Story: Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#anatomy-of-a-story:-prerequisites&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A Prerequisite is a set of requirements that must be already present in order for this story to move into the backlog so that it can be worked on.&lt;/p&gt;
&lt;p&gt;The prerequisites for this story are as follows:&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Department is defined.&lt;/li&gt;
&lt;li&gt;Project is defined.&lt;/li&gt;
&lt;li&gt;Project date has been set.&lt;/li&gt;
&lt;li&gt;Project tasks are defined.&lt;/li&gt;
&lt;li&gt;Department staff and their task skills/levels are defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This says to the developer that they need to check these need to be completed and in the current build before we go ahead with this piece of functionality.&lt;/p&gt;
&lt;h3 id=&quot;anatomy-of-a-story:-acceptance-criteria&quot; tabindex=&quot;-1&quot;&gt;Anatomy of a Story: Acceptance Criteria &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#anatomy-of-a-story:-acceptance-criteria&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Acceptance criteria allows the developer to see more detail about what is involved in this story.&lt;/p&gt;
&lt;p&gt;It also allows the QA team to see what they might expect to see when they decide whether to pass or fail the story after the development sprint.&lt;/p&gt;
&lt;p&gt;The benefits of investigation and conveying acceptance criteria are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducing developer cognitive load by eliminating or reducing guess work, thereby increasing speed in which this task can be completed&lt;/li&gt;
&lt;li&gt;Increasing user satisfaction by fulfilling their expectations straight away, increasing their confidence in the teams&#39; ability to deliver, and&lt;/li&gt;
&lt;li&gt;Avoiding costly refactors due to not meeting the users&#39; expectations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our acceptance criteria for this story was as follows:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Display Staff information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staff Name (static data, link to staff info, and display photo on hover, congregation).&lt;/li&gt;
&lt;li&gt;Team (static data, use for geographic division to meet Branch recommendation).&lt;/li&gt;
&lt;li&gt;1st trade / 2nd trade.&lt;/li&gt;
&lt;li&gt;Date last attended.&lt;/li&gt;
&lt;li&gt;Date last invited (should this be Last Invitations or Invitation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Records – displaying status of date/accepted or date/declined or date/unable-contact or keep-on-hold)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Task name/skill level (sort by skill level)&lt;br /&gt;
(All column headings to be static information.)&lt;/li&gt;
&lt;li&gt;Allow selection of staff based on skill and training requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Now there&#39;s no ambiguity about what needs to be displayed in this view so that the Overseer can complete his task of selecting the right people for the job.&lt;/p&gt;
&lt;h3 id=&quot;anatomy-of-a-story:-process&quot; tabindex=&quot;-1&quot;&gt;Anatomy of a Story: Process &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#anatomy-of-a-story:-process&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The process details how the user will achieve the task outlined in the story.&lt;/p&gt;
&lt;p&gt;Here&#39;s the process for this particular story we&#39;ve been looking at:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Process:&lt;br /&gt;
Search all Staff&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First Name&lt;/li&gt;
&lt;li&gt;Last Name&lt;br /&gt;
Email all selected staff to invite to project,&lt;/li&gt;
&lt;li&gt;Staff reply by link to a tick box calendar&lt;/li&gt;
&lt;li&gt;Overseer reviews replies&lt;/li&gt;
&lt;li&gt;Display staff for specific task name (sort by skill level)&lt;/li&gt;
&lt;li&gt;Define if selected for training.&lt;/li&gt;
&lt;li&gt;Define dates like to invite (calendar)&lt;/li&gt;
&lt;li&gt;select staff based on skill and training requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Without a process description, the developer could easily miss key elements out of the delivery. For example, you can see here that the process involves an email function to staff who are invited, and a calendar that&#39;s visible to staff members and to the overseer so that they can easily identify when they can be expected on site.&lt;/p&gt;
&lt;p&gt;The process description allows the developer to imagine the user completing the task so they can visualise it, and then produce code that matches.&lt;/p&gt;
&lt;h2 id=&quot;part-4:-estimating&quot; tabindex=&quot;-1&quot;&gt;Part 4: Estimating &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#part-4:-estimating&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once this story has been agreed by the stakeholder, the business analyst and the developers, the developers can estimate difficulty.&lt;/p&gt;
&lt;p&gt;Estimating time it takes to build some piece of functionality is notoriously difficult. In my experience, no human seems to be able to do this terribly well.&lt;/p&gt;
&lt;p&gt;So instead of estimating time, we can estimate difficulty by using points. The developers will find this easier to quantify, and then the backlog can be populated based on the number of points.&lt;/p&gt;
&lt;p&gt;We used a simple system for points:&lt;/p&gt;
&lt;p&gt;1 - easy&lt;br /&gt;
2 - challenging&lt;br /&gt;
3 - difficult&lt;/p&gt;
&lt;p&gt;We decided that each developer&#39;s backlog should contain no more than 10 points worth of work. This keeps them focused on the task at hand, and allows you to re-allocate work to other developers based on their availability and workload.&lt;/p&gt;
&lt;h2 id=&quot;quick-recap&quot; tabindex=&quot;-1&quot;&gt;Quick Recap &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/planning-projects-a-guide-to-user-journeys/#quick-recap&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&#39;s our story breakdown! What did you think?&lt;/p&gt;
&lt;p&gt;We looked more at the role epics play, got a feel for who you should include in scoping meetings, and broke down how we estimated user stories.&lt;/p&gt;
&lt;p&gt;What did you think about the anatomy of a project? Do you think it&#39;s useful to outline prerequisites, to clearly state acceptance criteria upfront, and to break down the users&#39; process.&lt;/p&gt;
&lt;p&gt;You might think on first impressions that there&#39;s quite a bit of work involved. But investing a little in getting things right the first time avoids more issues and reduces overall project cost - as well as reducing frustration from developers and clients - further down the line.&lt;/p&gt;
&lt;p&gt;I certainly enjoyed the process, and have tried to bring at least some elements to this way of thinking into each place I&#39;ve worked at since.&lt;/p&gt;
&lt;p&gt;I hope it proves useful to you as well.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hugo theme - Delicious Reverie</title>
    <link href="https://example.com/posts/hugo-theme-delicious-reverie/"/>
    <updated>2018-02-10T14:21:21Z</updated>
    <id>https://example.com/posts/hugo-theme-delicious-reverie/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Recently someone reached out to ask if they could use my theme that I use on &lt;a href=&quot;http://deliciousreverie.co.uk/&quot;&gt;deliciousreverie.co.uk&lt;/a&gt; on their site. So I&#39;ve decided to release this theme to the public, albeit with a few changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you&#39;re a committed family man, coding outside work is something that of necessity, has to be done in a hurry. Yet it&#39;s often the work I most look forward to.&lt;/p&gt;
&lt;p&gt;I coded this theme in an awful hurry, but it&#39;s served my site well over the past year or more that I&#39;ve been using it. I started off by examining how the Bootstrap 3 theme output and re-used some of its layout partials when building this theme, in order to save myself some time.&lt;/p&gt;
&lt;p&gt;The focus of this theme is it&#39;s brevity when it comes to CSS and JavaScript. I wanted to make something that was super fast, especially since this was a static site to be hosted on Netlify, and I wanted to see how quickly I could get it to load. I read Scott Jehl&#39;s excellent book &amp;quot;Responsible Responsive Design&amp;quot;, and wanted to implement some of the ideas to reduce time to first byte, first paint time and time to interactivity.&lt;/p&gt;
&lt;p&gt;My initial aim was to have only one request: the HTML file, and to inline the CSS and JavaScript. But other things were needed in order not to compromise too much on appearance, so I added a background image, and a WOFF2 font file.&lt;/p&gt;
&lt;p&gt;Oh yes, and a Favicon.&lt;/p&gt;
&lt;p&gt;As a result, It&#39;s very minimal indeed, with less than 300 lines of CSS when compiled. The only JavaScript is for the page transitions. It&#39;s gone through a few iterations and modular additions over the past 3 years, and I was pleased to hear that someone else liked it and wanted to use it!&lt;/p&gt;
&lt;h2 id=&quot;using-deliciousreverie-theme&quot; tabindex=&quot;-1&quot;&gt;Using deliciousreverie theme &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/hugo-theme-delicious-reverie/#using-deliciousreverie-theme&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/gohugo-theme-deliciousreverie&quot;&gt;Here&#39;s the code repo&lt;/a&gt;. I used Grunt taskrunner, which is what I used for ages before picking up Gulp and Webpack. I still enjoy using it.&lt;/p&gt;
&lt;p&gt;So you can just run &lt;code&gt;npm install&lt;/code&gt; and then &lt;code&gt;grunt&lt;/code&gt; and you&#39;ll have regenerated the CSS and JS. Although if you just want to use the theme, you don&#39;t even need to do that.&lt;/p&gt;
&lt;h2 id=&quot;what&#39;s-been-left-out&quot; tabindex=&quot;-1&quot;&gt;What&#39;s Been Left Out &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/hugo-theme-delicious-reverie/#what&#39;s-been-left-out&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two things haven&#39;t made it into this theme that are present on my website:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Skybird typeface. &lt;a href=&quot;https://phitradesign-fonts.com/&quot;&gt;Philip Trautmann&lt;/a&gt; kindly let me use this unique typeface that I feel reflects my personality very well. Before that I used Vollkorn from Google Fonts, so I replaced that font to avoid licencing issues. Although I really recommend you check out Philip&#39;s work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homepage animation. The homepage animation uses a ton of JavaScript, including the free version of GreenSock animation library and ScrollMagic. The vector art is also ... umm ... not a small payload ... and I worried that some wouldn&#39;t know how to remove this code, causing them performance issues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;hope-you-like-it-:-d&quot; tabindex=&quot;-1&quot;&gt;Hope you like it :-D &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/hugo-theme-delicious-reverie/#hope-you-like-it-:-d&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&#39;s all I have to say really, except feel free to clone, download, modify, and use this code. I hope you enjoy doing so!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Pop!_OS for Work</title>
    <link href="https://example.com/posts/using-popos-for-work/"/>
    <updated>2018-02-10T14:21:21Z</updated>
    <id>https://example.com/posts/using-popos-for-work/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;In November last year I switched from using Windows at my place of work to using Pop!_OS by System76, an Ubuntu derivative designed for developers, researchers and scientists. What motivated me to make the switch? What benefits, and disadvantages, has it brought me?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I came to work at my current employer, I got given a PC to develop on. I was eager to fit in and please everyone, and accepted the situation with the single caveat that it had to run WSL (Windows Subsystem for Linux, commonly known as Linux on Windows).&lt;/p&gt;
&lt;h2 id=&quot;using-windows-subsystem-for-linux&quot; tabindex=&quot;-1&quot;&gt;Using Windows Subsystem for Linux &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#using-windows-subsystem-for-linux&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve enjoyed using WSL, and it certainly has made Windows much more painless to use as a developer. I spend a lot of my time in the terminal day-to-day, using various web development tools including git, node, yarn, and other tools such as WPScan to analyse legacy sites. But it does have certain limitations. For example, I could never get Mysql to work on the command line. Only Atom allowed me to open files straight into my text editor. WSL is a brilliant innovation and I hope the team continues to push the boundaries there.&lt;/p&gt;
&lt;p&gt;But in the end, it wasn&#39;t quite enough for me. I also never got embedded into the Windows workflow. You know, little things like how windows layer on top of one another instead of occupying their own spaces. I never got over little things like that which interrupted my mental model of my workspace.&lt;/p&gt;
&lt;h2 id=&quot;why-not-macos&quot; tabindex=&quot;-1&quot;&gt;Why Not MacOS? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#why-not-macos&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a &lt;em&gt;loooong&lt;/em&gt; time I&#39;ve been a Macintosh afficionado, ever since my friend Martin Harries sold me a Performa in the early 90s. Although the OS is a great solution for a lot of individuals, and I can&#39;t argue that it&#39;s visually appealing.&lt;/p&gt;
&lt;p&gt;But when you start getting under the hood you come up against its inadequacies.&lt;/p&gt;
&lt;p&gt;I didn&#39;t like the absence of a package manager to maintain the OS from the command line. Also, a lot of the apps are a layer on top of command line programs which interfaces I now prefer for a lot of tasks.&lt;/p&gt;
&lt;h2 id=&quot;enter-pop!_os&quot; tabindex=&quot;-1&quot;&gt;Enter Pop!_OS &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#enter-pop!_os&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pop!_OS is billed as a system built for creators. It&#39;s interface is clean and out-of-the way, although it reflects well the 70s design ethos of its creators, System 76.&lt;/p&gt;
&lt;p&gt;Where Pop! came into its own for me was it&#39;s inbuilt terminal. I started off downloading and configuring Hyper, my go-to choice on the Mac. But after a while this broke, leading me to use the native terminal. It didn&#39;t take me long to figure out this had already been configured really well with a lot of the extensions I would&#39;ve added anyway.&lt;/p&gt;
&lt;p&gt;The other great thing is the Super key. On Windows, the Super key will allow you to search your programs. On Mac, the super key with a modifier gives you either a search / app launcher, or it tabs through your open apps.&lt;/p&gt;
&lt;p&gt;But on Ubuntu (of which Pop is a derivative), it serves both as an app launcher and zooms out all of your open apps, allowing you to visually switch between everything, or start a new workflow. It also gives you access to your desktop spaces so you can see other workflows in progress.&lt;/p&gt;
&lt;p&gt;For my mental model this is absolute genius. I&#39;ve got a pretty visual mind so seeing all my work spaces tiled out like this is really helpful in giving me some context.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/pop-super-key.jpg&quot; alt=&quot;Super key depressed showing all windows zoomed out and all apps currently open&quot; title=&quot;The POP OS Super key is ... well ... super!&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;i-am-reminded-to-make-a-lightbox-popout-for-images-like-this-:-(&quot; tabindex=&quot;-1&quot;&gt;I am reminded to make a lightbox popout for images like this :-( &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#i-am-reminded-to-make-a-lightbox-popout-for-images-like-this-:-(&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;h2 id=&quot;caveats-or-how-not-to-break-your-computer&quot; tabindex=&quot;-1&quot;&gt;Caveats, or How Not to Break Your Computer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#caveats-or-how-not-to-break-your-computer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For many people, using Windows or MacOS is insurance ... you know you&#39;re probably not going to be able to break the OS irrevocably, and if you do you can just restore it from the cloud. Ubuntu can have this kind of setup, however I ... haven&#39;t configured it. I have broken things a few times, mostly by revoking my own permissions to edit files or folders.&lt;/p&gt;
&lt;p&gt;Hah, yeah, I&#39;m such a newbie at this.&lt;/p&gt;
&lt;p&gt;But on the other hand, I have always found a solution from the excellent community support forums, or helpful FOSS software maintainers.&lt;/p&gt;
&lt;p&gt;Whilst there&#39;s cause for concern, I&#39;m not worried to the point of paralysis. It&#39;s a bit like doing DIY. Yes, you can break stuff, but you have to try your best, and call in the experts when you get stuck.&lt;/p&gt;
&lt;p&gt;One day, in the far distant future, I hope I can help others who might be in a similar position.&lt;/p&gt;
&lt;h2 id=&quot;app-availability&quot; tabindex=&quot;-1&quot;&gt;App Availability &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#app-availability&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing that grates against the argument that you do need a bit of familiarity to aid your workflow is that a lot of the apps I&#39;m used to using aren&#39;t available for Linux.&lt;/p&gt;
&lt;p&gt;A good example is Sketch, which was my go-to design tool.&lt;/p&gt;
&lt;p&gt;I&#39;ve found a great replacement in &lt;a href=&quot;https://www.figma.com/&quot;&gt;Figma&lt;/a&gt;, which is superbly responsive on a browser if it doesn&#39;t currently have a native app. I&#39;m also really looking forward to Alecaddd&#39;s &lt;a href=&quot;https://github.com/Alecaddd/akira&quot;&gt;Akira&lt;/a&gt;, which is in beta but looks really really promising.&lt;/p&gt;
&lt;p&gt;For raster graphics editing, I have used GIMP. As much as people rave about it, I have to say ... I hate it. It&#39;s just so counterintuitive. Instead, I&#39;ve been using &lt;a href=&quot;https://www.photopea.com/&quot;&gt;Photopea&lt;/a&gt;, which opens just about any graphic format, and is a pretty decent editor in the style of Photoshop.&lt;/p&gt;
&lt;p&gt;These tools have meant I hardly skip a beat when I am handed a set of design files.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/using-popos-for-work/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pop!_OS is a smart, well designed release of Ubuntu which has sped up my workflow massively. I thoroughly enjoy using it. I&#39;m seriously considering replacing my home laptop MacOS system in favour of it. The only thing that&#39;s holding me back is the thought that I might lose the ability to play the platform game Braid. That would be very sad, but not essential!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Deserializing Data in GatsbyJS</title>
    <link href="https://example.com/posts/deserializing-data-in-gatsbyjs/"/>
    <updated>2018-03-17T13:21:21Z</updated>
    <id>https://example.com/posts/deserializing-data-in-gatsbyjs/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;One of the great strengths in static site generator Gatsbyjs is it&#39;s node API. This API gives Gatsby flexibility by allowing data to be transformed from myriad sources into a format that can easily be rendered as HTML: JSON. However, this can present a few issues when content is stored as escaped HTML, such as in WordPress posts and pages. Here&#39;s how a colleague and I worked around a tricky problem we discovered when working with content pulled in from WordPress.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently built a GatsbyJS site that stored content in Markdown and used NetlifyCMS to allow content authors to work directly with the site in editing and adding content. Using Markdown with NetlifyCMS was an interim solution. We needed to build a site in only a few days, but knew that requirements would at some point grow substantially, at which point we wanted to switch to a WordPress backend.&lt;/p&gt;
&lt;p&gt;When I switched to WordPress it took me only a few hours to implement 95% of the work, most of which was spent generating the existing content as WordPress pages. I modified my &lt;code&gt;gatsby-node.js&lt;/code&gt; file and my page template, but I came unstuck when using Helmet to generate page titles.&lt;/p&gt;
&lt;h2 id=&quot;the-issue&quot; tabindex=&quot;-1&quot;&gt;The Issue &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/deserializing-data-in-gatsbyjs/#the-issue&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the existing data structure I was able to generate a page layout that looked like this:&lt;/p&gt;
&lt;p&gt;This results in the result we expected, the content rendered as HTML inside the respective tags.&lt;/p&gt;
&lt;p&gt;However, the post.title is stored as escaped HTML, so when you try to pop the &lt;code&gt;post.title&lt;/code&gt; into the meta tag using Helmet, like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Helmet title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you get whatever markup is stored. This is fine in most cases ... however, in WordPress land you&#39;ll quite often find people using things like &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tags to adapt their layouts a little, or in my case, using a dash. When rendered as a meta tag, that looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mytitle \&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&quot;token number&quot;&gt;8221&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; contains a dash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not great for presentation, or SEO.&lt;/p&gt;
&lt;h2 id=&quot;the-workaround.&quot; tabindex=&quot;-1&quot;&gt;The Workaround. &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/deserializing-data-in-gatsbyjs/#the-workaround.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There wasn&#39;t a simple way around this issue that my colleague &lt;a href=&quot;https://twitter.com/Mosh1e&quot;&gt;David Hewitt&lt;/a&gt; or I could find.&lt;/p&gt;
&lt;p&gt;We knew we needed to parse the element so that it returned as HTML again, but there wasn&#39;t an easy way to do this in Gatsbyjs. We knew we could use the DOM parser to achieve these results but here there was no document, hence no DOM.&lt;/p&gt;
&lt;p&gt;In the end we turned to the xmldom package on NPM, and pulled the &lt;code&gt;DOMParser&lt;/code&gt; method in, decoding the string and then grabbing the textcontent.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Helmet &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-helmet&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; DOMParser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmldom&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;pageTemplate&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; post &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wordpressPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; siteTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siteMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DOMParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseFromString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;div&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wordpressPage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decodedString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childNodes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Helmet title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;decodedString&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;siteTitle&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;showing-gatsby&#39;s-strengths&quot; tabindex=&quot;-1&quot;&gt;Showing Gatsby&#39;s Strengths &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/deserializing-data-in-gatsbyjs/#showing-gatsby&#39;s-strengths&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although we encountered an issue here, in a lot of ways it has hilighted to me the strengths of GatsbyJS, not what you might perceive as weaknesses.&lt;/p&gt;
&lt;p&gt;In the first instance, the issue originated from WordPress which stores escaped HTML instead of JSON, MarkDown or any other format. I can see the benefits to this (being able to add &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tags to titles etc) but it does present some unique challenges—and not just to GatsbyJS.&lt;/p&gt;
&lt;p&gt;This has also hilighted one of the fantastic strengths of GatsbyJS:- that I could pull in a package from NPM and use it in my build process. This opens up a world of possibility and makes GatsbyJS a lot more customizeable than I had thought previously.&lt;/p&gt;
&lt;p&gt;And the other strength is that it still took me only a few hours to switch from using MarkDown files to a WordPress backend, such is the strength of the node API and the &lt;code&gt;gatsby-source-wordpress&lt;/code&gt; in the way that it transforms data so that there was no difference between the two builds.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/issues/4543&quot;&gt;I&#39;ve filed an issue on GatsbyJS on the repo&lt;/a&gt;, but there are a few issues around how to write a normalizer to deal with this. For instance, in most cases we do want to use the escaped HTML, so that the Title field is rendered in the component. It&#39;s only when using Helmet that we want the string deserialized.&lt;/p&gt;
&lt;p&gt;So I&#39;m not sure how to proceed with this .. at least there&#39;s a workaround for now, and I&#39;m sure as a community we can address this issue so that we can drop the external dependency or build it into the existing processes in some way.&lt;/p&gt;
&lt;h2 id=&quot;update:-use-createnodefield-api&quot; tabindex=&quot;-1&quot;&gt;UPDATE: use CreateNodeField API &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/deserializing-data-in-gatsbyjs/#update:-use-createnodefield-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the way I rendered the title using the xmldom library was the best I could do at the time ... however, since I&#39;ve learned more about Gatsby&#39;s API, I can now understand why transforming the title on the frontend isn&#39;t the best idea.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;it&#39;s not performant. Users have to download that library before they see a rendered title. This has an impact on how fast people can see the rendered site ... Gatsby is all about performance, so this is a bad idea&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rendering on the frontend can cause issues. Sometimes rehydration doesn&#39;t work properly when you&#39;re doing heavy manipulation on the frontend ... that&#39;s why we have backends, after all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s a better way to do it:&lt;/p&gt;
&lt;p&gt;In your &lt;strong&gt;gatsby-node.js&lt;/strong&gt; file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { decode } from &#39;he&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in the &lt;code&gt;onCreateNode&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;createNodeField({
  node,
  name: &#39;renderedTitle&#39;,
  value: decode(node.title.rendered)
})
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Talk: How Were Using WordPress as a Headless CMS</title>
    <link href="https://example.com/posts/talk-how-were-using-wordpress-as-a-headless-cms/"/>
    <updated>2018-04-24T13:21:21Z</updated>
    <id>https://example.com/posts/talk-how-were-using-wordpress-as-a-headless-cms/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;m not a stranger to public speaking. But speaking on a technical subject? To people who are smarter than me? Not something I relish. Yet, I felt I had something to offer the WordPress community, so I volunteered to speak at one of the UK&#39;s biggest WordPress meetups, WordCamp London.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UPDATE: Here&#39;s the talk hosted on &lt;a href=&quot;http://wordpress.tv/&quot;&gt;Wordpress.tv&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;responsive-iframe-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://videopress.com/embed/XXuKwsPC&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;script src=&quot;https://videopress.com/videopress-iframe.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;Ever since starting my web development career I&#39;ve wanted to be in the place where I could help other developers out with their development dilemmas. It&#39;s taken me a long time to get to this stage, and it&#39;s only because of some great help from the following people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chris Geary&lt;/li&gt;
&lt;li&gt;David Hewitt&lt;/li&gt;
&lt;li&gt;Steve Woodall&lt;/li&gt;
&lt;li&gt;Louise Towler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s thanks to them imparting their knowledge and expertise (and sometimes their time), as well as others, that I have anything that might be considered worthy of sharing.&lt;/p&gt;
&lt;h2 id=&quot;the-talk&quot; tabindex=&quot;-1&quot;&gt;The Talk &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/talk-how-were-using-wordpress-as-a-headless-cms/#the-talk&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s a &lt;a href=&quot;https://indigotree.co.uk/how-use-wordpress-headless-cms/&quot;&gt;full writeup on the Indigo Tree website&lt;/a&gt;. I&#39;ll update this post with the video on WordPress TV when it&#39;s uploaded there.&lt;/p&gt;
&lt;p&gt;My talk covered these main points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is a headless (or decoupled) CMS&lt;/li&gt;
&lt;li&gt;Why use WordPress as a headless CMS&lt;/li&gt;
&lt;li&gt;Tools and process of building a headless site&lt;/li&gt;
&lt;li&gt;A basic example and some gotchas we found&lt;/li&gt;
&lt;li&gt;The Future is (probably) headless&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://2018.london.wordcamp.org/session/how-were-using-wordpress-as-a-headless-cms/&quot;&gt;You can find it on the conference website too.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-slides&quot; tabindex=&quot;-1&quot;&gt;The Slides &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/talk-how-were-using-wordpress-as-a-headless-cms/#the-slides&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Indigo Tree have &lt;a href=&quot;https://wpheadless.indigotree.co.uk/1&quot;&gt;kindly published the slides I made here&lt;/a&gt;. The slides are a case in point, because it&#39;s a GatsbyJS site with a WordPress backend! How&#39;s that for recursion ha ha!&lt;/p&gt;
&lt;h2 id=&quot;the-experience&quot; tabindex=&quot;-1&quot;&gt;The experience &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/talk-how-were-using-wordpress-as-a-headless-cms/#the-experience&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;... was terrifying, to say the least! I rattled through it all in less than 30 mins (I had been given 35 minutes), but there were some really great comments &amp;amp; questions from the audience that I found fascinating. I&#39;m currently planning a series of blog posts on some of the questions that were raised.&lt;/p&gt;
&lt;p&gt;Overall, even though this kind of thing doesn&#39;t come naturally to me, it&#39;s a way of creating a dialog with other great people in communities, and gives others a chance to think about new ways of working. And I enjoy that, as well as to think that maybe I&#39;m helping a few people to solve their development dilemmas.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>More Questions, Better Answers</title>
    <link href="https://example.com/posts/more-questions-better-answers/"/>
    <updated>2018-06-08T14:21:21Z</updated>
    <id>https://example.com/posts/more-questions-better-answers/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Working with a large FinTech organisation has taught me a lot about the potential loopholes and considerations around certain technical decisions that I have been asked to contribute to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the decisions that we have considered recently is how to deliver content into the new website we are building.&lt;/p&gt;
&lt;p&gt;Historically, this organisation have used CMSes only on the perhipery of the project; that is, the marketing team has a blog tht uses a popular CMS platform, other content is delivered via APIs. But the main site is plain HTML, with content embedded directly into HTML pages managed by a Ruby application.&lt;/p&gt;
&lt;p&gt;Initially, I pushed for a CMS, thinking it would be a great idea. However, I didn&#39;t stop to think about the question more deeply. An experienced technical lead said that a CMS &amp;quot;didn&#39;t solve problems we already have&amp;quot; and that it would introduce unneeded complexity into the project.&lt;/p&gt;
&lt;p&gt;I found this comment very interesting. Particularly because the world I&#39;ve previously been surrounded with has been dominated by the need for a CMS to manage content.&lt;/p&gt;
&lt;p&gt;With my current organisation, a very tech savvy company where about one quarter of the workforce are developers, was there a real need for a CMS?&lt;/p&gt;
&lt;p&gt;Given this comment, I was prompted to think: what problem &lt;em&gt;was&lt;/em&gt; I trying to solve with my recommendation?&lt;/p&gt;
&lt;h2 id=&quot;undo-the-answer&quot; tabindex=&quot;-1&quot;&gt;Undo the Answer &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/more-questions-better-answers/#undo-the-answer&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The charachter 无 (pronounced wú in Chinese or mu in Japanese) means more than just the negative, so writes author Dan Simmons. It&#39;s apparently more like a desire to &amp;quot;undo&amp;quot; what&#39;s already been said, or the absence of the object it refers to.&lt;/p&gt;
&lt;p&gt;I&#39;ve been trying to &amp;quot;undo the answer&amp;quot; in reorganising my mind to think more carefully and understand the questions I come up with.&lt;/p&gt;
&lt;p&gt;In reality, it&#39;s quite easy to propose an answer that might fit. The answer you propose &lt;em&gt;could&lt;/em&gt; be the correct one, particularly if you&#39;ve encountered a similar question in the past.&lt;/p&gt;
&lt;p&gt;But often this approach is flawed, and cracks in the process turn quickly to great gulfs which cause frustration and abandonment further along in the project.&lt;/p&gt;
&lt;p&gt;So what was I trying to solve? I ultimately decided it was two: separation of concerns, and with that the absence of a single source of truth.&lt;/p&gt;
&lt;h3 id=&quot;separation-of-concerns&quot; tabindex=&quot;-1&quot;&gt;Separation of Concerns &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/more-questions-better-answers/#separation-of-concerns&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By embedding our content in the markup, we were directly mixing content and page structure. This had already become complicated when we were tasked with extracting text from the website so that it could be re-written to match our new tone of voice.&lt;/p&gt;
&lt;p&gt;The agency wanted to be supplied with CSVs containing each page content. I got two thirds of the way into building a content scraper before realising that the markup was so unique, and the CSV so prescriptive, that that solution just wasn&#39;t going to be practical.&lt;/p&gt;
&lt;p&gt;Once again, solutions-based thinking hits a brick wall.&lt;/p&gt;
&lt;h3 id=&quot;single-source-of-truth&quot; tabindex=&quot;-1&quot;&gt;Single Source of Truth &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/more-questions-better-answers/#single-source-of-truth&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;React excels at maintaining a single source of truth for your code. The uptake of React as a framework has increased because it extols this approach.&lt;/p&gt;
&lt;p&gt;Whereas before you had HTML markup that could be altered by both your server-side code and client-side JavaScript, as well as CSS that could be altered by your JavaScript.&lt;/p&gt;
&lt;p&gt;What React does is bring those 3 elements into JavaScript itself. Now you have a clearer picture of what&#39;s going on because you are only working with one source of truth.&lt;/p&gt;
&lt;p&gt;However, content should stay firmly out of this equation wherever possible. The reason for that is how it&#39;s being manipulated.&lt;/p&gt;
&lt;p&gt;Content authors still have the need to work with the content, even after the deadline for &amp;quot;final copy&amp;quot; has passed. However, it&#39;s likely most of them won&#39;t know HTML, let alone JavaScript, and won&#39;t want to learn. It&#39;s not their job after all.&lt;/p&gt;
&lt;p&gt;To match the design and UX requirements of a project we need to split forms into different screens, present content in different &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s, and use interactive elements such as tabs, accordions and content sliders.&lt;/p&gt;
&lt;p&gt;We might want to serve different re-useable templates for different pages too.&lt;/p&gt;
&lt;p&gt;My solution of employing a CMS to do enable this was hitting on the idea, however inexpertly. So I framed it differently.&lt;/p&gt;
&lt;p&gt;Now, because I outlined the problems we&#39;re having accuratey, and a solution which doesn&#39;t add complexity (in fact it could reduce it), we&#39;re pursuing this route.&lt;/p&gt;
&lt;h2 id=&quot;unask-the-answer-not-the-question&quot; tabindex=&quot;-1&quot;&gt;Unask the Answer, Not The Question &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/more-questions-better-answers/#unask-the-answer-not-the-question&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Never fear running out of answers, only running out of questions&amp;quot;&lt;br /&gt;
— J Straczynski&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve decided that asking questions isn&#39;t to be feared or looked down upon, however silly the question may seem at the time. It&#39;s proposing the wrong solution ignorantly that leads to trouble.&lt;/p&gt;
&lt;p&gt;I&#39;m going to make more effort to think about questions more carefully. It&#39;s intent, background, even the thought process that prompted it.&lt;/p&gt;
&lt;p&gt;In that way, when it does come to solutions, I can make a more informed decision or recommendation about what could be a much more appropriate solution.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Content-Author friendly APIs with Strapi</title>
    <link href="https://example.com/posts/strapi-content-author-friendly-api/"/>
    <updated>2018-06-08T14:21:21Z</updated>
    <id>https://example.com/posts/strapi-content-author-friendly-api/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve worked in a few different capacities around the web, and can see the value of interfaces that those writing content for the web feel comfortable using. I&#39;m also becoming more comfortable with JavaScript, and want to find alternatives to the PHP tools I&#39;ve been using. On that journey, I discovered Strapi.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I think of content authors, I&#39;m specifically thinking about non-technical individuals who don&#39;t want to get involved in writing HTML. For these people, making or editing a Markdown file might be a disagreeable process. This is simply because they need to be in an envinronment that allows them to focus on their current task — writing an article, updating page content, publishing a job advert - without distraction. Or at least, with minimal distraction.&lt;/p&gt;
&lt;p&gt;I am sure this is one reason WordPress has gained the community it has:- it&#39;s easy to use, and makes the content author feel informed and empowered without them feeling like the software is getting in the way.&lt;/p&gt;
&lt;p&gt;The challenge for me has become to find some software - preferably open-source, definitely JavaScript - that can be a suitable environment for these kind of authors.&lt;/p&gt;
&lt;p&gt;And I think Strapi could be a very good fit indeed.&lt;/p&gt;
&lt;h2 id=&quot;how-strapi-works-for-content-authors&quot; tabindex=&quot;-1&quot;&gt;How Strapi Works for Content Authors &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#how-strapi-works-for-content-authors&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The 3 main requirements I had when analysing this project for a content authors&#39; perspective were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy to write &amp;amp; edit posts&lt;/li&gt;
&lt;li&gt;easy to restrict and enable access and authorship&lt;/li&gt;
&lt;li&gt;content authors feel in control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m going to cover these in more detail below.&lt;/p&gt;
&lt;h3 id=&quot;writing-and-editing-posts&quot; tabindex=&quot;-1&quot;&gt;Writing and Editing Posts &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#writing-and-editing-posts&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Logging in and authoring content in Strapi works very much like any other content platform. There&#39;s a left sidebar which you can use to navigate different types of content, and fields that you fill out that are clearly labeled, functional and give suitable feedback when you&#39;re filling them out, or saving posts, or just navigating around.&lt;/p&gt;
&lt;h3 id=&quot;author-roles-and-permissions&quot; tabindex=&quot;-1&quot;&gt;Author Roles and Permissions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#author-roles-and-permissions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;New authors can be defined by administrators, and access can be given to specific areas of the API.&lt;/p&gt;
&lt;p&gt;This allows us a key feature that I&#39;ve seen being particularly useful in larger applications: authors can write articles that can be reviewed before publication.&lt;/p&gt;
&lt;h3 id=&quot;authors-feel-in-control&quot; tabindex=&quot;-1&quot;&gt;Authors Feel In Control &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#authors-feel-in-control&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The thing that I felt conflicted most about WordPress was that it gave too much control to authors. The ability to add plugins and change the site&#39;s appearance made it a minefield for a developer.&lt;/p&gt;
&lt;p&gt;But WordPress made a deliberate choice to do that. WordPress&#39; aim is to &amp;quot;democratise publishing&amp;quot; so that anyone can have a blog or personal website.&lt;/p&gt;
&lt;p&gt;There&#39;s always a balance to be struck here: too restrictive and authors will go elsewhere, too open and you end up with a mess of a site that can cost thousands to fix.&lt;/p&gt;
&lt;p&gt;Strapi has a plugin ecosystem, which I hope will grow. Through their marketplace (which you can&#39;t miss, it&#39;s heavily promoted within the backend), you can add analytics tracking and other functionality, or purchase plugins which extend Strapi.&lt;/p&gt;
&lt;p&gt;This allows content authors and business owners to feel more in control of their project. Having these plugins means they&#39;re not totally dependent on others when it comes to extending their Strapi site.&lt;/p&gt;
&lt;p&gt;It makes authors feel that the site belongs to &lt;em&gt;them&lt;/em&gt; and not their developer.&lt;/p&gt;
&lt;p&gt;But, of course, it has to work for developers as well...&lt;/p&gt;
&lt;h2 id=&quot;how-strapi-works-for-developers&quot; tabindex=&quot;-1&quot;&gt;How Strapi Works For Developers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#how-strapi-works-for-developers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For Strapi to work for those with a development background, I am looking for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy API authorship&lt;/li&gt;
&lt;li&gt;extensible code&lt;/li&gt;
&lt;li&gt;ease of entry for newer developers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;api-authorship&quot; tabindex=&quot;-1&quot;&gt;API Authorship &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#api-authorship&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;API authorship can be done in 2 ways with Strapi. Either in the GUI or in the command line. This, I think, is a master stroke.&lt;/p&gt;
&lt;p&gt;Independently-minded content authors can define or destroy their own content fields, and entire &lt;em&gt;types&lt;/em&gt; as they wish, in a GUI that gives them adequate feedback about what&#39;s happening.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pic of Strapi backend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conversely, APIs can be set by the developer in a JavaScript object, without having to interact with the GUI at all.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A Strapi API definition
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is really great. By not forcing us down a single route, Strapi gets the best of both worlds.&lt;/p&gt;
&lt;h3 id=&quot;extensible-code&quot; tabindex=&quot;-1&quot;&gt;Extensible Code &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#extensible-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Calling to the strengths of a robust language that&#39;s well known, developers can modify Strapi to their hearts content, as long as they don&#39;t want to update the core. And if they do, they can also turn to authoring a plugin, and hook in to  Strapi in a way that separates our concerns out and allows us to write code in isolation.&lt;/p&gt;
&lt;p&gt;As I cautioned above, this could lead to Strapi being mis-used, and result in bloated or insecure code. However, Strapi&#39;s major advantage in this is that it is an API first, and a content authoring platform second.&lt;/p&gt;
&lt;p&gt;So whatever plugin authors do, they can never arbitratily affect the frontend of the website. Even if some malicious — or simply bad - code enters Strapi, rendering it unuseable, that needn&#39;t affect the frontend of the site at all, especially if it&#39;s a static site.&lt;/p&gt;
&lt;h3 id=&quot;good-for-newer-developers&quot; tabindex=&quot;-1&quot;&gt;Good For Newer Developers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#good-for-newer-developers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ultimately, developers are going to be the ones selling this product. We&#39;re the ones who hear about this new stuff and set expectations to decision makers about whether or not to use it.&lt;/p&gt;
&lt;p&gt;So it has to be accessible to a broad base, including (in my view) newer developers.&lt;/p&gt;
&lt;p&gt;I particularly frame this for newer developers not just to widen the catchment of a product but because it gives me a window into some other areas not directly related to the code: the helpfulness of the documentation, and a sense of community surrounding the project.&lt;/p&gt;
&lt;p&gt;It seems like a lot of effort has been made by the Strapi team to get clearly written and easy-to-follow documentation into the places where it can be found:- not just on the website and GitHub repo, but on 3rd party sites, like Medium, too.&lt;/p&gt;
&lt;p&gt;However, I have had difficulty with the documentation because it often refers to older versions of Strapi which are no longer maintained. I found this to be a bit of a minefield when I tried to initially use the Docker image that&#39;s available, and found the interface took me to the now-depracated Strapi Studio to create my APIs.&lt;/p&gt;
&lt;p&gt;I then deployed to Heroku using the Strapi 1-click deploy, and spent literally days trying to either modify the API or clone the site locally. Admittedly, this was less to do with Strapi than complications with using Heroku. However, it was a roadblock that delayed my using Strapi in production until I can fix that.&lt;/p&gt;
&lt;p&gt;To be fair, the community is very responsive and after joining the Slack channel I got answers to my questions very quickly.&lt;/p&gt;
&lt;h2 id=&quot;strapi-a-project-i-hope-will-grow&quot; tabindex=&quot;-1&quot;&gt;Strapi - A Project I hope will grow &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/strapi-content-author-friendly-api/#strapi-a-project-i-hope-will-grow&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Overall, I really believe the Strapi authors have done it right. It meets the needs of content authors and developers really well. Although the docs leave a little to be desired, the project itself is making good progress.&lt;/p&gt;
&lt;p&gt;Personally, I can&#39;t wait to see what the future of Strapi means for content creation on the web.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How Website Forms Work</title>
    <link href="https://example.com/posts/how-website-forms-work/"/>
    <updated>2018-07-06T13:21:21Z</updated>
    <id>https://example.com/posts/how-website-forms-work/</id>
    <content type="html">&lt;p&gt;HTML Forms are one of the most fundamental elements in the web builder&#39;s toolbox. It would be a rare website that doesn&#39;t use this element to complete any of the most basic tasks someone might want to achieve. But there&#39;s a lot that goes on behind the scenes. Here&#39;s a bit more of an in-depth look at what happens when you click &#39;Send&#39; on a form, and why you need some server-side code (somewhere) to handle that process.&lt;/p&gt;
&lt;p&gt;First of all, we need a short history lesson about the form HTML element.&lt;/p&gt;
&lt;h2 id=&quot;the-origin-of-forms&quot; tabindex=&quot;-1&quot;&gt;The Origin of Forms &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#the-origin-of-forms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element was originally intended to be used to post content directly to web pages. So a person visiting a web page could modify what they found there, adding to it, removing parts or all of it entirely.&lt;/p&gt;
&lt;p&gt;This feature never made it out of the lab. But it was a pretty neat, if not idealistic, concept. Imagine how different things would be if anyone could change your website. This kind of idea was eventually tried out by a few intrepid individuals, notably Wikipedia, who were allowed to edit pages without any checks or balances. Unfortunately it led to widespread abuse. The sites were often either shut down or restricted after a short period of time.&lt;/p&gt;
&lt;p&gt;But the basic need still remained: &lt;em&gt;as a website visitor I want to send my email address so that the website owner can contact me&lt;/em&gt; is the core one. There are many others: making a purchase, submitting a comment for display on the website, purchase an item, and more.&lt;/p&gt;
&lt;p&gt;People realised that they needed some method of collecting the data people had entered on their forms. They needed to validate it, making sure fields were filled out and not left blank, that they used a number where that was expected, a date when that was required etc. Then they needed to send that to an email address or other consumer so the person could be responded to, their comment displayed (or not), their order fulfilled, or whatever.&lt;/p&gt;
&lt;p&gt;That requirement led to the necessity for server-side code.&lt;/p&gt;
&lt;h2 id=&quot;server-side-form-validation&quot; tabindex=&quot;-1&quot;&gt;Server Side Form Validation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#server-side-form-validation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the earliest and most popular languages to tackle this issue was PHP. You could include some server-side code right there on the page. Now when someone clicked &amp;quot;send&amp;quot; or &amp;quot;submit&amp;quot;, the PHP would collect the data, format it as an email, then send it.&lt;/p&gt;
&lt;p&gt;It did this by the form&#39;s &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; attributes. The &lt;code&gt;method&lt;/code&gt; was usually a &lt;code&gt;POST&lt;/code&gt; request, a new entry to be added. The &lt;code&gt;action&lt;/code&gt; attribute could be set as a URL, either the page you were on, or another page, that when sent could be triggered.&lt;/p&gt;
&lt;p&gt;Then the PHP would receive that into the global &lt;code&gt;$_POST&lt;/code&gt; variable, where it could be processed.&lt;/p&gt;
&lt;p&gt;Now people could not only read messages from the website as if the person had merely sent them an email, but they could check the form had been filled out properly too. You didn&#39;t have to send it to an email address though. You could accept a payment, submit a comment for approval via a CMS, or connect with a CRM to collect and analyse leads.&lt;/p&gt;
&lt;p&gt;But these all required server-side code. Some application or at least a single function that would start running when the form action was triggered by someone pressing &amp;quot;submit&amp;quot;.&lt;/p&gt;
&lt;p&gt;Great! Unless you have no server-side code.&lt;/p&gt;
&lt;h2 id=&quot;jamstack-caveat&quot; tabindex=&quot;-1&quot;&gt;JAMStack Caveat &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#jamstack-caveat&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Going &amp;quot;Serverless&amp;quot;, using the &amp;quot;JAMStack&amp;quot; means, in effect, going back to the roots of the web. We are approaching websites once more as we did before we had server-side code.&lt;/p&gt;
&lt;p&gt;Though this has huge benefits, there are new (and perhaps old) issues to overcome. The primary one being, &amp;quot;how do we validate, process and send form data?&amp;quot;&lt;/p&gt;
&lt;h2 id=&quot;processing-forms-using-client-side-code&quot; tabindex=&quot;-1&quot;&gt;Processing Forms Using Client-Side Code &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#processing-forms-using-client-side-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some people realised that once you submit code to your server, you can gain access to that server remotely and do nefarious things to it. This was entirely dependent on how well people had written their server code, but there were often flaws to be found and exploited.&lt;/p&gt;
&lt;p&gt;This resulted in website owners starting to validate code on the client using JavaScript before the form data was submitted. Now form submissions could be more sanitised before they got to the server, and also feedback for the person filling out the form could be much faster. You could tell them it wasn&#39;t valid as they were typing, instead of waiting until after they clicked &amp;quot;send&amp;quot;.&lt;/p&gt;
&lt;p&gt;You might think we can therefore use client-side JavaScript to submit form data. But the trouble with client-side code is that &lt;em&gt;it is all public&lt;/em&gt;. And therefore it can be manipulated by someone to perform actions you don&#39;t want to happen. For instance, someone could change the URL, and they might get lucky, hitting another API endpoint that exposes a vulnerability. Or they could modify the form data to contain malicious code that takes control of your computer via your email client.&lt;/p&gt;
&lt;p&gt;That would be bad.&lt;/p&gt;
&lt;p&gt;So we still need some way of submitting code via a &lt;em&gt;private&lt;/em&gt; resource. Something that isn&#39;t visible or accessible by everyone.&lt;/p&gt;
&lt;h2 id=&quot;form-submission-without-a-server&quot; tabindex=&quot;-1&quot;&gt;Form Submission Without a Server &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#form-submission-without-a-server&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We currently have a few options when it comes to serverless form processing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; Use a 3rd party service
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; Use a 3rd party function
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s all about how much &lt;em&gt;control&lt;/em&gt; you want, &lt;em&gt;budget&lt;/em&gt; constraints you have and what you need to achieve.&lt;/p&gt;
&lt;h3 id=&quot;popular-3rd-party-services&quot; tabindex=&quot;-1&quot;&gt;Popular 3rd Party Services &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#popular-3rd-party-services&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even before the advent of serverless, there were 3rd parties that offered form processing as a service. These are usually paid-for, often use their own form code (with varying standards), often with a version you can modify via their parameters or CSS rules.&lt;/p&gt;
&lt;p&gt;Wufoo is probably the oldest of these. But there&#39;s also Typeform, Mailchimp and others. If you use Netlify, you can use their Forms system, for which implementation is extremely easy.&lt;/p&gt;
&lt;p&gt;However there are often restrictions with these services. Some plans begin to get expensive quickly. Other features you may require, for example, sending a receipt confirmation to the sender, are impossible, or are branded with the providers&#39; details.&lt;/p&gt;
&lt;p&gt;Another option is to write your own function.&lt;/p&gt;
&lt;h3 id=&quot;3rd-party-functions&quot; tabindex=&quot;-1&quot;&gt;3rd Party Functions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#3rd-party-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the advent of Serverless, you can now submit your form to a URL that contains a form processor running in isolation from any other code, inside its own &amp;quot;container&amp;quot;, or virtual server instance.&lt;/p&gt;
&lt;p&gt;Amazon Web Services have their popular version called Lambda. Microsoft has Azure. There&#39;s also Heroku, owned by Salesforce. All of these provide an environment of server side code of your choice (PHP, Node, Go etc, with different release versions). This means you can write your own form processor, specify your environment language and any variables you want to utilise, and then deploy it.&lt;/p&gt;
&lt;p&gt;This allows you complete control over everything you might want to do with your form. An added bonus is that it is run independently of the website (so no application load time for your users), and can be modified independently at any time.&lt;/p&gt;
&lt;p&gt;In this case the form &lt;code&gt;method&lt;/code&gt; will still be &lt;code&gt;POST&lt;/code&gt;, but the &lt;code&gt;action&lt;/code&gt; parameter will be the URL of the serverless function.&lt;/p&gt;
&lt;p&gt;Often these services are low-cost, meaning you only pay for the server time you actually use. Processing time is often sandboxed to 1 minute (probably much more than enough to interfere with this use case), and there is no server infrastructure to worry about.&lt;/p&gt;
&lt;p&gt;An extra benefit is that if form submissions become extra busy, with concurrent POST requests,  the function container will be duplicated enough times to meet demand. Automatically.&lt;/p&gt;
&lt;p&gt;It&#39;s out of scope for this article how to write a serverless function. However, it&#39;s just a normal piece of code that you might want to implement anywhere.&lt;/p&gt;
&lt;h2 id=&quot;form-the-future&quot; tabindex=&quot;-1&quot;&gt;Form The Future &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/how-website-forms-work/#form-the-future&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Form have had a long history on the web. Now we&#39;re approaching things from a serverless perspective, we can address the needs of people who use our websites in a much more robust way by abstracting away what holds them back from interacting with our site.&lt;/p&gt;
&lt;p&gt;At the same time, it doesn&#39;t harm those who might have the advantage of a speedy network connection, and won&#39;t notice the difference.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>From PHP to JavaScript: How I Switched Stacks</title>
    <link href="https://example.com/posts/php-to-javascript-how-i-switched-stacks/"/>
    <updated>2018-08-08T13:21:21Z</updated>
    <id>https://example.com/posts/php-to-javascript-how-i-switched-stacks/</id>
    <content type="html">&lt;p&gt;I&#39;ve been working in web development for the past 8 years or so. Traditionally, I have worked at agencies, creating sites that have been designed in Photoshop, and built afterwards with a CMS integration such as Perch, WordPress, or similar, with occasional forays into Laravel.&lt;/p&gt;
&lt;p&gt;During that time I&#39;ve had the opportunity to work with JavaScript too. But understanding the language well seemed a bit beyond my grasp. One of the reasons for this was, I think, that I was trying to juggle several languages at once. I spent a lot of time understanding design patterns in PHP. Then, after I interviewed at Google, I decided to focus more deeply on CSS and HTML. And with these PHP projects, a lot was done in that language, leaving JavaScript as a vehicle for presentational enhancement only.&lt;/p&gt;
&lt;p&gt;But then, because of concerns about WordPress&#39; future, Indigo Tree, the agency I was working for, invested time for its developers into finding a possible alternative to that popular platform. Lead developer Chris Geary saw an opportunity here. Instead of trying to replace WordPress with another platform in a 1:1 comparison, he realised we could deliver serverless sites using some cutting-edge tools that were emerging.&lt;/p&gt;
&lt;h2 id=&quot;investigating-serverless&quot; tabindex=&quot;-1&quot;&gt;Investigating Serverless &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/php-to-javascript-how-i-switched-stacks/#investigating-serverless&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This approach had the advantage of allowing a transition: the agency could keep selling and building WordPress sites (they&#39;d been doing this for 10 years and were comfortable with it), but these sites would have a separate front-end using the headless CMS strategy. It also allowed them a marketing opportunity: headless was a buzzword, they could position themselves as a thought leader and gain reputation from that.&lt;/p&gt;
&lt;p&gt;So began my journey to serverless. I was introduced to Netlify, and promptly moved my sites from PHP to static, which allowed me to see the benefits of continuous integration, and saving myself a monthly hosting fee in the process.&lt;/p&gt;
&lt;p&gt;I experimented with Jekyll and Hugo, but I didn&#39;t see a future for me in either of these languages (Ruby and Go, respectively).&lt;/p&gt;
&lt;p&gt;Then Chris started talking about Gatsbyjs. So I built a Gatsby site, &lt;a href=&quot;http://freebabylon5.com/&quot;&gt;FreeBabylon5.com&lt;/a&gt;. As mentioned, I hadn&#39;t done a huge amount of heavy lifting in JavaScript before. I&#39;d only toyed with React. I had no idea what I was doing and that felt awesome.&lt;/p&gt;
&lt;p&gt;As I learned Gatsbyjs I noticed a typo in the docs and submitted an issue. I was invited to fix the issue myself and submit a pull request. I had never done anything like this before! Cloning an open-source project, branching off so I could fix the issue, pushing up my code and submitting a Pull Request ... wow. With this new knowledge I felt like I was finally able to give back to some of the amazing tools I&#39;d so often used in the past.&lt;/p&gt;
&lt;h2 id=&quot;documenting-the-experience&quot; tabindex=&quot;-1&quot;&gt;Documenting the Experience &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/php-to-javascript-how-i-switched-stacks/#documenting-the-experience&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My personal view is that I should document everything I learn, in the hopes that someone else might be able to benefit from my experience. So I started writing about my explorations here on delicious reverie.&lt;/p&gt;
&lt;p&gt;To my amazement the creators of Gatsbyjs read my post and asked me to publish it on the Gatsbyjs blog. This gave me more confidence to progress further along this path, invest in my own learning towards JavaScript and using Gatsbyjs for more projects.&lt;/p&gt;
&lt;p&gt;Around the same time, my colleagues and I became more concerned for developers using WordPress. It seemed that many of them could soon be pushed out of that platform for reasons I&#39;ll explain in another post. We wanted to help them identify another route that would also encourage best practices in web development.&lt;/p&gt;
&lt;p&gt;So I submitted a talk outline for WordCamp London, which is usually attended by 400-500 developers. I also approached print magazine Net on the same subject. Both the talk and the article were accepted. I soon found myself on the main stage at the conference delivering a 40-minute talk, and saw my material published in the print magazine.&lt;/p&gt;
&lt;p&gt;I get so terrified about pushing myself forward in these ways, especially because I was new at all of this. But I felt I had something that could potentially help some other people. That motivated me to overcome my abject fear.&lt;/p&gt;
&lt;h2 id=&quot;zopa&#39;s-serverless-initiative&quot; tabindex=&quot;-1&quot;&gt;Zopa&#39;s Serverless Initiative &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/php-to-javascript-how-i-switched-stacks/#zopa&#39;s-serverless-initiative&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Around this time peer-to-peer lender Zopa were looking to replace a Ruby app with a static website. So they approached me directly and called me for several weeks until I finally had time to hear what they were trying to say.&lt;/p&gt;
&lt;p&gt;Zopa had already identified Gatsbyjs as their tool of choice because they had lots of in-house JavaScript and React expertise. They had partnered with an agency to design and build the site, and wanted me on board to help develop it  because of my experience with the framework. I&#39;ll be able to tell you more about the site when it launches, but it&#39;s been a great experience working with some excellent and incredibly smart people both at the agency and at Zopa.&lt;/p&gt;
&lt;p&gt;I&#39;ve had to learn a lot in a short space of time, but Zopa have been supportive and patient with my learning experience. In return, I&#39;ve been able to help identify where Gatsby&#39;s APIs can be used to great effect instead of a custom solution that renders content on the frontend. I&#39;ve been able to help other developers explore the GraphQL syntax and use Gatsbyjs&#39;s built-in IDE to query the data structure. And I&#39;ve helped identify where opportunities to use functions hosted on other platforms enable us improve performance.&lt;/p&gt;
&lt;p&gt;What I&#39;ve most enjoyed is seeing those &amp;quot;wow&amp;quot; moments as developers really &lt;em&gt;get&lt;/em&gt; GatsbyJS, and how, because of it&#39;s approach to data, it&#39;s not just a static site generator, it&#39;s much more than that.&lt;/p&gt;
&lt;p&gt;So now, instead of working with agencies on predominantly PHP projects I&#39;m a JavaScript dev working in central London. The deadlines are just as tight, the pressure to deliver can sometimes be much more, and learning a complicated custom-built infrastructure has been a challenge. But I&#39;ve really enjoyed experiencing things from this side of the fence.&lt;/p&gt;
&lt;p&gt;I&#39;m continuing to work with internal teams at Zopa to give them the opportunity to contribute to the project. I&#39;m really hoping I can do more with GatsbyJS as a contributor. And I&#39;m glad to say that in spite of missing the close-knit community of developers I&#39;ve been around up until now, I&#39;m happier being focused on JavaScript than I&#39;ve ever been.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Serverless Content Authoring with StrapiJs</title>
    <link href="https://example.com/posts/serverless-content-authoring-with-strapijs/"/>
    <updated>2018-08-18T13:21:21Z</updated>
    <id>https://example.com/posts/serverless-content-authoring-with-strapijs/</id>
    <content type="html">&lt;p&gt;For years, WordPress has been the de facto standard for content authoring on the web. The reasons for this are many, but principal among them is it&#39;s clean, easy-to-use interface that gives content authors control over nearly every aspect of their content. WordPress isn&#39;t going away, but hosting and maintaining it safely can be a challenge.&lt;/p&gt;
&lt;p&gt;At the organisation I work for, we have a WordPress blog, but almost no PHP expertise as we were moving from Ruby towards a JavaScript stack. We also have another service that used a WordPress-like interface, but were tied into expensive hosted services - which was deprecated, and yet still fulfilled an essential function as a core part of our content strategy.&lt;/p&gt;
&lt;p&gt;For this reason, I started to investigate a way of amalgamating this content into one location, on one platform (preferably JavaScript), with an API so that I could pull in content to our static site built with Gatsbyjs.&lt;/p&gt;
&lt;h2 id=&quot;the-elusive-dashboard&quot; tabindex=&quot;-1&quot;&gt;The Elusive Dashboard &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#the-elusive-dashboard&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are lots of services out there that could have fulfilled our requirements, but all of these stored content on another platform, an approach we patently wanted to avoid. For that reason, services like &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt;, &lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt;, and even &lt;a href=&quot;https://www.sanity.io/&quot;&gt;Sanity&lt;/a&gt; with its installable api and hosted backend, were out of the equation.&lt;/p&gt;
&lt;p&gt;Instead I looked into dashboard / content authoring UIs that we could build an API around. I saw that &lt;a href=&quot;https://github.com/yogiben/meteor-admin&quot; title=&quot;A complete admin dashboard solution&quot;&gt;Meteorjs had an open-source project  in this vane&lt;/a&gt;, but that there really weren&#39;t that many active projects on NPM that we could utilise.&lt;/p&gt;
&lt;p&gt;Then I discovered Strapi.&lt;/p&gt;
&lt;h2 id=&quot;a-content-interface&quot; tabindex=&quot;-1&quot;&gt;A Content Interface &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#a-content-interface&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Strapi quickly started looking like it was a product that could fit our requirements. A self-hosted, API-focused system with a well designed dashboard and a useable interface. I particularly liked that we could create content types on the frontend, designate the fields, and start using them straight away.&lt;/p&gt;
&lt;p&gt;Strapi showed promise, however version 1 was depracated, v2 hadn&#39;t made it out of the door, and v3 was still in Alpha release stage. This is a cause for concern, however the team were progressing with a good deal of focus on fulfilling key user needs. I decided I would get involved in the project and start using it for personal work.&lt;/p&gt;
&lt;h2 id=&quot;deploying-strapi-on-heroku&quot; tabindex=&quot;-1&quot;&gt;Deploying Strapi on Heroku &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#deploying-strapi-on-heroku&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since my  focus over the past few years has been Severless technology, I wanted to deploy Strapi on &lt;a href=&quot;https://www.heroku.com/&quot; title=&quot;Cloud application platform&quot;&gt;Heroku&lt;/a&gt;, a managed platform with a generous free tier that allows you to host applications in a raft of different languages, from PHP and Ruby, to Go and JavaScript.&lt;/p&gt;
&lt;p&gt;Fortunately for me, there&#39;s already a decent &lt;a href=&quot;https://github.com/strapi/strapi/&quot; title=&quot;Strapi Github repo&quot;&gt;Strapi starter for Heroku&lt;/a&gt;,  which is advertised right on the Strapi repo readme. One click and I had started my own Heroku instance, using &lt;a href=&quot;https://mlab.com/&quot; title=&quot;Database-as-a-service by Mlab&quot;&gt;mLab&lt;/a&gt; to host the MongoDB database, all connected up and ready to be used.&lt;/p&gt;
&lt;p&gt;This is great for giving Strapi a spin, but I wanted this to be my content platform. To do that I needed to create my own fields and add some new content types. I added some, only to find they&#39;d rolled back again afterwards. I tried uploading images, to find they disappeared after a few hours. What was happening?!&lt;/p&gt;
&lt;p&gt;What I hadn&#39;t realised is that Heroku&#39;s file system is ephermeral, which means data stored there won&#39;t persist. You application&#39;s instance can be destroyed and rebuilt from the git store depending on Heroku&#39;s, or your, needs. So making changes to the API, storing images locally, or even data, needs to be done differently.&lt;/p&gt;
&lt;p&gt;The core issue was that I needed to clone the site locally, add my changes, then  to Heroku&#39;s Git repo, and push it to Heroku&#39;s repo.&lt;/p&gt;
&lt;h2 id=&quot;cloning-locally&quot; tabindex=&quot;-1&quot;&gt;Cloning Locally &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#cloning-locally&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cloning the Heroku build pack so you can work on it locally is a bit tricky. I &lt;a href=&quot;https://help.heroku.com/XOBUHLKQ/why-do-i-see-a-message-you-appear-to-have-cloned-an-empty-repository-when-using-heroku-git-clone&quot; title=&quot;Why do I see a message &#39;You appear to have cloned an empty repository&#39; when using heroku git:clone?
&quot;&gt;found this helpful guide&lt;/a&gt; and worked through it, and eventually I was able to spin up my Strapi app locally.&lt;/p&gt;
&lt;p&gt;I work on Linux, and I had to be careful when installing MongoDB locally. This is because I needed to add MongoDB via the APT package manager, and I inadvertently tried to install a version meant for older Linux OSes. So I broke my computer and had to re-install the OS.&lt;/p&gt;
&lt;p&gt;After that, I decided to stick with the remote service mLab until I can decipher the Docker documentation and get it all running together inside a container.&lt;/p&gt;
&lt;p&gt;Once done, I was able to add  content types and fields, and add &lt;a href=&quot;https://cloudinary.com/&quot; title=&quot;image and video storage, optimization and CDN&quot;&gt;Cloudinary&lt;/a&gt; as an image storage provider, and push my changes to Heroku.&lt;/p&gt;
&lt;h2 id=&quot;querying-the-api&quot; tabindex=&quot;-1&quot;&gt;Querying the API &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#querying-the-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One last hurdle remained, which was to query the API from GatsbyJS. To start with, I found I kept geting 401 Unauthorised notifications. This is because every content type you define is private by default. You have to enable the public user, or submit auth details, in order to query the data. &lt;a href=&quot;https://strapi.io/documentation/getting-started/quick-start.html#consume-your-api&quot; title=&quot;Strapi Quick Start: Consume your API&quot;&gt;Here&#39;s a handy guide on how to do that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That was it, I now had a fully functional API hosted for free on Heroku. I could start the app (Heroku&#39;s free tier means that you app will sleep until its needed), run Gatsbyjs, and get my data using the gatsby-source-strapi plugin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/strapi-interface.png&quot; alt=&quot;Strapi&#39;s interface.&quot; title=&quot;The Strapi content editor&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;strapi-ready-for-production&quot; tabindex=&quot;-1&quot;&gt;Strapi - Ready for Production? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/serverless-content-authoring-with-strapijs/#strapi-ready-for-production&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I write this, Strapi is moving steadily towards an initial Beta release. It&#39;s positioning - a self-hosted API dashboard and content authoring platform - is pretty much unique in the JavaScript world. I&#39;m using it to store content for my new personal site &lt;a href=&quot;https://discovermikeoldfield.info/&quot;&gt;https://discovermikeoldfield.info&lt;/a&gt;, and I&#39;m putting it forward at work as a replacement (and enhancement) over those separate, difficult to maintain or retired APIs I mentioned at the start.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;this is a product that&#39;s very much in development&lt;/strong&gt;, and there are certain inconsistencies to watch out for. Plugins and even features may change frequently. I had some serious issues with the date picker in the version I was using, and I couldn&#39;t get the Cloudinary plugin to work so I instead created a text field and uploaded my images to Cloudinary independently.&lt;/p&gt;
&lt;p&gt;However, it still met my requirements and proved to be a product I recommend investigating, and using if it meets your requirements. If you are after this type of thing I ask you to be generous with your support for the time and money the contributors have put into it. It takes not only serious programming chops but also a good investment in design for such a thing to be useable, and I think the Strapi team have achieved that.&lt;/p&gt;
&lt;p&gt;It&#39;s still a little rough around the edges as you might expect from software still in prerelease. But it&#39;s filling a huge gap in the market and that&#39;s pretty unique. Strapi is definitely shaping up to be a tool I am going to be using frequently in the future.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://strapi.io/&quot;&gt;Strapi website&lt;/a&gt; • &lt;a href=&quot;https://github.com/strapi/strapi/&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Future of WordPress</title>
    <link href="https://example.com/posts/future-of-wordpress/"/>
    <updated>2018-08-28T13:21:21Z</updated>
    <id>https://example.com/posts/future-of-wordpress/</id>
    <content type="html">&lt;hr /&gt;
&lt;p&gt;I have strong opinions on WordPress and the imminent replacement for the classic editor, Gutenberg. I haven&#39;t waded into this discussion explicitly. However, I&#39;m no longer developing with WordPress, and the two things are connected.&lt;/p&gt;
&lt;p&gt;WordPress&#39; aim has always been to &amp;quot;democratise publishing&amp;quot;, to make writing and publishing content available to everyone. This answers the core goal of what the internet was supposed to be: giving individuals the ability to publish their own content.&lt;/p&gt;
&lt;p&gt;Gutenberg is a significant step along this direction. It will allow content authors to design their own pages. They&#39;ll be able to put buttons, multiple columns of content, images and other embedded content wherever they like, instead of being supplied a few templates created by their developer. Eventually the aim of the project is to allow content authors to modify, or perhaps even build, content outside the page - headers, footers and sidebars.&lt;/p&gt;
&lt;p&gt;This is a really great move and puts WordPress squarely in front of its core user target: content authors. With this new tool and the  weight of its already hefty reputation, WordPress can continue to stay relevant to its users.&lt;/p&gt;
&lt;p&gt;But that&#39;s the thing ... it&#39;s &lt;em&gt;users&lt;/em&gt;. We&#39;re talking about the end user. Not the people with whom people often get to know the platform: developers and design agencies.&lt;/p&gt;
&lt;h2 id=&quot;what-gutenberg-means-for-web-developers&quot; tabindex=&quot;-1&quot;&gt;What Gutenberg Means for Web Developers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/future-of-wordpress/#what-gutenberg-means-for-web-developers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When content authors can design their own pages and entire sites, the job of the web developer who works with WordPress will be both easier, and more difficult. Easier, because content authors will have all they need to do what they want almost out of the box. More difficult, because the majority of users will be those experimenting with the features WordPress introduces. I imagine a lot of them will end up breaking their sites, or rendering them into quite a different state than they were originally. I can imagine a lot of frustrated developers being asked to &amp;quot;put back&amp;quot; their sites to the way it was before they started fiddling with it.&lt;/p&gt;
&lt;p&gt;But that&#39;s nothing to how it&#39;s probably going to affect web design agencies.&lt;/p&gt;
&lt;h2 id=&quot;what-gutenberg-means-for-web-design-agencies&quot; tabindex=&quot;-1&quot;&gt;What Gutenberg Means for Web Design Agencies &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/future-of-wordpress/#what-gutenberg-means-for-web-design-agencies&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of all those affected by WordPress&#39; imminent changes, I&#39;m most interested in how this impacts the small to medium design agency, who have been selling WordPress sites for years. For many of them, it&#39;s been a bit of a free lunch: WordPress can be a fully featured CMS platform that you don&#39;t have to pay for. You only need a few days&#39; worth of web developer time, and you have a mature product that you can sell at a good margin.&lt;/p&gt;
&lt;p&gt;But imagine for a moment you&#39;re Matt Mullenweg, or are on the core team of WordPress developers. You&#39;ve seen hundreds if not thousands of commercial interests selling stuff - stuff you have made to be free - and what&#39;s more, often selling it to your core audience.&lt;/p&gt;
&lt;p&gt;I&#39;m sure that would upset most product owners.&lt;/p&gt;
&lt;p&gt;For this reason, I think we can expect to see WordPress making more effort to reconnect with it&#39;s core audience over the coming years. Often this may be at the expense of the web development agency. To my mind, this isn&#39;t a bad thing. WordPress has recently reiterated it&#39;s position as a &lt;em&gt;blogging platform&lt;/em&gt;, not a CMS. It&#39;s driving more users to it&#39;s hosted sites on &lt;a href=&quot;http://wordpress.com/&quot;&gt;wordpress.com&lt;/a&gt;, or quasi-hosted services like Jetpack. It&#39;s bought up large integrations like WooCommerce and WP Job Manager which then work with a remote service to monitor and partly manage the software.&lt;/p&gt;
&lt;p&gt;That&#39;s a trend that&#39;s only going to continue.&lt;/p&gt;
&lt;p&gt;I think that for web dev agencies, the end of the free lunch is in sight. Many agencies are likely to rethink their tech strategies. I hope they might be inspired to turn to either mature or even some emerging technologies that more than adequately fill the space that WordPress has occupied up until now.&lt;/p&gt;
&lt;h2 id=&quot;end-(or-beginning)-of-a-trend&quot; tabindex=&quot;-1&quot;&gt;End (or Beginning) of a Trend &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/future-of-wordpress/#end-(or-beginning)-of-a-trend&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Is that really what&#39;s happening here? Am I simply making a big assumption?&lt;/p&gt;
&lt;p&gt;I could be.&lt;/p&gt;
&lt;p&gt;But I think about how long it took a developer tool, wp-cli, the WordPress command line interface, to be made official, in contrast to the hot property that is Gutenberg, which is steam rolling towards release despite concerned reports from members of the development community and some pretty noisy protestations from design agencies who will either have to support older versions of WordPress, or spend money upgrading each site.&lt;/p&gt;
&lt;p&gt;Who is the core audience here? Are WordPress looking to improve developer experience ... or are they more invested in the experience of the content author? Are they even worried about how this will affect design agencies? It doesn&#39;t seem they are worried even one bit.&lt;/p&gt;
&lt;p&gt;It might be good to look more closely at - not WordPress, but where WordPress itself is looking - to gauge their direction. Noisy spats with Wix over their products make me think that WordPress see them as a competitor: an entirely hosted service which nonetheless has a similar proposition, that of &amp;quot;build your own website&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;time-for-a-change&quot; tabindex=&quot;-1&quot;&gt;Time for a Change? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/future-of-wordpress/#time-for-a-change&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In spite of what many developers and design agencies have been asking, I don&#39;t think WordPress needs to change. I think web design agencies are the ones who need to reevaluate their approach.&lt;/p&gt;
&lt;p&gt;For a long time, agencies have in many ways been snacking on the free lunch that is WordPress. This has been good for the establishment and growth of many companies. But I&#39;ve also seen the opposite, when larger firms grow complacent of the fact that WordPress is free, is stable, and cheap to hire for.&lt;/p&gt;
&lt;p&gt;Perhaps now is a good time to change that. Perhaps this is one of the reasons WordPress is challenging that.&lt;/p&gt;
&lt;p&gt;Developers, if I&#39;m right and this does start to happen, WordPress development work could start to peter out. You might need to decide whether you need to switch technologies. There&#39;s loads happening both in the PHP field with Craft, Perch and Laravel. But there&#39;s also serverless or JAMStack approaches to consider. Exciting stuff that is also challenging and satisfying. You never know where you might find your niche.&lt;/p&gt;
&lt;p&gt;Yes I could be totally wrong. But for the sake of WordPress, not to mention the content authors who benefit from it, I hope I&#39;m right.&lt;/p&gt;
&lt;p&gt;WordPress isn&#39;t going away any time soon. But I really believe the free lunch soon will.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Atomic Development</title>
    <link href="https://example.com/posts/atomic-web-development/"/>
    <updated>2018-10-04T13:21:21Z</updated>
    <id>https://example.com/posts/atomic-web-development/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Structuring components in a reusable, discoverable way has been a challenge for some recent projects I&#39;ve worked on. I&#39;ve seen different approaches used, but now I think I&#39;ve found a method that&#39;s basically intuitive, avoids duplication of effort and facilitates easy discovery of components.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I didn&#39;t come up with this approach. &lt;a href=&quot;https://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Brad Frost published the book &amp;quot;Atomic Design&amp;quot; 2 years ago&lt;/a&gt;, and I was fascinated with his idea, that you break down your components to the smallest reusable unit, then build them up again piece by piece. Just as living organisms are made up of atoms, then molecules, then larger entities until you get the complete creature.&lt;/p&gt;
&lt;p&gt;I tried this approach on a recent React project, and want to outline some of it&#39;s benefits. It&#39;s important to note that I don&#39;t believe it&#39;s 100% the best approach, since I don&#39;t think there is one. What I do want to show is where it&#39;s useful, where it isn&#39;t, and hopefully what those limitations are.&lt;/p&gt;
&lt;h2 id=&quot;the-atomic-design-approach&quot; tabindex=&quot;-1&quot;&gt;The Atomic Design Approach &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#the-atomic-design-approach&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Brad Frost&#39;s book outlined a way to structure the design of a project based on building things up from the smallest component part.&lt;/p&gt;
&lt;p&gt;For example, this could be an input field. Input fields are never used on their own, so the next item up the scale would be an input field and a label. This would be your atom and molecule respectively.&lt;/p&gt;
&lt;p&gt;You could keep building upwards in this way so that you eventually had a fully designed page using a template which contained your complete form (an organism) which is made up of your separately designed molecules.&lt;/p&gt;
&lt;p&gt;This approach could help designers think more about the patterns they are building into a project, instead of treating every item as separate compositions, which would then require a lot more work from the development team and time and money from the project owner.&lt;/p&gt;
&lt;p&gt;But I believe we can utilise this approach in development so that there&#39;s more cross-functional collaboration between design and development. And it can also help developers structure their projects well.&lt;/p&gt;
&lt;h2 id=&quot;atomic-development&quot; tabindex=&quot;-1&quot;&gt;Atomic Development &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#atomic-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a recent project I decided to investigate whether this approach could be uilised in development. In my React project I typically use Styled Components to write my CSS styles. I therefore structured my project like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- components/
  - Atoms
  - Molecules/
  - Organisms/
  - Templates/
  - Pages/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;atoms&quot; tabindex=&quot;-1&quot;&gt;Atoms &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#atoms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Atoms I designated as constants which could receive props. For example, a paragraph that had a prop for the text colour.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Paragraph &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;      props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  font-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REGULAR&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  margin-bottom: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SINGLE&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  &amp;amp; small {&lt;br /&gt;    color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BRAND_HILIGHT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  }&lt;br /&gt;  &gt; a {&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;      props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    text-decoration: underline;&lt;br /&gt;    &amp;amp;:hover,&lt;br /&gt;    &amp;amp;:active,&lt;br /&gt;    &amp;amp;:focus {&lt;br /&gt;      color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BRAND_HILIGHT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I kept all of these in a single file because I initially believe there wouldn&#39;t be too many small components, and they were so tiny they didn&#39;t justify having a separate file for each.&lt;/p&gt;
&lt;p&gt;I now believe that approach wasn&#39;t the best one. As I got further involved in development, and I had built up a larger library of components, I struggled to remember what I had designated as an Atom, and what was a Molecule. In future, I&#39;m going to separate these components into individual files to facilitate easier discovery.&lt;/p&gt;
&lt;h3 id=&quot;molecules&quot; tabindex=&quot;-1&quot;&gt;Molecules &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#molecules&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Molecules consist of stateless functional components, often comprising of several Atomic elements and usually some custom Atoms that relate to that specific Molecule.&lt;/p&gt;
&lt;p&gt;This is a &amp;quot;popout&amp;quot; section, which has a custom MainContainer element that&#39;s only used in this Molecule. It can accept multiple props and can wrap other components.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; MainContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  width: 100%;&lt;br /&gt;  background-color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BRAND_PRIMARY&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  height: 100%;&lt;br /&gt;  padding: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SINGLEplusHALF&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  text-align:center;&lt;br /&gt;  color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BRAND_HILIGHT&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  border-radius:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;corner &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;corner &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RADIUS_CORNER&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  position: relative;&lt;br /&gt;  background-size:cover;&lt;br /&gt;  background-position: 50% 50%;&lt;br /&gt;&lt;br /&gt;  @media (min-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BREAK_TABLET&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;    padding: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NarrowView &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;QUAD&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SEXTUPLE&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;QUAD&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;PopOut&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MainContainer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;background &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;backgroundImage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;background&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;MainContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; PopOut&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;organisms&quot; tabindex=&quot;-1&quot;&gt;Organisms &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#organisms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As we get to organisms, we start to see Classes being used, bringing in several Molecules and atoms, often with components that render on the frontend as well as server.&lt;/p&gt;
&lt;p&gt;This is a carousel component. It had several smaller components and so many unique styles that they were collocated within a folder.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CardsCarousel&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Main&lt;br /&gt;        style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundimg&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;backgroundImage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundimg&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;backgroundSize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MainTextContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HeadingSecondary textColor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heading &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Recent News&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;HeadingSecondary&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Paragraph textColor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textColor&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Content.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Paragraph&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/news/&quot;&lt;/span&gt; white&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;              Read more articles&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;MainTextContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CardsContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Carousel lightBubbles &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CAROUSEL_SETTINGS_LARGE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Card key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; data&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Carousel&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;CardsContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Main&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; CardsCarousel&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;partials&quot; tabindex=&quot;-1&quot;&gt;Partials &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#partials&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I developed this project, I realised there was an extra item which I didn&#39;t feel fitted into either Organisms or Templates. These were the site&#39;s headers, footer, and a parent component called Layout which would wrap all of the pages and provide some base CSS (fonts and a minimal reset).&lt;/p&gt;
&lt;p&gt;So I created a Partials folder for these 3 components. I&#39;m still not certain they shouldn&#39;t have been Organisms. But easy discovery for me meant that I wanted to keep them separate from other, re-usable Organisms that would be used in different contexts.&lt;/p&gt;
&lt;h3 id=&quot;templates&quot; tabindex=&quot;-1&quot;&gt;Templates &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#templates&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Does what it says on the tin really. These are where the layout for pages that were programmatically created from other data sources are kept.&lt;/p&gt;
&lt;h3 id=&quot;pages&quot; tabindex=&quot;-1&quot;&gt;Pages &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#pages&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fully formed JSX pages lived here, comprising of a component that would wrap every page (Partials/Layout.js), and many Organisms, Molecules and Atoms to build up entire pages.&lt;/p&gt;
&lt;p&gt;Here&#39;s a short example of a page so you can see the final use of this approach:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Helmet &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-helmet&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; variable &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../components/variables&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Layout &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../components/Templates/Layout&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Link &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../components/Molecules/Link&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; atom &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../components/Atoms&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Masthead &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../components/Organisms/Masthead&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; frontmatter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NOT FOUND&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;404&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Page not found&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;inMainNav&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;NotFoundPage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Layout&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Helmet&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FOUND&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siteMetadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;meta name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt; content&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Page not found.&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Helmet&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Masthead&lt;br /&gt;        title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NOT FOUND&quot;&lt;/span&gt;&lt;br /&gt;        intro&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Page not found&quot;&lt;/span&gt;&lt;br /&gt;        textColor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BRAND_SECONDARY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Band&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Paragraph&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;You just hit a route that doesn&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&quot;token number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;t exist&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; the sadness&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Paragraph&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Paragraph&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;You might want to check out the &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/sitemap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;sitemap&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Link&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; or go back to the &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; homepage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Link&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Paragraph&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;atom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Band&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Layout&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; NotFoundPage&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; graphql&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;query notFoundPageQuery {&lt;br /&gt;  site {&lt;br /&gt;    siteMetadata {&lt;br /&gt;      title&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from this code, an approach I started to adopt included importing everything from &lt;code&gt;atoms&lt;/code&gt; and using &lt;code&gt;&amp;lt;atom.band&amp;gt;&lt;/code&gt; to identify clearly what grouping it came under. It also made imports much shorter and somewhat tidier.&lt;/p&gt;
&lt;h3 id=&quot;atomic-could-be-the-future&quot; tabindex=&quot;-1&quot;&gt;Atomic Could Be the Future &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/atomic-web-development/#atomic-could-be-the-future&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The title of this section is a bit of a misnomer. The Atomic approach might not be best for your project. It might not fit your development team workflow. Or it might not match your particular mental model of how you see your project&#39;s code. That&#39;s OK, I document this in the hopes that it might be useful to some.&lt;/p&gt;
&lt;p&gt;If you do end up adopting this approach I&#39;d really like to know about it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Three Conversations to Serverless</title>
    <link href="https://example.com/posts/three-conversations-to-serverless/"/>
    <updated>2018-11-09T22:51:21Z</updated>
    <id>https://example.com/posts/three-conversations-to-serverless/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Serverless isn&#39;t such a new concept but it is still difficult to understand for many of us. I&#39;ve been privileged to work with some great people over the past few months, and I&#39;ve really been helped to understand serverless because of the questions they&#39;ve raised, many of which I couldn&#39;t answer straight away. Often their questions have got me thinking about different ways to explain serverless.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since many of these people are used to managing, developing or supporting a project that&#39;s more monolithic in nature, I&#39;m going to try to write down some of those questions in the form of the paths they often take: realisation, clarification, and comprehension. If you find you don&#39;t understand the concept of serverless after these 3 &amp;quot;conversations&amp;quot;, remember that the idea of 3 conversations is perhaps a generalisation. One of my colleagues, a much more senior developer than I, was persuaded of the approach after several weeks of discussions!&lt;/p&gt;
&lt;h2 id=&quot;1.-realisation&quot; tabindex=&quot;-1&quot;&gt;1. Realisation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-conversations-to-serverless/#1.-realisation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often, people in my organisation come to me with a requirement for the project, or a solution to an outstanding problem, with an idea of how they would implement it. This is because we are often predisposed to solutions-based thinking. There have been studies of the brain to show we are likely hard wired to do this. It helps us to act quickly based on our previous experiences.&lt;/p&gt;
&lt;p&gt;However, with serverless there&#39;s usually less common ground with previous experiences we might have had. Often, during the conversation this statement comes up:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;there is no backend&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I reach this point in a conversation, it&#39;s the point that the listener realises the objective they currently have isn&#39;t possible in the way they have been thinking.&lt;/p&gt;
&lt;p&gt;Whether it&#39;s to dynamically render content, process form data, implement redirects, or modify content using a CMS, this statement stops them short. &lt;em&gt;There is no back end&lt;/em&gt; to our static frontend that is, in our case, hosted on a dumb S3 bucket and uploaded to a dumb CDN. I mean &amp;quot;dumb&amp;quot; as in there is no processing ability there we can leverage.&lt;/p&gt;
&lt;p&gt;Usually, this realisation prompts some critical thinking. &amp;quot;How can I solve my problem with this restriction?&amp;quot; And that&#39;s when it starts to get a bit frustrating. Which means you might need some clarification.&lt;/p&gt;
&lt;h2 id=&quot;2.-clarification&quot; tabindex=&quot;-1&quot;&gt;2. Clarification &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-conversations-to-serverless/#2.-clarification&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You, the listener, have probably been mulling over your problem for a while now, and whilst you realise you can&#39;t stop a train that&#39;s in progress you might be thinking this whole serverless thing is a ludicrous idea.&lt;/p&gt;
&lt;p&gt;Why would anyone build apps this way? Why make it so complicated?! When you had a monolithic app, it could do anything you wanted out-of-the-box. Now you might be finding out things. Things that might have been unknown to you before. For instance, form data needs to be processed server-side before it&#39;s sent anywhere. That a lot of 3rd party services require auth tokens, which we can&#39;t use in JavaScript because it can be read and used by anyone.&lt;/p&gt;
&lt;p&gt;This can be frustrating. These paradigms are hard to come to terms with, at least initially. But with each restriction there is a solution that comes with some really interesting benefits. And that&#39;s when clarification can turn into comprehension.&lt;/p&gt;
&lt;h2 id=&quot;3.-comprehension&quot; tabindex=&quot;-1&quot;&gt;3. Comprehension &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-conversations-to-serverless/#3.-comprehension&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having gone through this process of realising we are dealing with something very different from what you might have imagined, to the clarification that you can&#39;t approach your requirement in the same way you have done previously, now we can start to solve the &lt;em&gt;new&lt;/em&gt; problem.&lt;/p&gt;
&lt;p&gt;When we start doing that, we can find there are some really nice solutions that add a layer of curiosity and, you might say, delight, as listeners come to find out more about the options they have.&lt;/p&gt;
&lt;p&gt;Heres a few of the &amp;quot;lightbulb&amp;quot; moments I&#39;ve enjoyed witnessing over the course of the past few months, credited where I can remember who it was:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Ah so there&#39;s more security and better performance, that&#39;s good then.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;So you can get that data from the API at build time, &lt;strong&gt;and&lt;/strong&gt; update it if necessary on the frontend. That&#39;s useful.&amp;quot; (Tim)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;[to other stakeholders] ... and then anyone else can consume this service if they need to, it&#39;s already built for them.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;I can see why you wanted to use Gatsby for this project. GraphQL is ... is really useful actually&amp;quot; (Awais)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;So you can do that even &lt;strong&gt;before&lt;/strong&gt; the site gets to the user? And it would be one request?&amp;quot; (Jonny)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;[After we reported straight As in &lt;a href=&quot;http://webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt;] Really impressive lads! Good work!&amp;quot; (Tomas)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This has been a lot of fun for me. I have particularly enjoyed helping others see things in a different light, or with renewed potential. It&#39;s great to see people get excited about something so much that they want to go away and do something with it.&lt;/p&gt;
&lt;p&gt;Serverless is still only one method to approach development. It&#39;s not always the best way, but it is a viable solution to certain situations and use cases. But it really does take time to come to terms with the idea. Teams you interface with also need to be aware that there are things that are going to be different and some problems may require a very different problem solving route.&lt;/p&gt;
&lt;p&gt;Static sites in particular shouldn&#39;t be made to do everything. Sometimes complexity on the frontend can be taken too far.&lt;br /&gt;
But we have managed to build a site that is robust, fast, beautifully designed, deceptively simple, and that has some useful microservices that can also be utilised elsewhere.&lt;/p&gt;
&lt;p&gt;Working with serverless is definitely my thing. I&#39;m really looking forward seeing more implementation of this approach in the future. I particularly want to build a serverless eCommerce site next ...!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A React performance case study</title>
    <link href="https://example.com/posts/react-performance-case-study/"/>
    <updated>2018-12-12T08:21:21Z</updated>
    <id>https://example.com/posts/react-performance-case-study/</id>
    <content type="html">&lt;p&gt;Part of the way through a project to replace an app with a static site generated by Gatsbyjs, initial tests revealed that we there was a lot we could do to improve the performance. Here&#39;s how we turned the project around, cutting load times to under 3 seconds and reducing percieved performance bottlenecks.&lt;/p&gt;
&lt;p&gt;Here&#39;s what the initial test looked like in web page test (&lt;a href=&quot;http://webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;scrolltable&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Doc&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Complete&lt;/th&gt;
&lt;th&gt;Fully&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Loaded&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Load time&lt;/td&gt;
&lt;td&gt;First Byte&lt;/td&gt;
&lt;td&gt;Start Render&lt;/td&gt;
&lt;td&gt;Speed Index&lt;/td&gt;
&lt;td&gt;First Interactive&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First view&lt;/td&gt;
&lt;td&gt;4.733s&lt;/td&gt;
&lt;td&gt;0.901s&lt;/td&gt;
&lt;td&gt;2.100&lt;/td&gt;
&lt;td&gt;2266&lt;/td&gt;
&lt;td&gt;&amp;gt; 8.179s&lt;/td&gt;
&lt;td&gt;4.733s&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;1,536kb&lt;/td&gt;
&lt;td&gt;8.055s&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;2.691kb&lt;/td&gt;
&lt;td&gt;$$$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&quot;identifying-the-problem&quot; tabindex=&quot;-1&quot;&gt;Identifying the Problem &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#identifying-the-problem&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial issue we had was how do we identify what problems we had that we needed to solve. Without a clear understanding of what was going wrong, we had no way of focusing on tasks that could help us improve the current situation.&lt;/p&gt;
&lt;p&gt;One of the first things we did was to find out how our site was rendering across different browsers. Straight away, we noticed that browers that didn&#39;t have the benefit of a fast JavaScript parser were significantly slower. Sometimes it would take up to about 14 seconds to render a page. Interacting with key conversion-linked elements on the page was janky or stuttered a lot, which further put users off.&lt;/p&gt;
&lt;p&gt;We also had a popup module for cookies which took over a large part of the screen, and which couldn&#39;t be dismissed until all of the JS was downloaded and parsed. This was a major issue to overcome.&lt;/p&gt;
&lt;p&gt;Over later iterations we also implemented a few other strategies to help us pinpoint issues:&lt;/p&gt;
&lt;h3 id=&quot;webpagetest&quot; tabindex=&quot;-1&quot;&gt;Webpagetest &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#webpagetest&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Web page test has got better &amp;amp; better over the years. It provides a teriffic overview as well as a deep dive into the waterfall and has tonnes of settings for different locations and devices.&lt;/p&gt;
&lt;p&gt;It&#39;s still my favourite performance tool.&lt;/p&gt;
&lt;h3 id=&quot;lighthouse&quot; tabindex=&quot;-1&quot;&gt;Lighthouse &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#lighthouse&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use the Lighthouse plugin for Google Chrome (instead of the native version) because it contains newer features that we wanted to incorporate into our results. Lighthouse is typically better for pinpointing different overall issues such as PWA status and accessibility.&lt;/p&gt;
&lt;h3 id=&quot;hotjar&quot; tabindex=&quot;-1&quot;&gt;HotJar &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#hotjar&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was skeptical about using HotJar to begin with. I felt it would add to our JavaScript burden instead of reduce it. However, we managed to integrate HotJar with our analytics tracking script, reducing the overall load. The script was loaded asynchronously which helped. However, downloading and parsing still took up processing power, reducing the interactivity of the site until it was completed. So reducing the overall JS burden was still a necessity.&lt;/p&gt;
&lt;p&gt;HotJar later became instrumental in helping us identify a severe issue which resulted in a white screen, so it became really useful in our testing and iterating process.&lt;/p&gt;
&lt;h3 id=&quot;splunk&quot; tabindex=&quot;-1&quot;&gt;Splunk &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#splunk&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Splunk allows you to collect errors in your application and log them for later use offsite. I particularly love Splunk, because it allowed us to send any JavaScript errors we wanted that occured on the client off to be examined and quantified later. Once we had implemented Splunk (using React&#39;s &lt;code&gt;ErrorBoundary&lt;/code&gt; API) we could see what was really going on with our app in the wild.&lt;/p&gt;
&lt;p&gt;Having set up these two, we were ready to dive into prioritising and fixing some of the significant issues we were seeing.&lt;/p&gt;
&lt;h2 id=&quot;issue-1:-large-javascript-burden&quot; tabindex=&quot;-1&quot;&gt;Issue 1: Large JavaScript Burden &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-1:-large-javascript-burden&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though GatsbyJS does a huge amount to reduce the amount of JavaScript (rendering what it can on the server, tree shaking and minification to name a few) We had 2 issues with our JavaScript:&lt;/p&gt;
&lt;h3 id=&quot;1.-pulling-too-much-onto-the-frontend&quot; tabindex=&quot;-1&quot;&gt;1. Pulling Too Much onto the Frontend &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#1.-pulling-too-much-onto-the-frontend&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GatsbyJS&#39; compiler looks for code that includes references to the &lt;code&gt;window&lt;/code&gt; object and renders those on the client. The rest, it renders on the server. We had a lot of extra JavaScript, including page configuration objects, that ran on the frontend instead of using the Gatsbyjs&#39; data layer.&lt;/p&gt;
&lt;p&gt;By refactoring back into gatsby, we were able to reduce our bundle size.&lt;/p&gt;
&lt;p&gt;We also noticed that somehow larger libraries like Lodash were used to render client-side content. By refactoring this library out of what was rendered on the client side, we further streamlined it.&lt;/p&gt;
&lt;h3 id=&quot;2.-using-webpack-3&quot; tabindex=&quot;-1&quot;&gt;2. Using WebPack 3 &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#2.-using-webpack-3&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We moved the site from GatsbyJS v1 to v2 (it took a day to complete). this led to a reduction in JS bundle size from about 700kb to around 530kb.&lt;/p&gt;
&lt;h2 id=&quot;issue-2:-javascript-caching&quot; tabindex=&quot;-1&quot;&gt;Issue 2: JavaScript Caching &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-2:-javascript-caching&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using Webpack 3 was a huge step forward. Previously, in Gatsby v1, we could cache HTML really well. But page components couldn&#39;t be cached. Webpack 3 allowed us to cache JS more aggresively, leading to much better performance.&lt;/p&gt;
&lt;p&gt;After the work with Webpack we saw the following results:&lt;/p&gt;
&lt;div class=&quot;scrolltable&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Doc&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Complete&lt;/th&gt;
&lt;th&gt;Fully&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Loaded&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Load time&lt;/td&gt;
&lt;td&gt;First Byte&lt;/td&gt;
&lt;td&gt;Start Render&lt;/td&gt;
&lt;td&gt;Speed Index&lt;/td&gt;
&lt;td&gt;First Interactive&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First view&lt;/td&gt;
&lt;td&gt;3.993s&lt;/td&gt;
&lt;td&gt;0.344s&lt;/td&gt;
&lt;td&gt;1.300&lt;/td&gt;
&lt;td&gt;2098&lt;/td&gt;
&lt;td&gt;&amp;gt; 4.663s&lt;/td&gt;
&lt;td&gt;3.993s&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;740kb&lt;/td&gt;
&lt;td&gt;5.609s&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;1,069kb&lt;/td&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&quot;issue-3:-obtrusive-cookie-module&quot; tabindex=&quot;-1&quot;&gt;Issue 3: Obtrusive Cookie Module &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-3:-obtrusive-cookie-module&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned above, we noticed that on mid-range phones where users didn&#39;t use a fast JavaScript parser, it could take up to 14s for the site to be interactive. Users could still get some functionality and scroll around ... however, they were prevented from doing so by the cookie module. This was a particular issue on smaller screens but affected everyone.&lt;/p&gt;
&lt;p&gt;To combat the issue we redesigned the module to be much smaller. We also set a timeout on the module so that it wouldn&#39;t try to check for cookies or even render until after the dom was loaded.&lt;/p&gt;
&lt;p&gt;As a result, we didn&#39;t stop people from using the site until the cookie module was dismissed.&lt;/p&gt;
&lt;h2 id=&quot;issue-4:-large-dataset&quot; tabindex=&quot;-1&quot;&gt;Issue 4: Large Dataset &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-4:-large-dataset&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a high-converting page we made a call on the frontend to get a large dataset that was over 1.3MB. This was a stop-gap: we ultimately needed to get this dataset not from a static JSON file but from a server that could take 35ms to compile the data we needed and make it available as a JSON object.&lt;/p&gt;
&lt;p&gt;Instead of querying this API directly we built an intermediary service that cached the data set we needed as a static JSON file. The API also reduced the data down by eliminating extra data that we didn&#39;t use.&lt;/p&gt;
&lt;p&gt;This reduced our file to around 650KB.&lt;/p&gt;
&lt;h2 id=&quot;issue-5:-long-running-api-calls&quot; tabindex=&quot;-1&quot;&gt;Issue 5: Long-running API Calls &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-5:-long-running-api-calls&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The data we requested on the API endpoint mentioned above was mission-critical. It had to be available to our users, otherwise conversions would not be possible. Therefore we hadn&#39;t set a timeout on the API call.&lt;/p&gt;
&lt;p&gt;We were able to find a workaround to this issue by caching the data in the project on build. That allowed us to set a timeout so that if the connection dropped suddenly, a default data set that was fetched on build earlier could be displayed.&lt;/p&gt;
&lt;h2 id=&quot;issue-6:-large-number-of-javascript-math-functions&quot; tabindex=&quot;-1&quot;&gt;Issue 6: Large Number of JavaScript Math Functions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-6:-large-number-of-javascript-math-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having an intermediary service allowed us to further reduce the JavaScript on the site.&lt;/p&gt;
&lt;p&gt;The large dataset contained raw numbers down do several decimal places. But we only needed to provide 2 decimal places to visitors. Although it reduced the adaptability of the intermediary service we had built, we decided to perform rounding there instead. This freed up much more processing power for the main thread and further reduced times.&lt;/p&gt;
&lt;h2 id=&quot;issue-7:-avoiding-re-rendering&quot; tabindex=&quot;-1&quot;&gt;Issue 7: Avoiding Re-rendering &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#issue-7:-avoiding-re-rendering&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m going to cover this more in-depth in another post, but we also managed to reduce page re-renders massively. We did this using the Context API to share data across several modules via State. Most of our functions were used in State as well. This meant that only the components consuming that data re-rendered when they were used.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-performance-case-study/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A recent performance test shows we have achieved the following:&lt;/p&gt;
&lt;div class=&quot;scrolltable&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Doc&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Complete&lt;/th&gt;
&lt;th&gt;Fully&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;Loaded&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Load time&lt;/td&gt;
&lt;td&gt;First Byte&lt;/td&gt;
&lt;td&gt;Start Render&lt;/td&gt;
&lt;td&gt;Speed Index&lt;/td&gt;
&lt;td&gt;First Interactive&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Requests&lt;/td&gt;
&lt;td&gt;Bytes In&lt;/td&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First view&lt;/td&gt;
&lt;td&gt;1.787s&lt;/td&gt;
&lt;td&gt;0.223s&lt;/td&gt;
&lt;td&gt;1.200&lt;/td&gt;
&lt;td&gt;1.384s&lt;/td&gt;
&lt;td&gt;&amp;gt; 2.698s&lt;/td&gt;
&lt;td&gt;1.787s&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;301kb&lt;/td&gt;
&lt;td&gt;2.571s&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;438kb&lt;/td&gt;
&lt;td&gt;q$&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;I recognise these performance results are under optimal conditions and actual, not to mention percieved, results aren&#39;t captured by these figures. But we also need some achievable goals that help us to stay motivated and focused.&lt;/p&gt;
&lt;p&gt;We haven&#39;t finished yet either ... more work will continue to be done during the lifetime of this project.&lt;/p&gt;
&lt;p&gt;This has been a great adventure, and it&#39;s been exciting to see how we&#39;ve gone to fully-loaded times of around 10s to 4, then down to 2.5, where it currently stands. I hope this post gives you some clues about how you can use new tricks and old to make your apps more performant.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Send Your Blogs!</title>
    <link href="https://example.com/posts/send-your-blogs/"/>
    <updated>2018-12-13T10:21:21Z</updated>
    <id>https://example.com/posts/send-your-blogs/</id>
    <content type="html">&lt;p&gt;I was privileged to attended View Source London this year, and gained a lot once more by seeing talks by many members of the W3C and others. Lots of the talks had something really outstanding to share, but one in particular resonated with my desire to connect more with the developer community.&lt;/p&gt;
&lt;h2 id=&quot;&amp;quot;send-me-your-blogs&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;&amp;quot;Send me your Blogs&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/send-your-blogs/#%22send-me-your-blogs%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ana Rodrigues gave a lightning talk about how developer&#39;s personal blogs are a great way of picking up new ideas, but lamented that many people seem to be abandoning them in favour of Twitter, Medium or other hosted services. Ana hilighted that there is value in having your own blog because you&#39;re more in control, and it can be more personal to you.&lt;/p&gt;
&lt;p&gt;She concluded with the request to &amp;quot;send me your blogs!&amp;quot;&lt;/p&gt;
&lt;p&gt;There was a similar request from Sara Soueidan via Twitter. I was going to share it with you but it&#39;s either been deleted or the Twitter search algorithm isn&#39;t picking it up today. Sara&#39;s request was for blogs that had RSS feeds. That alone is an interesting idea...&lt;/p&gt;
&lt;h2 id=&quot;rss-is-back&quot; tabindex=&quot;-1&quot;&gt;RSS Is Back &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/send-your-blogs/#rss-is-back&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve recently adopted Sara&#39;s approach. I&#39;m getting fed up of losing things because of Twitter&#39;s API, and want to encourage fellow developers to maintain their own little piece of the web where possible. So I opened a repo that will list all of the developer blogs I discover.&lt;/p&gt;
&lt;p&gt;Please submit a PR to add yours.&lt;/p&gt;
&lt;p&gt;My idea is to extend this so that I can show categories (for example, give a general idea of what these blogs talk about) and possibly even curating a website that collects articles together...&lt;/p&gt;
&lt;h2 id=&quot;send-your-blogs&quot; tabindex=&quot;-1&quot;&gt;Send Your Blogs &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/send-your-blogs/#send-your-blogs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/endymion1818/awesome-developer-blogs&quot;&gt;Request for PRs on the awesome-developer-blogs repo is open! Send out your blogs!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now all I need to do is add an RSS feed to my blog ... !&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: React Accessibility</title>
    <link href="https://example.com/posts/react-accessibility/"/>
    <updated>2018-12-24T10:21:21Z</updated>
    <id>https://example.com/posts/react-accessibility/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;In the recent past, I&#39;ve heard React being criticised for not being accessible, or for allowing practices that don&#39;t help developers think about accessibility.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have to disagree.&lt;/p&gt;
&lt;p&gt;Just like any other frontend code, working with React in an accessible way requires some forethought.&lt;/p&gt;
&lt;p&gt;One of the common mistakes I&#39;ve seen is that we sometimes put click events on non-semantic elements. It&#39;s true, React makes it very easy to put a click event on any dom element.&lt;/p&gt;
&lt;p&gt;I think one of the reasons for this is that with React, our JavaScript is our single source of truth, so we tend to think in JavaScript. One DOM element is like any other DOM element, and they all can be manipulated in much the same way.&lt;/p&gt;
&lt;p&gt;However, if we&#39;re thinking about accessibility, we&#39;re committing ourselves &lt;em&gt;before we start coding&lt;/em&gt;, that we&#39;re going to do things the right way, including using semantic elements. If we do this, we&#39;ll ensure we assign a click event to a semantic element to start with - a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; or an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag - or we&#39;ll do all the extra legwork that&#39;s required to make up for it.&lt;/p&gt;
&lt;h2 id=&quot;encourage-accessibility-in-components&quot; tabindex=&quot;-1&quot;&gt;Encourage Accessibility in Components &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-accessibility/#encourage-accessibility-in-components&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another way to encourage others using your components to think in an accessible way is to compose components to include accessibility features. For example, this component passes down a prop that&#39;s an image source.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgurl&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What are we missing here? The &lt;code&gt;alt&lt;/code&gt; attribute. How do we encourage accessibility in this instance? Wrap the component in a conditional, so that it doesn&#39;t render without the alt tag:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgalt &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgurl&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgalt&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could go a bit further with this, and check that the &lt;code&gt;length&lt;/code&gt; of &lt;code&gt;imgalt&lt;/code&gt; is greater than 0.&lt;/p&gt;
&lt;h2 id=&quot;it-starts-and-ends-with-accessibility&quot; tabindex=&quot;-1&quot;&gt;It Starts &amp;amp; Ends With Accessibility &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/react-accessibility/#it-starts-and-ends-with-accessibility&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just as our thinking process starts with the commitment to code with accessibility in mind, our launched product should finish with accessibility. So test your assumptions:- did you really build an accessible site or app?&lt;/p&gt;
&lt;p&gt;Use software to test what you can. But better than that: connect with people you know. Take your product to your friends and relatives or your audience. How do they get on using it?&lt;/p&gt;
&lt;p&gt;React has plenty of built-in support for building things in an accessible way. Check out the documentation at &lt;a href=&quot;https://reactjs.org/docs/accessibility.html&quot;&gt;https://reactjs.org/docs/accessibility.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The question is, will you make that commitment to yourself, and the people who will use your site?&lt;/p&gt;
&lt;p&gt;This article was first published in Net Magazine.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2018 Review / 2019 Aims</title>
    <link href="https://example.com/posts/2018-review-2019-aims/"/>
    <updated>2019-01-03T14:21:21Z</updated>
    <id>https://example.com/posts/2018-review-2019-aims/</id>
    <content type="html">&lt;p&gt;Twenty Eighteen was a whirlwind of changes for me professionally. I went from working in an agency to working for a FinTech, and the difference in those two roles and the tech stacks involved have brought me many new skills as a developer. But I still suffer anxiety with all the things I want to learn.&lt;/p&gt;
&lt;h2 id=&quot;what-i-learned&quot; tabindex=&quot;-1&quot;&gt;What I Learned &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#what-i-learned&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-moved-to-javascript&quot; tabindex=&quot;-1&quot;&gt;1. Moved to JavaScript &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#1.-moved-to-javascript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve already blogged about this before, but I moved from a PHP / JS role to a fullstack JS role. That was great, but it was very hard initially. I had to put in many hours outside of work to bring myself up to speed on certain core JS concepts I&#39;d missed before, as well as learn some of the key React APIs. But I went from not knowing how to pass props down to rebuilding a fairly complex calculator. That felt like a big achievement.&lt;/p&gt;
&lt;h3 id=&quot;2.-learned-the-value-of-qa-engineers&quot; tabindex=&quot;-1&quot;&gt;2. Learned The Value of QA Engineers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#2.-learned-the-value-of-qa-engineers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The QA process in my current workplace is much more rigid. Every ticket is defined, has parameters, and is approved / rejected by a QA engineer before it goes into production. For someone who is obsessive about quality, and takes it hard when I get things wrong, having a QA Engineer has meant very few issues are raised once the code is in production. Those I answer to in the organisation have much more confidence in the development process in its entirety because of this.&lt;/p&gt;
&lt;h3 id=&quot;3.-learned-about-ci-tools&quot; tabindex=&quot;-1&quot;&gt;3. Learned about CI Tools &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#3.-learned-about-ci-tools&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;d used Netlify to build my static sites before, but in this new role I was able to get visibility of the pipelines that were set up by our SRE (site reliability engineering) team that built the site in a Docker container, and also ran a feature CI on our PRs. This way, we could see straight away whether code was good enough for production. I&#39;m still fascinated by this complex world and want to learn more.&lt;/p&gt;
&lt;h3 id=&quot;4.-learned-the-value-of-a-good-code-review&quot; tabindex=&quot;-1&quot;&gt;4. Learned the Value of a Good Code review &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#4.-learned-the-value-of-a-good-code-review&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve had some very smart people review my code, and I&#39;ve learned a lot. For example, why destructuring is a good thing, why you wouldn&#39;t use the &lt;code&gt;index&lt;/code&gt; as the &lt;code&gt;key&lt;/code&gt; value in a React map function, and loads more.&lt;/p&gt;
&lt;h3 id=&quot;5.-learned-how-to-use-github-properly&quot; tabindex=&quot;-1&quot;&gt;5. Learned how to Use GitHub Properly &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#5.-learned-how-to-use-github-properly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I made a grand mistake of merging to master at my new job ... but I only made it once. I broke loads of stuff and caused a world of pain for my team. Now even with personal projects it goes against the grain to commit anything to Master, even if it&#39;s a tiny change.&lt;/p&gt;
&lt;h3 id=&quot;6.-learned-the-value-of-jira&quot; tabindex=&quot;-1&quot;&gt;6. Learned the value of JIRA &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#6.-learned-the-value-of-jira&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I used to believe JIRA was this unwieldy tool that only crackpots would use. But it&#39;s so useful. We have strict definitions of where the responsibility lies for each step of the process, we can&#39;t release code into production unless is the process has been properly followed, and we also have an &amp;quot;expedite&amp;quot; lane so developers can focus exactly on what they need to do. Honestly it&#39;s transformed the way I work and made shipping code so much faster.&lt;/p&gt;
&lt;h2 id=&quot;what-i-want-to-learn&quot; tabindex=&quot;-1&quot;&gt;What I Want to Learn &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#what-i-want-to-learn&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#typescript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I had never seen the reason for type checking before, but now realise that a lot of the issues I&#39;ve been having all along with JavaScript can be resolved by using TypeScript. The verbosity puts me off, but I can&#39;t wait to TypeScript all my projects.&lt;/p&gt;
&lt;h3 id=&quot;unit-and-integration-testing&quot; tabindex=&quot;-1&quot;&gt;Unit &amp;amp; Integration Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#unit-and-integration-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve never written tests before, but I want to get to the stage where I could say I would be happy to undertake a role that involved Test-Driven Development.&lt;/p&gt;
&lt;h3 id=&quot;docker&quot; tabindex=&quot;-1&quot;&gt;Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#docker&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Still don&#39;t understand that thing. I want to learn this dark art so that I can set up feature CI tools and production pipelines myself.&lt;/p&gt;
&lt;h3 id=&quot;more-logic-based-development&quot; tabindex=&quot;-1&quot;&gt;More Logic Based Development &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#more-logic-based-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I enjoy being the Fronted Developer, but I&#39;d also like to build a few microservices and become more comfortable with the thought process of building for stuff that isn&#39;t going to be displayed in a browser.&lt;/p&gt;
&lt;h3 id=&quot;advocate-for-younger-developers&quot; tabindex=&quot;-1&quot;&gt;Advocate for Younger Developers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2018-review-2019-aims/#advocate-for-younger-developers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I see how skewed the whole development industry has become, I want to use my privilege to help others from different backgrounds to get into writing code.&lt;/p&gt;
&lt;p&gt;Okay, I think that&#39;s it! I have still got a long way to go, but I&#39;m pleased that this year ends with a new baby in the family, and with more career choices open to me than I&#39;ve ever had before.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Reusable Components with Atomic Design</title>
    <link href="https://example.com/posts/reusable-components-in-react/"/>
    <updated>2019-01-09T14:21:21Z</updated>
    <id>https://example.com/posts/reusable-components-in-react/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Structuring components in a reusable, discoverable way is a challenge across teams with diverse requirements. It can be difficult for developers unfamiliar with your library. They need to learn quickly how adopt, use and discover, features it has. How do you help them do that without over-burdening your components with too much documentation? I&#39;d like to introduce the idea of Atomic Development using React and styled-components.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Atomic Design is an approach to development that Brad Frost came up with a few years ago. He&#39;s published an excellent book about it which you can buy, or read online at &lt;a href=&quot;https://atomicdesign.bradfrost.com/&quot;&gt;https://atomicdesign.bradfrost.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post originally appeared in Net Magazine issue 314 under the title &amp;quot;Put Atomic Design into Practice&amp;quot;&lt;/p&gt;
&lt;h2 id=&quot;the-atomic-design-approach&quot; tabindex=&quot;-1&quot;&gt;The Atomic Design Approach &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#the-atomic-design-approach&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Brad Frost&#39;s book outlined a way to structure the design of a project based on building things up from the smallest component part.&lt;/p&gt;
&lt;p&gt;For example, this could be an input field. Input fields should never be used on their own. Instead, you would make sure for accessibility you have a label associated with it. In our analogy, the input field would be the Atom, and the atom and label together would be a Molecule.&lt;/p&gt;
&lt;p&gt;You could keep building upwards in this way so that you eventually had a fully designed page using not only Atoms and Molecules, but also Organisms (for example, a complete form) and a Template which contained your complete form, and perhaps other Molecules.&lt;/p&gt;
&lt;h2 id=&quot;atomic-development&quot; tabindex=&quot;-1&quot;&gt;Atomic Development &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#atomic-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a recent project I decided to investigate whether this approach could be uilised in development. In my React project I typically use Styled Components to write my CSS styles. I therefore structured my project like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- components/
  - Atoms
  - Molecules/
  - Organisms/
  - Templates/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;atoms&quot; tabindex=&quot;-1&quot;&gt;Atoms &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#atoms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Atoms I designated as constants which could receive props. For example, a paragraph that had a prop for the text colour.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/reusable-components-react-1.png&quot; alt=&quot;reusable components 1&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;molecules&quot; tabindex=&quot;-1&quot;&gt;Molecules &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#molecules&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Molecules consist of stateless functional components, often comprising of several Atomic elements and can contain some custom Atoms that relate to that specific Molecule.&lt;/p&gt;
&lt;p&gt;In the example below, we have a &amp;quot;popout&amp;quot; section, which has a custom MainContainer element that&#39;s only used in this Molecule. It can accept multiple props and can wrap other components.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/reusable-components-react-2.png&quot; alt=&quot;reusable components 2&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;organisms&quot; tabindex=&quot;-1&quot;&gt;Organisms &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#organisms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As we get to organisms, we start to see larger elements, bringing in several Molecules and atoms, often with components that render on the frontend as well as server, and data that might come in from an external source.&lt;/p&gt;
&lt;h3 id=&quot;templates&quot; tabindex=&quot;-1&quot;&gt;Templates &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#templates&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Templates are layouts for pages that are programmatically created from other data sources, such as the one I made below for a side project about my favourite musician:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/reusable-components-react-3.png&quot; alt=&quot;reusable components 3&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;atomic-at-zopa&quot; tabindex=&quot;-1&quot;&gt;Atomic at Zopa &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#atomic-at-zopa&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Coincidentally, Gerard Brull, a colleague of mine at &lt;a href=&quot;http://zopa.com/&quot;&gt;Zopa.com&lt;/a&gt; who works out of our office in Barcelona had also come across this idea. We discussed it as a team and decided to try to implement it in a future iteration of our shared component library.&lt;br /&gt;
We hope that it will help our team collaboration and assist the onboarding experience for newer developers that join us.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;modularised-application-development&quot; tabindex=&quot;-1&quot;&gt;Modularised Application Development &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/reusable-components-in-react/#modularised-application-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Zopa we build apps and services that start small but often scale up to millions of users. Organizing our code in a way that&#39;s easy to maintain is something we must therefore take into careful consideration before we begin development.&lt;/p&gt;
&lt;p&gt;Senior Developer Alexis Mangin has shared his experience of what could be the best approach when it comes to scalable applications which could have many component parts:&lt;/p&gt;
&lt;p&gt;&amp;quot;Categorizing files based on what they represent is an easy way of partitioning your project and has became a popular practice with developers who use patterns such as MVC. In our experience, that’s okay when you work on small applications, but it can have a tremendous effect on the team’s velocity as the application grows. One way to avoid poor-planning headaches is to structure your codebase around the concept of modules, each with its own responsibility. Creating a module means you will group a set of related components, methods and assets together, providing a public interface to be used by other modules.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@alexmngn/why-react-developers-should-modularize-their-applications-d26d381854c1&quot;&gt;Please see this post for the full article.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>I&#39;m Not Proud</title>
    <link href="https://example.com/posts/not-proud/"/>
    <updated>2019-01-30T13:21:21Z</updated>
    <id>https://example.com/posts/not-proud/</id>
    <content type="html">&lt;p&gt;Today was a stressful day. I was working to a set deadline on which a lot of other tasks depended. I felt that if I failed to achieve my work, there would be a cascade effect that could lead to delaying the release of a product I have been working on.&lt;/p&gt;
&lt;p&gt;I didn&#39;t want that to happen. But I&#39;m not proud of what I did to avoid it.&lt;/p&gt;
&lt;p&gt;I was working with our best designer, who had begun to refactor a module but needed some help with some finer structure and more complicated CSS that would display the images in the way that the Creative Director had approved.&lt;/p&gt;
&lt;p&gt;In order to hit my deadline I hacked the module I was working on. I added props that were not semantically correct. I added images directly into the module itself instead of passing them down from the page. I wrote no tests and defined no types.&lt;/p&gt;
&lt;p&gt;After another round of tweaks and some refinements, it was ready for code review. I rushed it past, asking someone I knew would be too busy to tell me what I should&#39;ve done instead. I&#39;m sure he raised an eyebrow or two when he approved it.&lt;/p&gt;
&lt;p&gt;Miraculously, it passed QA and was released that same day.&lt;/p&gt;
&lt;p&gt;I still hate myself whenever I think of that code.&lt;/p&gt;
&lt;h2 id=&quot;unexpected-consequences&quot; tabindex=&quot;-1&quot;&gt;Unexpected Consequences &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/not-proud/#unexpected-consequences&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We started a new sprint today, and one of the backlog items is a refactor of that module. This time I&#39;m going to do it correctly, passing down the image from the page, removing the duplicate CSS and finding a way for our designer to pass specific CSS so they can position the image as they want.&lt;/p&gt;
&lt;p&gt;What I didn&#39;t expect was to hear that our user engagement has increased significantly. Conversions are up by about 11%, and the project is much closer to launch than it would have been without those hacky changes I made.&lt;/p&gt;
&lt;p&gt;So no, I&#39;m not at all proud of the code I wrote today.&lt;/p&gt;
&lt;p&gt;But it helped the whole project move forward. It might even release very soon. And now I&#39;m going to re-do it properly.&lt;/p&gt;
&lt;p&gt;You don&#39;t have to be proud of the code you wrote today. But you can do what&#39;s needed, and make a promise to do it properly when time allows.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Accessing Localhost in Parallels</title>
    <link href="https://example.com/posts/localhost-in-parallels/"/>
    <updated>2019-02-06T13:21:21Z</updated>
    <id>https://example.com/posts/localhost-in-parallels/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I just obtained a licence for Parallels for my work computer, and it was a doddle to set up. I didn&#39;t realise before now that Parallels will also download and install Windows 10 for you as part of the installer. This was a smooth move. But, when I went to preview my site in IE11 ... nothing happened.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you start a Node web server using it&#39;s HTTP interface you will by default run on a specific host that resolves to  &lt;code&gt;127.0.0.1&lt;/code&gt;, your localhost. This isn&#39;t shared by your Windows OS although I don&#39;t know if there&#39;s a way to forward through to there from MacOS.&lt;/p&gt;
&lt;p&gt;So typing in &lt;code&gt;https://localhost:8000&lt;/code&gt; was never going to work. After much googling I found &lt;a href=&quot;https://forum.parallels.com/threads/accessing-localhost.258362/&quot;&gt;this post on the Parallels forum&lt;/a&gt; that referenced Angular&#39;s cli tool an demonstrated that you could pass a flag to change the host IP.&lt;/p&gt;
&lt;p&gt;I thought to myself that the Angular CLI probably uses the same common code (Node&#39;s HTTP interface) and tried that in my app:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby serve --host&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This little trick mentioned in the forum means that the server will allow access on any port, not just on localhost. So now I had to find out what port Parallels would accept.&lt;/p&gt;
&lt;p&gt;Following that thread down, I found this IP address mentioned by one of the Parallels developers: &lt;code&gt;10.211.55.2&lt;/code&gt;. Aha, that worked.&lt;/p&gt;
&lt;p&gt;So in future, if you&#39;re running a NodeJS server on their mac and wants to view the site on Windows using Parallels, first spin up your server with the &lt;code&gt;--host=0.0.0.0&lt;/code&gt; (that&#39;s four dots and four zeros) and visit the following address in the browser on Windows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;https://10.211.55.2:8000 // or whatever your port is.&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Both Sides, Now</title>
    <link href="https://example.com/posts/both-sides-now/"/>
    <updated>2019-03-12T13:21:21Z</updated>
    <id>https://example.com/posts/both-sides-now/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;CSS isn&#39;t a programming language. CSS is a programming language. JavaScript shouldn&#39;t be used to render HTML. JavaScript is the only way of writing HTML. CSS is overly complicated, difficult to learn and hopelessly outdated. All of these opinions provoke a response in me. It&#39;s just perhaps not the one the authors intended.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I see comments like the ones above I can&#39;t help but wonder if they&#39;re written out of a genuine frustration or concern a person has, whether they&#39;re meant to provoke an argument, or even whether they are using others&#39; frustration to raise their own profile.&lt;/p&gt;
&lt;p&gt;Whatever the case, there&#39;s another way of looking at the situation that I hope others can benefit from:&lt;/p&gt;
&lt;h1 id=&quot;both-sides-now&quot; tabindex=&quot;-1&quot;&gt;Both Sides, Now &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/both-sides-now/#both-sides-now&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I was surprised on checking Rolling Stone Magazine&#39;s top 500 songs that Joni Mitchell&#39;s song &amp;quot;Both Sides, Now&amp;quot; wasn&#39;t in the top 50. For me, this song is even more mesmerising than any of Bob Dylan&#39;s incredible output ... and I&#39;m saying that as a firm fan of Dylan.&lt;/p&gt;
&lt;p&gt;The song suggests for me that there are different ways of looking at everything in life ... even conceptually simple things such as clouds can appear totally different to two observers.&lt;/p&gt;
&lt;p&gt;The lyrics seem to convey the idea that eventually we can learn to look at things from other perspectives, not just our own.&lt;/p&gt;
&lt;p&gt;That invokes a more mature and happier approach to life: with hindsight the things we argued about once can seem somewhat trivial compared to the way we look back on them.&lt;/p&gt;
&lt;p&gt;I imagine the author of this song looking back on an experience and thinking, I wish I hadn&#39;t argued that point, now I&#39;m older I can see it from a different perspective. All I achieved was conflict. And that conflict stopped me from enjoying and appreciating the differences I encountered.&lt;/p&gt;
&lt;h2 id=&quot;things-that-aren&#39;t-conflicts&quot; tabindex=&quot;-1&quot;&gt;Things that Aren&#39;t Conflicts &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/both-sides-now/#things-that-aren&#39;t-conflicts&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I see arguments like I mentioned at the outset, I think, that&#39;s merely one way of looking at things.&lt;/p&gt;
&lt;p&gt;Is CSS-in-JS a mistake? For some people, it is. Totally unnecessary. For others, it&#39;s absolutely the best way to achieve the results they seek. Having worked in both camps, I can see there&#39;s no conflict in building for the web either way.&lt;/p&gt;
&lt;p&gt;Is JavaScript destroying the web? I&#39;ll say this again (though I am starting to sound like a stuck record!) that there&#39;s a lack of HTML and CSS skills among our peers, and that will need to be addressed at some point. But look at the things a dynamic language like JavaScript has enabled us to achieve. Without it, the web would be a much poorer place.&lt;/p&gt;
&lt;h2 id=&quot;looking-back&quot; tabindex=&quot;-1&quot;&gt;Looking Back &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/both-sides-now/#looking-back&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Conflict is paralysing. It stops anything useful from being achieved. It&#39;s far better to acknowledge the difference, respectfully share our opinion, and leave it at that.&lt;/p&gt;
&lt;p&gt;Starting now, and in years to come, if there are to be any, we ought to try to do the same. If we see someone voice an opinion that riles you, try to think, can I see it from both sides, now?&lt;/p&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/track/1pjATX7sbd6Y4jMVqIvzHk&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; allow=&quot;encrypted-media&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Capture and Minimise Errors in your React Applications</title>
    <link href="https://example.com/posts/capture-minimise-errors-in-react-applications/"/>
    <updated>2019-03-15T10:21:21Z</updated>
    <id>https://example.com/posts/capture-minimise-errors-in-react-applications/</id>
    <content type="html">&lt;p&gt;We&#39;ve all done it. Whether it&#39;s by forgetting to close a function, misspelling a variable or just plain old doing it wrong...&lt;/p&gt;
&lt;p&gt;If we we&#39;ve spent any time developing, specifically with JavaScript, we&#39;ve seen the White Screen of Death. Nothing renders to the screen, and the only way of investigating the issue we caused is by opening the console and looking at the stack trace.&lt;/p&gt;
&lt;p&gt;But what if that error occurs in production? On someone elses&#39; machine? If this is happening (chances are it is) you might be losing a large segment of potential customers (How many? Nobody knows!), not to mention the fact that you have absolutely no visibility about the nature of the error, so debugging and fixing it becomes very difficult.&lt;/p&gt;
&lt;p&gt;In this tutorial we&#39;re going to dive into React&#39;s &lt;code&gt;ErrorBoundary&lt;/code&gt; API to see how it can be used effectively to (1) stop the app from crashing, (2) provide a fallback, and (3) capture data for analysis later.&lt;/p&gt;
&lt;p&gt;This article was originally published in Net Magazine issue 316.&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-get-started!&quot; tabindex=&quot;-1&quot;&gt;Let&#39;s Get Started! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#let&#39;s-get-started!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To save this tutorial from being too long, I&#39;ve included the code for the above on GitHub at &lt;a href=&quot;https://github.com/endymion1818/netmag-react-error-reporting&quot;&gt;https://github.com/endymion1818/netmag-react-error-reporting&lt;/a&gt;. It&#39;s a basic create-react-app setup with axios hooked up to get some data from the Star Wars API. However, there&#39;s a deliberately placed issue in the &lt;code&gt;render()&lt;/code&gt; method that&#39;s causing the app to crash.&lt;/p&gt;
&lt;p&gt;To see this code in action, download or clone the repo. Open this directory in your terminal and install dependencies by running &lt;code&gt;npm i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can run the app in development mode by typing &lt;code&gt;npm start&lt;/code&gt;. It&#39;s time to take a closer look at what&#39;s happening here.&lt;/p&gt;
&lt;h2 id=&quot;error-boundary-api&quot; tabindex=&quot;-1&quot;&gt;Error Boundary API &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#error-boundary-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;ErrorBoundary&lt;/code&gt; API allows us to create a component that wraps around our whole app, an individual component or both. Then, if anything in that component fails, we can define an error message - or a replacement UI component - to appear instead of our broken one.&lt;/p&gt;
&lt;p&gt;We&#39;re going to create a new file, &lt;code&gt;FormErrorBoundary.js&lt;/code&gt; and add some code there. This does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Defines some &lt;code&gt;state&lt;/code&gt; so that we can decide what to do if there is an exception&lt;/li&gt;
&lt;li&gt;Use a built-in React function to set state if there is an error&lt;/li&gt;
&lt;li&gt;Send the error message somewhere we can examine and track it&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ErrorBoundary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;hasError&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;hasError&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// continued below ...&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let&#39;s provide our fallback UI component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ... continued from above&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hasError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Something went wrong &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; our app&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;We&lt;span class=&quot;token string&quot;&gt;&#39;re aware of the problem and we&#39;&lt;/span&gt;re working hard to fix it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;In the meantime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; you can reach us by phone or email&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; children&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s import that into our form, and wrap it around the rest of the component:&lt;br /&gt;
&lt;code&gt;import ErrorBoundary from &#39;./ErrorBoundary&#39;&lt;/code&gt;&lt;br /&gt;
Now if an exception occurs in that component, the visitor will see this message instead. You can trigger it on your machine easily by leaving a tag unclosed or doing something else you know would ordinarily break your app.&lt;/p&gt;
&lt;p&gt;But, how do we capture what has caused our error so we can fix it?&lt;/p&gt;
&lt;h2 id=&quot;grab-bag-and-tag&quot; tabindex=&quot;-1&quot;&gt;Grab, Bag and Tag &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#grab-bag-and-tag&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is where a logging service comes in. Now, inside the &lt;code&gt;componentDidCatch()&lt;/code&gt; method of our ErrorBoundary component, we can send the exception data to a 3rd party service.&lt;/p&gt;
&lt;p&gt;For Enterprise level applications, I&#39;ve enjoyed using Splunk. Splunk is built for more than error reporting and I&#39;ve seen people use it as a conversion metric tool as well. Splunk&#39;s strength is in the vast volumes of data it can collect. It also allows you to visualise your data in charts so you can track trends and analyse data more easily.&lt;/p&gt;
&lt;p&gt;However, for smaller applications Splunk might be a bit overkill. I&#39;ve recently been introduced to Sentry, which offers a simpler set of tools that allow you to collect, categorise, monitor and track your issues.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sentry.io/for/javascript/&quot;&gt;Sentry&lt;/a&gt; has a free tier for developers and is really easy to get started with.&lt;/p&gt;
&lt;h2 id=&quot;error-reporting-with-sentry&quot; tabindex=&quot;-1&quot;&gt;Error Reporting with Sentry &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#error-reporting-with-sentry&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, let&#39;s assume that - even though you&#39;ve tested your app thoroughly - you suspect there are errors happening in production. Or perhaps you want to find out for certain if there are any.&lt;/p&gt;
&lt;p&gt;Let&#39;s add Sentry to this project.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install @sentry&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;browser&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gets the Sentry package which we can now import into our ErrorBoundary, and initialise with our credentials to enable Sentry to recieve our errors:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Sentry &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@sentry/browser&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Sentry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;your-dsn-here&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the &lt;code&gt;componentDidCatch()&lt;/code&gt; function with the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidCatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    Sentry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withScope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setExtra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      Sentry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;captureException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now each time an error occurs, the data will be sent to Sentry, and you can even recieve an email alert!&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-see-it-in-action!&quot; tabindex=&quot;-1&quot;&gt;Let&#39;s see it In Action! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#let&#39;s-see-it-in-action!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Are you ready to see what we&#39;ve been doing? To do that, we need to build our application, and serve it somewhere - ideally your local computer. This step involves installing a local javaScript web server to your computer.&lt;/p&gt;
&lt;p&gt;First, in your terminal, run &lt;code&gt;npm install --global sentry&lt;/code&gt;. Next, from your project directory, run &lt;code&gt;npm build&lt;/code&gt;. This builds the production-ready app. Now we can serve this folder locally by running &lt;code&gt;serve -s build&lt;/code&gt;. Opening up a browser and typing &lt;strong&gt;&lt;a href=&quot;https://localhost:5000/&quot;&gt;https://localhost:5000&lt;/a&gt;&lt;/strong&gt; and you should be able to see our beautiful error message!&lt;/p&gt;
&lt;p&gt;Congratulations! You are no longer in the dark about your JavaScript errors. Now you can increase the usefulness of your app and improve your stability by not only providing a fallback state for your app, but also by reporting and squashing all of your remaining bugs.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;react-testing-caveats&quot; tabindex=&quot;-1&quot;&gt;React Testing Caveats &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#react-testing-caveats&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Catching and reporting errors in the way described in this article does have one caveat: the &lt;code&gt;ErrorBoundary&lt;/code&gt; API is only capable of capturing errors that happen in your app. So errors could occur before your app is loaded that aren&#39;t captured.&lt;/p&gt;
&lt;p&gt;Sentry specifically mentions this in their document, stating that their error reporting tool should be initialised as soon as possible in your application.&lt;/p&gt;
&lt;p&gt;On some projects this is harder to achieve than others without some serious hacking about. On projects with server-side-rendering I&#39;ve been able to write the script into Helmet. That way, the error can be captured by using the &lt;code&gt;window.onerror&lt;/code&gt; browser API instead of React&#39;s built-in API that we&#39;re discussing in the article:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Sentry &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@sentry/browser&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Helmet&lt;br /&gt;	    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;        {&lt;br /&gt;           Sentry.init({&lt;br /&gt;  				dsn: &quot;your-dsn-here&quot;&lt;br /&gt;			})&lt;br /&gt;            window.onerror = Sentry.withScope(scope =&gt; {&lt;br /&gt;      			Object.keys(errorInfo).forEach(key =&gt; {&lt;br /&gt;        			scope.setExtra(key, errorInfo[key])&lt;br /&gt;      			})&lt;br /&gt;      			Sentry.captureException(error)&lt;br /&gt;    		})&lt;br /&gt;        }&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;h2 id=&quot;beware-of-non-standard-error-reporting&quot; tabindex=&quot;-1&quot;&gt;Beware of Non-Standard Error Reporting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#beware-of-non-standard-error-reporting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It may not surprise you to know that the way browsers report errors differs across different rendering engines and implementations. Sometimes, the errorObject object isn&#39;t defined, so you&#39;ll likely get some errors that aren&#39;t that helpful. Most will show you a really helpful level of detail, down to the exact line of code where the error occurred. But don&#39;t expect the same level of reporting from every browser. This doesn&#39;t mean Internet Explorer either. Safari only recently introduced some better error reporting practices. There&#39;s a comprehensive table on Sentry&#39;s blog to identify the inconsistencies, as well as implementing a workaround: &lt;a href=&quot;https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html#browser-compatibility&quot;&gt;https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html#browser-compatibility&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;errors-or-exceptions&quot; tabindex=&quot;-1&quot;&gt;Errors or Exceptions? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/capture-minimise-errors-in-react-applications/#errors-or-exceptions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may have heard situations whre your application fail termed &lt;code&gt;Exceptions&lt;/code&gt; instead of errors. The reason for that is that they&#39;re not errors insofar as a problem with the language but instead exceptional results from the way that language has been used. This means the problem has originated with something that is not driven by by pure logic ... that means you or I. Therefore they are &lt;strong&gt;exceptional&lt;/strong&gt; results from the way you have applied the language.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Better Performance with the React Context API</title>
    <link href="https://example.com/posts/netmag-using-context/"/>
    <updated>2019-04-08T13:21:21Z</updated>
    <id>https://example.com/posts/netmag-using-context/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;People are demanding more and more out of their online services, and businesses strive to excel these demands, leading to more and more complex sites ... and larger JavaScript bundles too!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How can we continue to deliver a first-class experience for users whilst still building for these levels of complexity? One good way of doing this - whilst at the same time as delivering more performant apps - is by using React&#39;s Context API.&lt;/p&gt;
&lt;p&gt;This article was first published in Net Magazine. However, the Context API has been updated since. Please visit the React docs for a more up to date version of how to use Context.&lt;/p&gt;
&lt;h2 id=&quot;what-is-context-and-why-use-it&quot; tabindex=&quot;-1&quot;&gt;What is Context and Why Use It? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#what-is-context-and-why-use-it&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sharing data and other properties across multiple React components previously required either an additional library (popular ones include Redux or Apollo GraphQL) or a lot of &amp;quot;prop drilling&amp;quot;. &amp;quot;Prop drilling&amp;quot; means passing data up and down multiple layers of components which could be labourious, difficult to change when new requirements are built, and lead to confusing code. The Context API, released in React 16.3, aims to reduce our dependency on prop drilling and external libraries.&lt;/p&gt;
&lt;p&gt;Apps can perform faster because changes made to properties no longer require a huge amount of re-rendering on a parent component, since the changes can be made in a separate component and handed down to child components from there.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-context&quot; tabindex=&quot;-1&quot;&gt;How to Use Context &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#how-to-use-context&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have set up a demo of Context in use on Code Sandbox: &lt;a href=&quot;https://codesandbox.io/s/0pl62xq030&quot;&gt;https://codesandbox.io/s/0pl62xq030&lt;/a&gt;. Let&#39;s walk through this  code.&lt;/p&gt;
&lt;p&gt;Context consists of 2 components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &amp;quot;Provider&amp;quot;&lt;/li&gt;
&lt;li&gt;A &amp;quot;Consumer&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiesy way I can think of explaining this relationship is that the &amp;quot;Consumer&amp;quot; is what will be using features &amp;quot;Provided&amp;quot; by our Context.&lt;/p&gt;
&lt;h3 id=&quot;initial-setup&quot; tabindex=&quot;-1&quot;&gt;Initial Setup &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#initial-setup&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a new module called &amp;quot;Context.js&amp;quot; adding the following code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/posts/netmag-using-context/images/using-context-1.png&quot; alt=&quot;using context 1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You might be able to see that on lines 2 &amp;amp; 3, we&#39;re calling on our core library, React, not some external dependency. That&#39;s the first benefit already!&lt;/p&gt;
&lt;p&gt;I like to set up the &lt;code&gt;Consumer&lt;/code&gt; in this file, even though we don&#39;t use it here. It helps me keep track of the logic when it&#39;s all in one place.&lt;/p&gt;
&lt;p&gt;Inside our &lt;code&gt;class&lt;/code&gt; I&#39;ve set up a few items in state to demonstrate what&#39;s going on here.&lt;/p&gt;
&lt;p&gt;Next, create a module containing a few items the user can interact with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/posts/netmag-using-context/images/using-context-2.png&quot; alt=&quot;using context 2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this component, we can loop over an array in our &lt;code&gt;context.state&lt;/code&gt; to create a few checkboxes, and a text description of the output.&lt;/p&gt;
&lt;p&gt;In the next module we&#39;re basically going to duplicate this code but leave out the loop. This module is so we can demonstrate how context can be passed down.&lt;/p&gt;
&lt;p&gt;Next we can create our main app.js file, or index.js if you like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/posts/netmag-using-context/images/using-context-3.png&quot; alt=&quot;using context 3&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the two modules we&#39;ve created don&#39;t have any props passed down from the parent. Instead you get this functionality with the Context provider and children inside that.&lt;/p&gt;
&lt;p&gt;But wait! There&#39;s more we can do to boost performance here.&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-analyse-performance-with-react-developer-tools&quot; tabindex=&quot;-1&quot;&gt;Boxout: Analyse Performance with React Developer Tools &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#boxout:-analyse-performance-with-react-developer-tools&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;React Developer Tools, an extension available on both Firefox and Chrome browsers, is a tool provided by Facebook to help debug your React apps.&lt;/p&gt;
&lt;p&gt;It can also be pretty helpful at identifying where re-renders are happening in your app, allowing you the opportunity to refactor the code if you think it&#39;s necessary.&lt;/p&gt;
&lt;p&gt;To find out where re-renders are occuring in your app, open the developer tools. Along the top of the pane you should see a number of options, including &amp;quot;Elements&amp;quot;, &amp;quot;console&amp;quot; and other tools you&#39;ve probably used before. Once you&#39;ve installed the React Developer Tools you should see a new item labeled &amp;quot;React&amp;quot; Near the far end of this list.&lt;/p&gt;
&lt;p&gt;If you click on the cog icon, you&#39;ll see some additional settings, including &amp;quot;Hilight Updates&amp;quot;.&lt;/p&gt;
&lt;p&gt;Try interacting with your site when &amp;quot;Hilight Updates&amp;quot; is ticked. You might be surprised at how much re-rendering is happening, slowing down the experience for users and having a negative impact on your conversions.&lt;/p&gt;
&lt;p&gt;Now you know where to start fixing the problem!&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-reducing-re-rendering&quot; tabindex=&quot;-1&quot;&gt;Boxout: Reducing Re-rendering &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#boxout:-reducing-re-rendering&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, let&#39;s explain that term. Re-rensweing is what happens when the component you&#39;re using is updated. This has performance implications especially for interactions like dragging (think sliders), and inputting text. Without proper care users could notice lagginess and be put off from using your site. And the potential for laggy or unresponsiveness increases with complexity (because more re-rendering will happen).&lt;/p&gt;
&lt;p&gt;I have found this to be especially true on devices that aren&#39;t the most expensive on the market. JavaScript parsing times can increase horiffically on low- and mid-range devices that don&#39;t run recent versions of Chrome or Firefox. A huge group of people could be impacted, severely affecting your conversions.&lt;/p&gt;
&lt;p&gt;One way I&#39;ve been able to reduce re-renders if by using my context&#39;s state to hold functions as well.&lt;/p&gt;
&lt;p&gt;By moving &lt;code&gt;onItemSelect&lt;/code&gt; out of the class and into the state object, we can call it in a similar way (&lt;code&gt;context.onItemSelect&lt;/code&gt; becomes &lt;code&gt;context.state.onItemSelect&lt;/code&gt; in our modules), and avoid a component update.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;try-using-context-today&quot; tabindex=&quot;-1&quot;&gt;Try Using Context Today &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#try-using-context-today&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you found yourself writing &lt;code&gt;props={props}&lt;/code&gt; all over the place, or using the spread operator to pass props down anonymously (like this: &lt;code&gt;&amp;lt;MyModule {...props}/&amp;gt;&lt;/code&gt;)? Then perhaps Context is a way out of the hole you could have drilled yourself into.&lt;/p&gt;
&lt;p&gt;If you&#39;re looking for a way to reduce the potential for complexity in a project, or reduce performance bottlenecks and you don&#39;t need the extra features that a dedicated state management tool or client-side GraphQL server would provide, chances are Context could equally be your tool for the job.&lt;/p&gt;
&lt;p&gt;Context isn&#39;t going to fit everyone&#39;s use case, nor was it meant to. But it is a  very useful API with some practical features that you might find give your code a little more ... well, context.&lt;/p&gt;
&lt;p&gt;Check out the working code on CodeSandbox: &lt;a href=&quot;https://codesandbox.io/s/0pl62xq030&quot;&gt;https://codesandbox.io/s/0pl62xq030&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#resources&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can learn more about how to use the Context API by using the following resources:&lt;/p&gt;
&lt;h2 id=&quot;official-documentation&quot; tabindex=&quot;-1&quot;&gt;Official Documentation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#official-documentation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The official React documentation is a great place to start especially if you want to understand new APIs like Context, because they&#39;re written so well and shows real world examples that are easy to follow.&lt;/p&gt;
&lt;h2 id=&quot;courses-and-blog-posts&quot; tabindex=&quot;-1&quot;&gt;Courses &amp;amp; Blog posts &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#courses-and-blog-posts&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used these docs to get started using Context, as well as Flavio Copes&#39; guide to the Context API (&lt;a href=&quot;https://flaviocopes.com/react-context-api/&quot;&gt;https://flaviocopes.com/react-context-api/&lt;/a&gt;) and Kent C Dodds&#39; course &amp;quot;Advanced React Component Patterns&amp;quot; on &lt;a href=&quot;http://egghead.io/&quot;&gt;egghead.io&lt;/a&gt; (&lt;a href=&quot;https://egghead.io/courses/advanced-react-component-patterns&quot;&gt;https://egghead.io/courses/advanced-react-component-patterns&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Those resources are great. But there&#39;s nothing like diving in and trying it for yourself. It&#39;ll be challenging to begin with but that&#39;s the best way to learn! I freely admit to getting frustrated, writing poor implementations, and having to start over many times before I understood Context well enough to use it in a project. But if you give up, you only have to come back to it one more time ... until you finally crack it!&lt;/p&gt;
&lt;p&gt;To do that, you could use two fantastic resources that have recently become available:&lt;/p&gt;
&lt;h2 id=&quot;codesandbox&quot; tabindex=&quot;-1&quot;&gt;Codesandbox &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#codesandbox&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Codesandbox (&lt;a href=&quot;http://codesandbox.io/&quot;&gt;codesandbox.io&lt;/a&gt;) is an online editor for creating apps in many languages, with built-in support for React. It&#39;s like codesandbox but with support for javascript modules&lt;/p&gt;
&lt;h2 id=&quot;spectrum.chat&quot; tabindex=&quot;-1&quot;&gt;Spectrum.chat &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-using-context/#spectrum.chat&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://example.com/posts/netmag-using-context/Spectrum.chat&quot;&gt;Spectrum.chat&lt;/a&gt;, built by the creator of styled-components and recently acquired by GitHub, is rapidly becoming a lively community. I&#39;ve found it a great place to share ideas, ask for help and chat about the latest developments in JavaScript, React and other tools I use every day. Hope to see you there!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Developer&#39;s Guide to Professional Development</title>
    <link href="https://example.com/posts/developers-guide-professional-development/"/>
    <updated>2019-05-18T13:21:21Z</updated>
    <id>https://example.com/posts/developers-guide-professional-development/</id>
    <content type="html">&lt;p&gt;I got asked today why I was applying to attend two different conferences this year. Neither of these conferences were cheap; I feel very lucky to have a training budget where I work. On top of these my company generously provides me with access to 2 learning platforms as to help me become a better developer. As well as that, I pay for another learning platform myself. Is so much needed to keep ahead?&lt;/p&gt;
&lt;p&gt;Is any of it really necessary?&lt;/p&gt;
&lt;h1 id=&quot;implementation-details&quot; tabindex=&quot;-1&quot;&gt;Implementation Details &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-guide-professional-development/#implementation-details&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The one thing constant about web development is change. Our industry iterates very quickly, and things that were best practice or popular a year ago soon make way for newer ways of doing things.&lt;/p&gt;
&lt;p&gt;One good example of this is state management in React. Only a short time ago, Redux was a standard requirement on front end job ads, it was almost inseperable from React itself.&lt;/p&gt;
&lt;p&gt;Now there are other ways of having a data layer on the frontend that can be considered alternatives to Redux, like React&#39;s own Context API, or Apollo GraphQL.&lt;/p&gt;
&lt;p&gt;To keep my skillset relevant, and make sure I can easily switch jobs if I should need to, I feel I need to keep up with these trends.&lt;/p&gt;
&lt;p&gt;I think of this part of my learning as the &lt;em&gt;implementation detail&lt;/em&gt; of what we do. We need to keep relatively informed about new ways of doing things (even if we don&#39;t know them in depth) so that we can adapt if we need to.&lt;/p&gt;
&lt;p&gt;To continue to develop in this regard, I mostly follow tutorials on one of the learning platforms I mentioned. But I also think it&#39;s important to get a more general overview by attending a conference that might cover several of these ideas in one go.&lt;/p&gt;
&lt;p&gt;But there&#39;s something else that I think is important too.&lt;/p&gt;
&lt;h1 id=&quot;wider-implications&quot; tabindex=&quot;-1&quot;&gt;Wider Implications &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-guide-professional-development/#wider-implications&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I think it&#39;s also very valuable to keep a close eye on  the &lt;em&gt;wider implications&lt;/em&gt; of web development as an industry, and its intersection with others, what&#39;s going on in the wider world, and how that might affect what we do as developers.&lt;/p&gt;
&lt;p&gt;There might be new technologies or ideas brimming on the horizon which could explode into our day-to-day development work. If we don&#39;t watch out for that we could be caught unaware.&lt;/p&gt;
&lt;p&gt;An example of this could be responsive design. When &amp;quot;A Dao of Web Design&amp;quot; by John Allsop was first published on &amp;quot;A List Apart&amp;quot; it was an early indicator that something was on the horizon.&lt;/p&gt;
&lt;p&gt;Later, when Ethan Marcotte published &amp;quot;Responsive Web Design&amp;quot; which made practical application of Allsop&#39;s ideas, we could begin to see how our industry would be altered forever.&lt;/p&gt;
&lt;p&gt;To cover this aspect of my development I try to keep up with people I know who are thinking along these lines. I also subscribe to A List Apart and Smashing Magazine, two publications who are at the bleeding edge of web development.&lt;/p&gt;
&lt;p&gt;But also, conferences such as Mozilla&#39;s MozFest, or JAMStack Conf, tackle wider issues such as privilege and equality, the latest ideas from the CSS Working Group, and new approaches to systems architecture.&lt;/p&gt;
&lt;h1 id=&quot;continuing...&quot; tabindex=&quot;-1&quot;&gt;Continuing... &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/developers-guide-professional-development/#continuing...&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I think as developers we should be aware of our &amp;quot;CPD&amp;quot; (continuing Professional Development), much like an architecht or doctor would keep up with their industries, and particularly with that&#39;s happening in their area of expertise.&lt;/p&gt;
&lt;p&gt;The Web Development industry must be one of the only self-taught professional industries out there that demands so much of it&#39;s practitioners. We can&#39;t possibly keep up with it all. I certainly can&#39;t.&lt;/p&gt;
&lt;p&gt;I think it&#39;s enough to keep and overview of the trends and latest news just so we aren&#39;t taken completely by surprise when something changes, and choose to deep dive into subjects that appeal to us, or are relevant to our situations.&lt;/p&gt;
&lt;p&gt;In that way, we maintain flexibility in the face of change. And change is always coming!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Building an Accordion Component with React Hooks</title>
    <link href="https://example.com/posts/building-an-accordion-with-react-hooks/"/>
    <updated>2019-06-25T13:21:21Z</updated>
    <id>https://example.com/posts/building-an-accordion-with-react-hooks/</id>
    <content type="html">&lt;p&gt;In this article, we takes a deep dive into creating an accordion module for React that renders on the server, and that works in Internet Explorer 11.&lt;/p&gt;
&lt;p&gt;On a recent project I was involved in creating this Accordion component with a few key requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should provide collapsible section functionality for our users, a significant portion of whom are still on Internet Explorer 11&lt;/li&gt;
&lt;li&gt;It should be as accessible as possible, especially for assistive technology users&lt;/li&gt;
&lt;li&gt;It should show content even if the user hasn&#39;t been able to download JavaScript, or has it turned off&lt;/li&gt;
&lt;li&gt;It can be used multiple times on a page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s get started!&lt;/p&gt;
&lt;h2 id=&quot;basic-setup&quot; tabindex=&quot;-1&quot;&gt;Basic Setup &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#basic-setup&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&#39;s the basic layout for the module:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Accordion&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;question&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Accordion&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will render a basic section and can accept our content labelled &lt;code&gt;question&lt;/code&gt; and &lt;code&gt;answer&lt;/code&gt;. Outside the accordion, I will define an unordered list, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, to wrap around the items.&lt;/p&gt;
&lt;p&gt;The elements used here are one of the suggestions made by Sara Souiedan in her blog post &amp;quot;How do you mark up an accordion?&amp;quot;. It&#39;s well worth a read because it dives deep into the semantic meaning of these elements.&lt;/p&gt;
&lt;p&gt;You can find her excellent article here: &lt;a href=&quot;https://www.sarasoueidan.com/blog/accordion-markup/&quot;&gt;https://www.sarasoueidan.com/blog/accordion-markup/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ie-support-not-needed-use-lessdetailsgreater&quot; tabindex=&quot;-1&quot;&gt;IE Support Not Needed? Use &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#ie-support-not-needed-use-lessdetailsgreater&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Sara&#39;s blog post above, using the &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; elements here for more semantic markup is discussed. This is a HTML-native accordion element!&lt;/p&gt;
&lt;p&gt;If you don&#39;t need to support Internet Explorer 11, use these and skip most of this tutorial: you&#39;ll see that the accordion collapses and opens &lt;em&gt;without any css or javascript&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;functionality&quot; tabindex=&quot;-1&quot;&gt;Functionality &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#functionality&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I&#39;m going to import our first hook. Hooks allow us to write React lifecyle methods without &lt;code&gt;class&lt;/code&gt;es. This means our code can be more functional, or at least not a mix of OO and functional programming.&lt;/p&gt;
&lt;p&gt;First, I need to import the &lt;code&gt;useState&lt;/code&gt; hook along with React from the React library:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I set my state items. There are 2 because &lt;code&gt;setContentVisible&lt;/code&gt; will be a function to update &lt;code&gt;isContentVisible&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setContentVisible&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m setting a default of &lt;code&gt;true&lt;/code&gt; here because I&#39;m using server-side-rendering, so that users without JavaScript (and search engines) can see this content. Now I can use this state directly on my button:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setContentVisible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isContentVisible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;question&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doesn&#39;t this look a lot more straightforward than writing a function before the &lt;code&gt;render&lt;/code&gt; method?&lt;/p&gt;
&lt;h2 id=&quot;screen-reader-assistance&quot; tabindex=&quot;-1&quot;&gt;Screen Reader Assistance &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#screen-reader-assistance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I&#39;m going to add some aria roles to the accordion to indicate to users when the component&#39;s content area is visible or not:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br /&gt;            onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setContentVisible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isContentVisible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;controls&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;accordion-1&quot;&lt;/span&gt;&lt;br /&gt;            aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;expanded&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;question&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ContentContainer&lt;br /&gt;          aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;hidden&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;          id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;accordion-1&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives the screen reader ability to hear which section is open or closed, and the ability to open or close the accordion.&lt;/p&gt;
&lt;p&gt;But that &lt;code&gt;id&lt;/code&gt; isn&#39;t going to cut it for more than one use on a page.&lt;/p&gt;
&lt;p&gt;To do that, we need to set a unique id of the accordion item so we can show the relationship between the control and content elements.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; elementId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I&#39;ve replaced &lt;code&gt;id=&amp;quot;accordion-1&amp;quot;&lt;/code&gt; with &lt;code&gt;id={elementId}&lt;/code&gt; I should have a fairly unique ID that links up the content and the button.&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;the-slings-and-arrows-of-outrageous-smooth-scrolling&quot; tabindex=&quot;-1&quot;&gt;The Slings &amp;amp; Arrows of Outrageous Smooth Scrolling &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#the-slings-and-arrows-of-outrageous-smooth-scrolling&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the requirements you might have with an accordion of this kind is that when the accordion opens / closes, the user is scrolled to the content area or the title.&lt;/p&gt;
&lt;p&gt;You can define a separate &lt;code&gt;toggleElement&lt;/code&gt; function to get the ID of the current element, and scroll to the content area.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; domElementTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; elementId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;offsetTop &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;toggleVisibility&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; domElementTop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;smooth&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s an IE11 caveat with this though. IE calculates &lt;code&gt;scrollTo&lt;/code&gt; differently, with a px value instead of a string or ID. You can use &lt;code&gt;scrollTop&lt;/code&gt; instead, but this doesn&#39;t allow you to have smooth scrolling behaviour which is a nicer effect for users. If you want to support IE11 with smooth scrolling, you can use &lt;code&gt;smoothscroll-polyfill&lt;/code&gt; and call that before &lt;code&gt;window.scrollTo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&#39;s a bug in iOS Safari too! If you want to support Safari on iOS (particularly some iPad versions) it&#39;s advisable to set a timeout when you start scrolling:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// call the polyfill (to support IE11)&lt;/span&gt;&lt;br /&gt;      smoothscroll&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;polyfill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; domElementTop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;smooth&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;showing-and-hiding-content&quot; tabindex=&quot;-1&quot;&gt;Showing &amp;amp; Hiding Content &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#showing-and-hiding-content&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last item we need to take care of is showing / hiding the content area. Now, we could do it this way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isContentVisible &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;br /&gt;       aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;hidden&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;       id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;content-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;AccordionIdentifier&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the use of the double-ampersand. If the &lt;code&gt;isContentVisible&lt;/code&gt; is true, the following block (inside brackets) will show.&lt;/p&gt;
&lt;p&gt;You can also do the show/hide with a class attributes, using the &lt;code&gt;display&lt;/code&gt; property to show &amp;amp; hide them using CSS.&lt;/p&gt;
&lt;p&gt;Lastly, I want to make sure that when my user has got the JavaScript bundle and the page has been &lt;strong&gt;rehydrated&lt;/strong&gt; (see box, &amp;quot;What is Rehydration&amp;quot;), the content is collapsed, ready for them to interact with. I can do that with the &lt;code&gt;useEffect&lt;/code&gt; hook, but I need to make sure I call &lt;code&gt;useEffect&lt;/code&gt; only once, similar to how &lt;code&gt;componentDidMount&lt;/code&gt; was used.&lt;/p&gt;
&lt;p&gt;First, import that from React the same way as the &lt;code&gt;useState&lt;/code&gt; hook:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then reverse the value of &lt;code&gt;setContentVisible&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;setContentVisible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isContentVisible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isContentVisible&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Did you see the extra square brackets (&lt;code&gt;[]&lt;/code&gt;) at the end? By passing an empty array to the &lt;code&gt;useEffect&lt;/code&gt; hook we can call it only once. If we didn&#39;t do that, the &lt;code&gt;state&lt;/code&gt; would be updated every time the component updated in some way.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think using React Hooks is a simpler and tidier workflow that helps our code to be quicker to understand and more flexible. There are some significant changes to the way we use React, but understanding the differences in my opinion is only going to improve the way you write your code.&lt;/p&gt;
&lt;p&gt;You can find this example on Code Sandbox: &lt;a href=&quot;https://codesandbox.io/s/wqnmql8l78&quot;&gt;https://codesandbox.io/s/wqnmql8l78&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-what-is-rehydration&quot; tabindex=&quot;-1&quot;&gt;BOXOUT: What is Rehydration? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#boxout:-what-is-rehydration&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Think of a carton of orange juice. You&#39;ll often see on the side of the packet &amp;quot;from concentrate&amp;quot; or &amp;quot;rehydrated&amp;quot;.&lt;/p&gt;
&lt;p&gt;This means they&#39;ve extracted the water from the juice to condense it. In this way it can be transported more easily, in greater quantities. The water is added back in at the destination.&lt;/p&gt;
&lt;p&gt;Rehydration in JavaScript can be compared with this method. With some frameworks, notably GatsbyJS, our page is built in HTML and rendered in the browser. Then, once the JavaScript is loaded, it replaces the HTML with it&#39;s JavaScript version of the page.&lt;/p&gt;
&lt;p&gt;The advantage is a fully interactive application that is better for SEO and for users.&lt;/p&gt;
&lt;p&gt;There are still some key puzzles to solve with rehydration. I&#39;m looking forward to seeing a time when only parts of a page that need interactivity are rehydrated, instead of having to replace the entire page. But it&#39;s a great way of making faster and more resilient interactive experiences.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-mvt-object-oriented-or-functional-programming&quot; tabindex=&quot;-1&quot;&gt;BOXOUT: MVT, Object-Oriented or Functional Programming? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/building-an-accordion-with-react-hooks/#boxout:-mvt-object-oriented-or-functional-programming&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Managing the code of large applications where several people are contributing over the course of longer periods of time tends to be difficult. In fact any sufficiently complicated system tends to break down over time.&lt;/p&gt;
&lt;p&gt;To combat this tendency in code, people have tried several different approaches. The ones I&#39;m familiar with are MVC, OO (object-oriented) and Functional.&lt;/p&gt;
&lt;p&gt;As far as I know, Angular 1 introduced the MVC principle to the frontend. It tried to keep separate the views (or templates), models (interpretations of data) and controllers (the functional parts) separate.&lt;/p&gt;
&lt;p&gt;This proved in many cases to be a burden on the overall code that was sent down to the client. A few later frameworks experimented with Object Oriented programming, which works great for languages like Ruby and PHP, and can be successfully implemented with JavaScript too.&lt;/p&gt;
&lt;p&gt;However, JavaScript doesn&#39;t really work in an object-oriented way under the hood. The &lt;code&gt;class&lt;/code&gt; keyword was a wrapper around some of the prototypes of the language.&lt;/p&gt;
&lt;p&gt;In an effort to work &lt;em&gt;with&lt;/em&gt; the language instead of imposing an artificial structure on top of it, functional programming has been growing in popularity in recent years.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Normalizing data using array.prototype.reduce</title>
    <link href="https://example.com/posts/normalizing-data-using-reduce/"/>
    <updated>2019-07-18T14:21:21Z</updated>
    <id>https://example.com/posts/normalizing-data-using-reduce/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;reduce() has terrified me for some time! I hadn&#39;t wanted to touch this new array method because I couldn&#39;t quite follow what each of it&#39;s properties meant. But recently I had an opportunity to deep dive into this function. Here&#39;s how I refactored an object to get the results I needed:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m beginning to realise how important good API design is. One API I call for a project has only one endpoint: a list of items. Each item is quite large, with loads of tags and categories. Yet I can&#39;t query the API by any of those.&lt;/p&gt;
&lt;p&gt;This became an issue when I had a requirement to display them by categories. The real trick was that the category was inside a nested object. AND it had to be matched and replaced by a different value before I displayed it.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example of the object once I&#39;d parsed the JSON:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;some title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;teamone&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I needed for it to be displayed was this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;teamone&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;some title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;teamone&quot;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;step-1:-map-and-replace-values&quot; tabindex=&quot;-1&quot;&gt;Step 1: Map &amp;amp; Replace values &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normalizing-data-using-reduce/#step-1:-map-and-replace-values&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing I did was to map the new values of the team using the following method:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;br /&gt;itemsTeamsMap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string-property property&quot;&gt;&quot;teamone&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string-property property&quot;&gt;&quot;teamtwo&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; itemsMapped &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filteredItems &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; edges&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; itemsTeamsMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    itemsMapped&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was especially important because it wasn&#39;t a 1:1 match, some teams would be reassigned to other new values.&lt;/p&gt;
&lt;h2 id=&quot;step-2:-sort-items-using-reduce()&quot; tabindex=&quot;-1&quot;&gt;Step 2: Sort items using Reduce() &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normalizing-data-using-reduce/#step-2:-sort-items-using-reduce()&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once I had that, I needed to sort my items by the new team values I&#39;d given them so that grouping would be easier using a bubble sort:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sortedItems &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ItemsMapped&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    acc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    acc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; acc&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took me a good while to get my head around the reduce function, something that&#39;s been called the most powerful function in JavaScript. The first argument is the accumulator value, or something which accumulates each iteration of the function.&lt;/p&gt;
&lt;p&gt;The second value is the current item you&#39;re iterating over, which you can modify with any function you put into the body.&lt;/p&gt;
&lt;p&gt;Here&#39; I&#39;m pushing the current value into the team item of each item in the accumulator and then creating an object from that value.&lt;/p&gt;
&lt;p&gt;The result of this function on my original data is this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;team1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;some title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;team1&#39;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was a good deal closer to the final object that I needed. Of course though, I needed an array of objects that I could iterate over in my JSX template...&lt;/p&gt;
&lt;h2 id=&quot;step-3:-array-of-objects&quot; tabindex=&quot;-1&quot;&gt;Step 3: Array of Objects &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/normalizing-data-using-reduce/#step-3:-array-of-objects&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; finalisedItems &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sortedItems&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;      acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        team&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I love the new object methods introduced recently to JavaScript. They allow you to do so much more with objects natively ... in this function, for each entry of the object I&#39;m passing in, it will concat the team into an array of objects, where team is the title, and each group of items is an array of objects inside of that:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;team1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;some title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;team1&#39;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;team2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;some other title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;team2&#39;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 4: templating&lt;br /&gt;
Now I can iterate over each team, then each item in that team, outputting semantic elements (‹li›s) for each item:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;finalisedItems&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;itemsTeam&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;itemsTeam&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;itemsTeam&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;itemsTeam&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going the extra mile in normalising this object isn&#39;t a challenge I relished, however I have improved a lot as a developer by working through and providing a solution.&lt;/p&gt;
&lt;p&gt;I learned that trying to do a faster job didn&#39;t yield the correct results, so my fastest solution was by far the best.&lt;/p&gt;
&lt;p&gt;Sometimes you&#39;ve just got to knuckle down, go in for the long haul, and you&#39;ll find you&#39;ve come out the other end similarly restructured (in a good way!)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Art of Compromise</title>
    <link href="https://example.com/posts/the-art-of-compromise/"/>
    <updated>2019-08-08T10:21:21Z</updated>
    <id>https://example.com/posts/the-art-of-compromise/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;We developers are inherently precious about things. Our tools. Our technologies. But we can&#39;t afford to be precious about those things too much. In fact, working in cross-functional teams and with other teams means that we sometimes need to compromise.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was seething.&lt;/p&gt;
&lt;p&gt;So upset that, I have to admit, I came close to criticising someone whose opinions I really value, and who is a more skilled developer than I. This was because they said they didn&#39;t like the way I was leveraging the CSS cascade: &amp;quot;It makes components leaky and not well encapsulated&amp;quot;.&lt;/p&gt;
&lt;p&gt;I love the cascade, and have been using it to pass down colours to components instead of re-declaring colours on each paragraph, heading and link inside nested components. I thought this was an approach that everyone should take: use the cascade to our advantage.&lt;/p&gt;
&lt;p&gt;I nearly voiced some critical opinions to my colleage. Then our designer spoke up. &amp;quot;We need to stop discussing this between just two people. Involve all of the other developers working on this set of components. Then you can reach consensus and all be in alignment.&amp;quot;&lt;/p&gt;
&lt;p&gt;He was right. Everyone has an opinion, and whether one is correct or another is isn&#39;t up for debate. What truly matters is what the consensus is.&lt;/p&gt;
&lt;p&gt;Compromise is a strength, not a weakness. And on any project that involves more than one person (which is, like, all of them), it&#39;s the only way of moving forwards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The Art of compromise has been our greatest strength&amp;quot; — Clannad&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Getting Started with TypeScript</title>
    <link href="https://example.com/posts/getting-started-with-typescript/"/>
    <updated>2019-08-22T13:21:21Z</updated>
    <id>https://example.com/posts/getting-started-with-typescript/</id>
    <content type="html">&lt;p&gt;Mention TypeScript to a developer who works with JavaScript and you&#39;ll probably get one of two responses: they will either struggle to understand why someone would NOT want to use TypeScript, or they will struggle to see why someone WOULD use it.&lt;/p&gt;
&lt;p&gt;I think this sometimes depends on where you started your journey to JavaScript. Often people come to the language from a server-side language such as C or Java, which are statically typed. In these languages, dynamic typing is seen as a real hazard, an unsafe practice.&lt;/p&gt;
&lt;p&gt;But if you&#39;ve started your journey as a developer from HTML and CSS, you&#39;ve probably been more used to the generally more ... dynamic ... world of the frontend.&lt;/p&gt;
&lt;p&gt;If this is the case, but you hate the fact that your application is blowing up in production, and the cause is often a typeError, or you want to improve communication between developers working on a project, TypeScript can be a good solution.&lt;/p&gt;
&lt;p&gt;In this article we&#39;re going to introduce some of the concepts of TypeScript using Styled Components. I&#39;ve chosen this route because I think it gives us a good insight into how certain features can be used without introducing more complicated concepts too soon.&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-get-started!&quot; tabindex=&quot;-1&quot;&gt;Let&#39;s Get Started! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#let&#39;s-get-started!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this tutorial, we&#39;re going to take a react template that uses styled components and move it to TypeScript.&lt;/p&gt;
&lt;p&gt;The original code we&#39;re going to use is here: &lt;a href=&quot;https://codesandbox.io/s/netmag-react-typescript-4l4cj&quot;&gt;https://codesandbox.io/s/netmag-react-typescript-4l4cj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fork this code, and open on the &lt;strong&gt;Container.js&lt;/strong&gt; module. We&#39;ll work through it together to convert it to TypeScript.&lt;/p&gt;
&lt;p&gt;The project on CodeSandbox already has a compiler set up for TypeScript. So we can start by renaming our file. Instead of &lt;code&gt;.js&lt;/code&gt; at the end, change it to &lt;code&gt;.tsx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Don&#39;t forget the x! This tells the compiler to use JSX, the templating language often used with React. If you didn&#39;t have an x at the end, you would start to see some very verbose errors very quickly.&lt;/p&gt;
&lt;p&gt;Already, TypeScript is working for us. By forcing us to have an x at the end of the file, we can see that this module contains a JSX template. So it&#39;s easier to see at a glance what&#39;s going on in each file.&lt;/p&gt;
&lt;h2 id=&quot;what-is-an-interface&quot; tabindex=&quot;-1&quot;&gt;What is an Interface? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#what-is-an-interface&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript works by forcing us to tell it what properties are going into, and coming out of, our functions. Since styled components are functions, we have to type these as well.&lt;/p&gt;
&lt;p&gt;Let&#39;s add our first interface!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&#39;re declaring what will interface with our function. As a convention we should use a capital I at the start of the name so that we can more easily see later that it is an interface, instead of anything else (more about what else it could be in a bit ...)&lt;/p&gt;
&lt;p&gt;Let&#39;s add our first property:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve given &lt;code&gt;bgColor&lt;/code&gt; the type &amp;quot;string&amp;quot; here. This means that it can only be a &lt;code&gt;string&lt;/code&gt; value. If someone comes to use our component and writes &lt;code&gt;bgColor={42}&lt;/code&gt;, they&#39;ll see a red underline, indicating an invalid type has been used! Usually this means a PR won&#39;t pass quality checks or you will be prevented from pushing code to a branch in the repo.&lt;/p&gt;
&lt;p&gt;I want to restrict the use of the next property, text colour, a little more than that. I want them to have the choice between only black and gray text. Because of this, I&#39;m going to rename &lt;code&gt;textColour&lt;/code&gt; to &lt;code&gt;lighterText&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    lighterText&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; boolean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The question mark (&lt;code&gt;?&lt;/code&gt;) tells the compiler that lighterText is an optional property. If nothing is declared, it&#39;ll be false by defaut. Within my styled component, I can output grey or black based on this boolean value:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lighterText&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lighterText &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be shortened a little bit by some destructuring:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; lighterText &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lighterText &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;introducing-enums:-a-type-of-types&quot; tabindex=&quot;-1&quot;&gt;Introducing Enums: A Type of Types &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#introducing-enums:-a-type-of-types&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For my final property, I want to introduce you to the humble &lt;code&gt;enum&lt;/code&gt;. enums, I&#39;m told by reliable sources (wikipedia), have been around for a while. Instead of a normal type, say a &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;, an &lt;code&gt;enum&lt;/code&gt; is it&#39;s own type.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;enum&lt;/code&gt; is going to declare the container widths I want people to have access to:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; EContainerWidth &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token constant&quot;&gt;SMALL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;36rem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token constant&quot;&gt;MEDIUM&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;48rem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token constant&quot;&gt;LARGE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;64rem&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can you see the name I&#39;ve given the &lt;code&gt;enum&lt;/code&gt; starts with a capital &lt;code&gt;E&lt;/code&gt;? This is the equivalent of using a capital &lt;code&gt;I&lt;/code&gt; for the interface.&lt;/p&gt;
&lt;p&gt;Now I&#39;m going to declare that my &lt;code&gt;containerWidth&lt;/code&gt; property is a type of &lt;code&gt;EContainerWidth&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;bgColor&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;lighterText&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; boolean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;containerWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EContainerWidth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes sure someone can only use these values for the container width. In this way, how a developer uses this module can be controlled more tightly. So, no more accidentally setting the container width to something that doesn&#39;t match the design. It also helps a developer to stop and think more carefully about their choices.&lt;/p&gt;
&lt;p&gt;So, now, how do I tell my styled component about my interface? By adding chevrons after the tag declaration, but before the body of the function (inside the backticks), and writing the name of my interface there:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;containerWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EContainerWidth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;  styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;br /&gt;  ISContainerProps &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    max-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; containerWidth &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; containerWidth&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;typing-the-template&quot; tabindex=&quot;-1&quot;&gt;Typing the Template &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#typing-the-template&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we need to tell the compiler what the type is for our JSX template. I&#39;m using a React functional component (&lt;code&gt;FC&lt;/code&gt;) for this project. The type for this can be imported directly from React at the top of our module:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to pass in our properties. They&#39;re the same as the ones we&#39;ve used above, with one addition: the children, other react nodes we want to render inside the template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export interface IContainerProps {}

export const Container: FC&amp;lt;IContainerProps&amp;gt; = ({
    ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interfaces can be re-used and extended by other interfaces. This is going to be particularly useful when it comes to our JSX template:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IContainerProps&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the template has the same types as our styled component. Now let&#39;s add the additional property. We mentioned that this was a React node, and that&#39;s another type we can import from react:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ReactNode&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IContainerProps&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ISContainerProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ReactNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are ready to use our template!&lt;/p&gt;
&lt;h2 id=&quot;using-the-template&quot; tabindex=&quot;-1&quot;&gt;Using the Template &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#using-the-template&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;ve declared an &lt;code&gt;enum&lt;/code&gt; for our container width. We need other developers to have access to this when using our template.&lt;/p&gt;
&lt;p&gt;Because we have already exported our &lt;code&gt;enum&lt;/code&gt;, we can import it along with our component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Container&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; EContainerWidth &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a global file in my &lt;strong&gt;src/&lt;/strong&gt; folder (usually I call it &amp;quot;tokens&amp;quot;) where all of my project&#39;s enums are kept. This is much better for helping others discover what properties they have access to, and it&#39;s much easier to re-use them.&lt;/p&gt;
&lt;p&gt;Now, instead of assigning properties to the template at will, every time you or another developer comes to use it, you or they will have reason to pause and make sure they&#39;re using it in the way it was intended:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container&lt;br /&gt;  bgColor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;br /&gt;  lighterText&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  containerWidth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;EContainerWidth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MEDIUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  JavaScript Container&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you got this far and followed along, congratulations on making your first TypeScript component!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;start-using-typescript-today&quot; tabindex=&quot;-1&quot;&gt;Start Using TypeScript today &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#start-using-typescript-today&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript is one of the fastest growing trends in JavaScript. Reinforcing types in your application can help you avoid making fatal errors in production, especially when working with teams of developers. By using TypeScript we can lean on our IDEs more and simplify our workflow, introduce self-documentation and better code hinting.&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-what-is-typescript&quot; tabindex=&quot;-1&quot;&gt;BOXOUT: What is TypeScript? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#boxout:-what-is-typescript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript was developed by Google specifically for the frontend framework AngularJS. It&#39;s not a separate language to JavaScript, but a superset, it adds to the existing language. You can write in normal JavaScript, but you add special syntax to identify types for functions, variables etc.&lt;/p&gt;
&lt;p&gt;TypeScript needs to be compiled to normal JavaScript to be used on a browser. But this is an advantage: errors that are generated can be caught and mitigated before anything goes into production.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-static-vs-dynamic-typing&quot; tabindex=&quot;-1&quot;&gt;BOXOUT: Static vs Dynamic Typing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#boxout:-static-vs-dynamic-typing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most powerful features of any programming language is the ability to store things in allocated memory, often called a variable, the value of which can be updated or changed by the program.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// define a variable&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// define a function which will change it&#39;s value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateAVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a is now a string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// call the function&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;updateAVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;a is now a string&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This demonstrates how powerful JavaScript&#39;s dynamic typing is. The variable a can be anything: a string of letters, a number, whatever you want.&lt;/p&gt;
&lt;p&gt;The problem with that is it can easily break stuff:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addOneToA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;addOneToA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// &#39;a is now a string1&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By contrast, static typing means that you&#39;ll only use one type of thing, and if that changes, you will know about it before you even run the code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateAVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a is now a string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// typeError!&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine our variable comes from another location, which is written or controlled by another team. Imagine that variable, somehow and without your knowledge, starts returning a string instead of a number.&lt;/p&gt;
&lt;p&gt;In that case, we now have a failure in the application. It could be crashing in production. The only way to check it might be to manually go through the checkout process, add something to your cart and try to purchase an item.&lt;/p&gt;
&lt;p&gt;Instead, your code editor, terminal or CI tool lets you know, potentially before even running the code that there could be the possibility of a failure like this in your application.&lt;/p&gt;
&lt;p&gt;That&#39;s one reason why I like using Typescript: my code editor tells me where I&#39;ve made a mistake, and it won&#39;t let me push code to my Git repo unless some TypeScript rules I&#39;ve given it are followed.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-resources&quot; tabindex=&quot;-1&quot;&gt;BOXOUT: Resources &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/getting-started-with-typescript/#boxout:-resources&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are some great resources for TypeScript out there, and they&#39;re growing as more people write about their experience with the language. Here are some places to start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;https://www.typescriptlang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://definitelytyped.org/guides/best-practices.html&quot;&gt;https://definitelytyped.org/guides/best-practices.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dzharii/awesome-typescript&quot;&gt;https://github.com/dzharii/awesome-typescript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main problem I have with TypeScript is that people writing about it assume you&#39;ve got good conceptual programming understanding to begin with, so it&#39;s hard to pick up for newer developers.&lt;/p&gt;
&lt;p&gt;If you want a good beginner level course on TypeScript, I can really recommend this one by Scott Tolinski. Scott is great at explaining things simply and clearly without assuming too much:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.leveluptutorials.com/tutorials/level-1-typescript&quot;&gt;https://www.leveluptutorials.com/tutorials/level-1-typescript&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>2019 Review / 2020 Aims</title>
    <link href="https://example.com/posts/2019-review-2020-aims/"/>
    <updated>2020-01-11T14:21:21Z</updated>
    <id>https://example.com/posts/2019-review-2020-aims/</id>
    <content type="html">&lt;p&gt;I &lt;a href=&quot;https://example.com/post/2018-review-2019-aims/&quot;&gt;opened last year&#39;s post&lt;/a&gt; by stating what a rollercoaster it had been for me. Well, this year has been no different; I started out the year becoming a father for the third time. That has been a wonderful, exhausting experience!&lt;/p&gt;
&lt;p&gt;Professionally too, my team went from a band of three (a developer, QA and project manager), to one of five to seven people, including another full-time developer, my personal friend and former colleague &lt;a href=&quot;https://way2adv.com/&quot;&gt;David&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;David and the other members of the team have taught me a great deal. Here are some of the main learns I think I&#39;ve achieved:&lt;/p&gt;
&lt;h2 id=&quot;what-i-think-i-achieved-last-year&quot; tabindex=&quot;-1&quot;&gt;What I think I achieved last year &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#what-i-think-i-achieved-last-year&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-typescript&quot; tabindex=&quot;-1&quot;&gt;1. TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#1.-typescript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TypeScript was going to be one of the biggest accelarators for me in terms of the quality of my output, and I have really enjoyed using it. I started out by implementing interfaces and ended up configuring my environments with much more type safe settings by using &lt;code&gt;noImplicitAny&lt;/code&gt; and similar.&lt;/p&gt;
&lt;h3 id=&quot;2.-testing&quot; tabindex=&quot;-1&quot;&gt;2. Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#2.-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not just unit and integration, but I&#39;ve also started to plan and develop end-to-end tests as well. I&#39;ve become a lot more aware of the value of tools like Cypress and Percy, and have even started to write some components using test-driven development.&lt;/p&gt;
&lt;h3 id=&quot;3.-docker-kubernetes-ci-tools&quot; tabindex=&quot;-1&quot;&gt;3. Docker, Kubernetes, CI tools &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#3.-docker-kubernetes-ci-tools&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hoped to continue my journey into DevOps / Site Reliability Engineering by learning these tools, but I&#39;ve hit a bit of a philisophical roadblock.&lt;/p&gt;
&lt;p&gt;I think I know enough about Docker to use it fairly well, and I&#39;m getting to grips with the basics of Kubernetes and CI tools (I&#39;ve been involved in writing build scripts for Jenkins and CircleCI).&lt;/p&gt;
&lt;h3 id=&quot;4.-do-more-than-ui-development&quot; tabindex=&quot;-1&quot;&gt;4. Do more than UI Development &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#4.-do-more-than-ui-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I started the year by saying I wanted to do more &amp;quot;logic-based development&amp;quot;, however I now think those words were ill chosen. The logic of what you&#39;re building is so tied to the requirements of what you&#39;re working with that applying it to a UI or an API (or something of that nature) is equivalent.&lt;/p&gt;
&lt;p&gt;I&#39;ve been able to improve my coding chops this year so that JavaScript no longer daunts or scares me. I would no longer feel inadequate if I looked up on MDN even simple functions like &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;reduce&lt;/code&gt; in order to achieve the task at hand.&lt;/p&gt;
&lt;p&gt;I still consider myself a Frontend Developer, but I now think that&#39;s more to do with circumstances than it is ability.&lt;/p&gt;
&lt;h2 id=&quot;what-i-want-to-achieve-this-year&quot; tabindex=&quot;-1&quot;&gt;What I Want to Achieve This Year &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#what-i-want-to-achieve-this-year&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Only this week I was screensharing with our tech lead, watching him whizz around Kubernetes pods like that scene in Valerian, killing and restarting pods, chatting with the SRE team, &lt;code&gt;ssh&lt;/code&gt;ing into a container and using a &lt;code&gt;bash&lt;/code&gt; script to figure out what was going on there.&lt;/p&gt;
&lt;p&gt;I&#39;d love to have the confidence to do that. So that&#39;s the two things I&#39;m going to add first:&lt;/p&gt;
&lt;h3 id=&quot;1.-bash-scripting&quot; tabindex=&quot;-1&quot;&gt;1. Bash scripting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#1.-bash-scripting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&#39;s becoming clear to me there&#39;s a huge benefit to learning this. If I&#39;d known Bash, I would be able to customise my environments far beyond what I can achieve currently.&lt;/p&gt;
&lt;h3 id=&quot;2.-continue-getting-to-grips-with-kubernetes&quot; tabindex=&quot;-1&quot;&gt;2. Continue getting to grips with Kubernetes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#2.-continue-getting-to-grips-with-kubernetes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kubernetes is an awesome tool, and has so many applications outside web development. I&#39;d love to at least be able to understand it&#39;s lifecycle methods and helper functions well enough to see what&#39;s going on in my stack and fix minor issues.&lt;/p&gt;
&lt;h3 id=&quot;3.-serverless!&quot; tabindex=&quot;-1&quot;&gt;3. Serverless! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#3.-serverless!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Serverless really makes sense to me. That separation of concerns with the frontend, backend and satellite services, lambda functions, and other functionality, just seems more natural and less of a cognitive overload.&lt;/p&gt;
&lt;p&gt;I&#39;d love to think that by the end of 2020 I will be able to write a Terraform script and get a system comprised of a few key pieces not only up and running but fully deployed, monitored and testable too.&lt;/p&gt;
&lt;h3 id=&quot;4.-writing&quot; tabindex=&quot;-1&quot;&gt;4. Writing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2019-review-2020-aims/#4.-writing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One thing that has surprised me is that I really love writing about web development. This way I can help others by utilising another skill I think I have: being able to write moderately well.&lt;/p&gt;
&lt;p&gt;My relationship with Net magazine is very strong, and I&#39;d love to see if I can write a bit more of the kinds of articles that have been well received by their audience so far. This might be more difficult to achieve though because of the lack of personal time I currently have.&lt;/p&gt;
&lt;p&gt;That&#39;s it I think! Let&#39;s see what&#39;ll happen this year!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A recipe for quick and dirty ramen</title>
    <link href="https://example.com/posts/quick-and-dirty-ramen/"/>
    <updated>2020-01-28T13:21:21Z</updated>
    <id>https://example.com/posts/quick-and-dirty-ramen/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I really like asian food. I&#39;ll go for gyoza / jiaozi any day over a &amp;quot;traditional&amp;quot; sunday roast. One thing I love most is ramen, but it&#39;s taken me ages to invent my own recipe.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So this is a very quick and loose recipe, please don&#39;t stick to it, I&#39;m sure it can be improved upon!&lt;/p&gt;
&lt;h2 id=&quot;ingredients&quot; tabindex=&quot;-1&quot;&gt;Ingredients &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/quick-and-dirty-ramen/#ingredients&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 pack miso soup (one of the paste varieties are best)&lt;/li&gt;
&lt;li&gt;Soy sauce (light or dark, I can&#39;t decide)&lt;/li&gt;
&lt;li&gt;Small amount of sesame oil&lt;/li&gt;
&lt;li&gt;1 spring onion, finely chopped&lt;/li&gt;
&lt;li&gt;I egg, fried or boiled&lt;/li&gt;
&lt;li&gt;A little meat (optional), pork or chicken&lt;/li&gt;
&lt;li&gt;Small quantity of chopped pepper&lt;/li&gt;
&lt;li&gt;Pinch of garlic (to taste)&lt;/li&gt;
&lt;li&gt;Small quantity of ginger (to taste)&lt;/li&gt;
&lt;li&gt;dried chilli&lt;/li&gt;
&lt;li&gt;Rice noodles&lt;/li&gt;
&lt;li&gt;Boiled water&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/ramen.jpg&quot; alt=&quot;A bowl of ramen made with my recipe&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;method&quot; tabindex=&quot;-1&quot;&gt;Method &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/quick-and-dirty-ramen/#method&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Put the noodle into a bowl. Pour in the boiled water. Whilst they&#39;re getting ready, fry your egg. I like to keep it a little runny, so it mixes into the soup a little.&lt;/p&gt;
&lt;p&gt;You could fry the other ingredients (except the spring onion) together beforehand, but that&#39;s just a little nicer if you have time. Otherwise, throw them into the hot water.&lt;/p&gt;
&lt;p&gt;Once all the ingredients are in, add the spring onion.&lt;/p&gt;
&lt;p&gt;If the water has cooled down or the noodles haven&#39;t absorbed water enough, put the bowl in a microwave for a minute or so.&lt;/p&gt;
&lt;p&gt;Add the egg, and serve with chopsticks.&lt;/p&gt;
&lt;h2 id=&quot;variations&quot; tabindex=&quot;-1&quot;&gt;Variations &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/quick-and-dirty-ramen/#variations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve sometimes used mackerel fried in Lao Gan Ma&#39;s crunchy chilli paste, instead of the meat. That stuff is awesome and goes with almost anything.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Published Article: Unit Test your React apps</title>
    <link href="https://example.com/posts/netmag-unit-test/"/>
    <updated>2020-02-25T10:21:21Z</updated>
    <id>https://example.com/posts/netmag-unit-test/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Do you really know what your code does what it is supposed to do? Have you tested it in the browser? What if you haven&#39;t, or you can&#39;t test everything, and it breaks in production?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A testing library is a group of utilties that developers use to write individual tests on our application components. Some of the principle parts of a test are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Description: describe what the test is about&lt;/li&gt;
&lt;li&gt;Use / Render: uses the component in an environment where it can be tested&lt;/li&gt;
&lt;li&gt;Mocking: create pretend functions, so that you can check your assumptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article I&#39;m going to show some examples from React Testing Library to help you get started with this valuable way of improving the robustness of your code output.&lt;/p&gt;
&lt;h2 id=&quot;getting-started-with-react-testing-library&quot; tabindex=&quot;-1&quot;&gt;Getting Started with React Testing Library &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#getting-started-with-react-testing-library&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m going to use create-react-app for this demo, because it already comes preconfigured with the testing library. If you&#39;re using Gatsby or a custom setup, there might be some configuration you need to run through before you start using the testing library.&lt;/p&gt;
&lt;p&gt;To start let&#39;s create a new app. If you have a recent version of Node.js already, you can run the following command without installing anything else globally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx create-react-app netmag-javascript-testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open the folder in your code editor.&lt;/p&gt;
&lt;p&gt;Create-react-app is great because you can already run yarn test and see that one test is already passing. This command will also keep watching for file changes, so you can see straight away whether or not the tests you write are passing.&lt;/p&gt;
&lt;p&gt;Let&#39;s start writing some tests!&lt;/p&gt;
&lt;h2 id=&quot;what-to-test&quot; tabindex=&quot;-1&quot;&gt;What to Test &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#what-to-test&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine we have a simple component, say a button with some state. What are some of the things that need testing in a component like this?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The appearance of the component&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We don&#39;t want anything to change unexpectedly after we&#39;ve written our component. So we&#39;re going to write a &lt;em&gt;snapshot&lt;/em&gt; test to capture how it renders. Then, if anything changes we will see it quickly, without a manual or visual test. This is great for components that consist of many smaller components: you can see quickly when (and where) it&#39;s appearance has been affected.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The different &lt;em&gt;branches&lt;/em&gt; that render&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because we could have 2 or more different outputs, we need to test that it&#39;s rendering all of them correctly, not just one. So we need to simulate a click event and have another snapshot test for the way it renders after this &lt;em&gt;branch&lt;/em&gt; of code has been run.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That functions get called as expected&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We want to ensure that the code we wrote to call another function works as we assume it will. But since that function is an &lt;em&gt;external dependency&lt;/em&gt;, we don&#39;t want to test that here. Our tests should encapsulate only the functionality we want them to.&lt;/p&gt;
&lt;h2 id=&quot;writing-our-first-test&quot; tabindex=&quot;-1&quot;&gt;Writing our First Test &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#writing-our-first-test&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s write our first test. Create a new file called &lt;strong&gt;MyComponent.unit.test.js&lt;/strong&gt; in the same folder as the component. By adding &lt;strong&gt;test.js&lt;/strong&gt; at the end, it&#39;ll be automatically picked by the testing library. The contents of that file are below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;

import { render } from &#39;@testing-library/react&#39;

import MyComponent from &#39;./MyComponent&#39;

describe(&#39;the &amp;lt;MyComponent /&amp;gt;&#39;, () =&amp;gt; {

    // tests go here

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing I want to draw your attention to is the describe() function, which takes 2 arguments: the first is a string that you can use to better &lt;em&gt;describe&lt;/em&gt; as a string of text what your test is going to be doing. In our case we&#39;ve said simply that it should render. This is very useful when someone else looks at your code, or you have to remember what you did at a later stage. Writing good &amp;quot;describe&amp;quot; statements is a form of code documentation, and another good reason for writing tests!&lt;/p&gt;
&lt;p&gt;The second argument are your tests. The &lt;code&gt;describe()&lt;/code&gt; function will run all of these tests one after the other.&lt;/p&gt;
&lt;h2 id=&quot;cleanups&quot; tabindex=&quot;-1&quot;&gt;Cleanups &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#cleanups&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s introduce helper function called &lt;code&gt;beforeEach()&lt;/code&gt;. We need to use this because each time we do something with the component, we want a fresh copy without the props we previously had passed to it still existing in the component. Or we might need to re-render the component. &lt;code&gt;beforeEach()&lt;/code&gt; does that for us, and we can pass it the cleanup function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { render, cleanup } from &#39;@testing-library/react&#39;

...

describe(&#39;the component should render&#39;, () =&amp;gt; {

  beforeEach(cleanup)

 }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;writing-a-snapshot-test&quot; tabindex=&quot;-1&quot;&gt;Writing a Snapshot Test &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#writing-a-snapshot-test&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this step, we&#39;re going to &amp;quot;mount&amp;quot; our component (or render it).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&#39;the component should render&#39;, () =&amp;gt; {

  beforeEach(cleanup)

  it(&#39;renders with basic props&#39;, () =&amp;gt; {

    render(&amp;lt;MyComponent /&amp;gt;)

  })

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This render gives us access to all of the rendered properties of the compiled component. It might be good to drop this into a &lt;code&gt;console.log()&lt;/code&gt; so you can see more clearly what it does.&lt;/p&gt;
&lt;p&gt;If you do, you&#39;ll see that there&#39;s a few useful properties we can take advantage of here. I&#39;m going to make an assertion (make a testable declaration) and test it by extracting the container. The container &amp;quot;contains&amp;quot; the DOM nodes (all of the HTML) associated with the component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it(&#39;renders with basic props&#39;, () =&amp;gt; {

    const { container } = render(&amp;lt;MyComponent /&amp;gt;)

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have access to the container, how do I tell that it&#39;s rendered according to my assertion? By adding a &lt;em&gt;snapshot&lt;/em&gt; test.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;snapshot&lt;/em&gt; is like a photograph. It takes a snapshot of our component at a specific point in time. Then, whenever we make alterations to the code, we can see if it still matches the original snapshot. If it does, we can be confident that nothing has changed in the component.&lt;/p&gt;
&lt;p&gt;However, if it doesn&#39;t we might have uncovered an issue that originated in another component, one that we might not have spotted previously:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  it(&#39;renders with basic props&#39;, () =&amp;gt; {

    const { container } = render(&amp;lt;MyComponent /&amp;gt;

    expect(container).toMatchSnapshot()

  )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing-properties&quot; tabindex=&quot;-1&quot;&gt;Testing Properties &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#testing-properties&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Props, or properties, of a component can be tested with snapshots too. Testing the different props you provide to your component will give you greater coverage and confidence ... you never know when a requirement is going to mean your component&#39;s props are refactored and the final output will change:&lt;/p&gt;
&lt;p&gt;Add this object to the top of your file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const lightProperties = {

    backgroundColour: &#39;white&#39;,

    textColour: &#39;darkblue&#39;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We define the properties in an object and then use the spread operator (three dots followed by the object name, &lt;code&gt;...lightproperties&lt;/code&gt;) in this way because we can only pass one argument in when we render in this way. It&#39;s also useful to see what properties you&#39;re passing in isolation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    it(&#39;renders with basic props&#39;, () =&amp;gt; {

        const { container } = render(&amp;lt;MyComponent /&amp;gt;

      )

     expect(container).toMatchSnapshot()

    })

    it(&#39;renders with the light version props&#39;, () =&amp;gt; {

        const { container } = render(

            &amp;lt;MyComponent { ...lightProperties } /&amp;gt;

        )

        expect(container).toMatchSnapshot()

    })
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing-changes-in-the-ui&quot; tabindex=&quot;-1&quot;&gt;Testing Changes in the UI &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#testing-changes-in-the-ui&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine that our component has a button, and you want to make sure that something happens when the button is clicked.&lt;/p&gt;
&lt;p&gt;You might think that you want to test the state of the application, for example, you might be tempted to test that the state has updated. However, that&#39;s not the object of these tests.&lt;/p&gt;
&lt;p&gt;This introduces us to an important concept in using a testing library: we&#39;re not here to test the state, or the way our component works. We&#39;re here to test how people are going to &lt;em&gt;use&lt;/em&gt; the component, and that it meets their expectations.&lt;/p&gt;
&lt;p&gt;So whether or not the state has updated is immaterial; what we want to test is what the &lt;em&gt;outcome&lt;/em&gt; of that button press is.&lt;/p&gt;
&lt;p&gt;Let&#39;s imagine we&#39;re testing the outcome of a function that changes the UI from dark mode to light mode. Here&#39;s the component:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const modeToggle = () =&amp;gt; {

    const [mode, setMode] = useState[&#39;light&#39;]

   const toggleTheme = () =&amp;gt; {

     if (theme === &#39;light&#39;) {

       setTheme(&#39;dark&#39;)

     } else {

       setTheme(&#39;light&#39;)

     }

   }

    return (

        &amp;lt;ToggleButton data-testid=&amp;quot;mode-toggle&amp;quot; lightMode={mode} onClick={toggleMode}&amp;gt;

          Toggle mode

        &amp;lt;/ToggleButton&amp;gt;

    )

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we should add a test id onto the button so that we can find it in the render phase:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return (

    &amp;lt;ToggleButton

      data-testid=&amp;quot;mode-toggle&amp;quot;

      lightMode={mode}

      onClick={toggleMode}

     &amp;gt;

      Toggle mode

    &amp;lt;/ToggleButton&amp;gt;

)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Did you notice we added the new attribute &lt;code&gt;data-testid&lt;/code&gt; to the button? Here&#39;s how you might test that.&lt;/p&gt;
&lt;p&gt;First, import a new function, &lt;code&gt;fireEvent&lt;/code&gt; from the testing library:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { cleanup,

          fireEvent,

          render

} from &#39;@testing-library/react&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use that function to test that there are changes in the UI, and that those changes are consistent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it(&#39;renders with basic props&#39;, () =&amp;gt; {

    const { container } = render(&amp;lt;ToggleButton /&amp;gt;

  )

 expect(container).toMatchSnapshot()

})

it(&#39;renders the light UI on click&#39;, () =&amp;gt; {

    const { container, getByTestId } = render(&amp;lt;ToggleButton /&amp;gt;)

    fireEvent.click(getByTestId(&#39;mode-toggle&#39;))

    expect(container).toMatchSnapshot()

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is great, we don&#39;t have to manually go to the site and look around, then click the button and look around a second time, which you might admit, you&#39;ll likely forget or miss something! Now we can have confidence that, given the same input, we can expect the same output in our component.&lt;/p&gt;
&lt;h3 id=&quot;a-note-about-test-ids&quot; tabindex=&quot;-1&quot;&gt;A Note about Test IDs &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#a-note-about-test-ids&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Personally, I dislike using data-testid to find something in the DOM. After all, the object of tests is to mimic what the user is doing, and to test what happens when they do. data-testid feels like a bit of a cheat -- although data-testids will likely come in handy for your QA Engineer (see the box &amp;quot;The Role of Quality Assurance Engineers&amp;quot;).&lt;/p&gt;
&lt;p&gt;Instead we could use getByText() and pass in the text of our button. That would be a lot more behaviour specific.&lt;/p&gt;
&lt;h2 id=&quot;mocking-and-spying&quot; tabindex=&quot;-1&quot;&gt;Mocking and Spying &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#mocking-and-spying&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes we need to test a call to a function, but that function is outside the scope of the test. For example, I have a separate module that contains a function that calculates the value of pi to a certain number of decimals.&lt;/p&gt;
&lt;p&gt;I don&#39;t need to test what the result of that module is. I need to test that my function does as expected. For more information about why this is, please see the box &amp;quot;unit and integration tests&amp;quot;. In this case, we could &amp;quot;mock&amp;quot; that function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const getPiValue = jest.fn()

it(&#39;calls the function on click&#39;, () =&amp;gt; {

    const { container, getByTestId } = render(&amp;lt;ToggleButton /&amp;gt;)

    fireEvent.click(getByTestId(&#39;mode-toggle&#39;))

    expect(getPiValue).toHaveBeenCalledTimes(1)

  )

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;toHaveBeenCalledTimes()&lt;/code&gt; is one of the many helper functions in the testing library that allow us to test the output of functions. This allows us not only to scope our tests only to the module we want to test, but also allow us to &amp;quot;spy&amp;quot; on, or see what our function does when it calls that function.&lt;/p&gt;
&lt;h2 id=&quot;start-testing-your-react-applications-today&quot; tabindex=&quot;-1&quot;&gt;Start Testing your React Applications Today &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#start-testing-your-react-applications-today&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing tests can seem a little daunting to start with. I hope this tutorial has given you a little more confidence to try it. Since I started writing tests for my applications, I really can&#39;t go back: I can rest easier, knowing I&#39;m leaving behind a much better legacy for those who will use my work in the future.&lt;/p&gt;
&lt;p&gt;For more ideas about how to test your components take a look at one of the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://react-testing-examples.com/&quot;&gt;https://react-testing-examples.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro&quot;&gt;https://testing-library.com/docs/react-testing-library/intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&#39;re looking for some courses to help you get started, the one by Kent C Dodds (who wrote and maintains React Testing Library) is popular:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://testingjavascript.com/&quot;&gt;https://testingjavascript.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also enjoyed this one on Level Up Tutorials, it&#39;s the one that got me started writing tests for my code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.leveluptutorials.com/tutorials/react-testing-for-beginners&quot;&gt;https://www.leveluptutorials.com/tutorials/react-testing-for-beginners&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-unit-and-integration-tests&quot; tabindex=&quot;-1&quot;&gt;Boxout: Unit and Integration Tests &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#boxout:-unit-and-integration-tests&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are generally two types of tests we talk about in the context of code tests:&lt;/p&gt;
&lt;h3 id=&quot;unit-testing&quot; tabindex=&quot;-1&quot;&gt;Unit Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#unit-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is to test the &lt;em&gt;units&lt;/em&gt; of code, or each module &lt;em&gt;in isolation&lt;/em&gt;. They shouldn&#39;t call other modules in your project, instead you should mock these modules so that the unit test is able to run.&lt;/p&gt;
&lt;h3 id=&quot;integration-testing&quot; tabindex=&quot;-1&quot;&gt;Integration Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#integration-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When two or more modules are used in conjunction, then it&#39;s a good practice to write an &lt;em&gt;integration test&lt;/em&gt;. These test how modules work together. Well written integration tests can identify issues when you&#39;re using modules as part of a larger piece of work.&lt;/p&gt;
&lt;p&gt;These are the two kinds of tests that developers are usually responsible for writing. There are other kinds of tests that QA Engineers write (see the box &amp;quot;The Role of Quality Assurance Engineers&amp;quot;).&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-what-is-test-driven-development&quot; tabindex=&quot;-1&quot;&gt;Boxout: What is Test Driven Development? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#boxout:-what-is-test-driven-development&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TDD, or test-driven development, is a testing discipline that forces you to think about edge cases when you&#39;re in the process of development.&lt;/p&gt;
&lt;p&gt;You start out with a hypothesis that forms the basis for your tests. This could be something like &amp;quot;it renders a button&amp;quot;, &amp;quot;it renders a button using the dark mode ui on click&amp;quot;, then you go ahead and write your tests.&lt;/p&gt;
&lt;p&gt;Only after you have at least 3 robust tests that you can use to verify what your component&#39;s behaviour should be, then you start coding the actual component.&lt;/p&gt;
&lt;p&gt;I like this concept because it forces you to think about the structure of your component from completely different angles. You&#39;re not trying to preserve the code you already wrote, so you can find different ideas more easily.&lt;/p&gt;
&lt;p&gt;Be careful though: you can write tests that will pass under any circumstances! For this reason, three or more tests are often required that allow you to &amp;quot;triangulate&amp;quot;, or effectively define the functionality of your component, before you can start building it.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-the-role-of-quality-assurance-engineers&quot; tabindex=&quot;-1&quot;&gt;Boxout: The Role of Quality Assurance Engineers &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/netmag-unit-test/#boxout:-the-role-of-quality-assurance-engineers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Quality Assurance engineers are the secret superpower of web development. A good QA Engineer and a strong QA process can save development time, reduce issues in production, and have been known to save the reputation of entire development teams ... and the companies they work for!&lt;/p&gt;
&lt;p&gt;QA Engineers have totally different mindset to developers: Developers naturally build against assumptions about how something should work, and can only test these assumptions. QAs on the other hand, challenge these assumptions, using every trick they can think of to try to break the code in some way.&lt;/p&gt;
&lt;p&gt;This ensures that your customers aren&#39;t acting as your QAs, causing you to lose money and good will in a very public manner.&lt;/p&gt;
&lt;p&gt;A dedicated Quality Assurance engineer will write an automated tests suite that check the expected functionality of the built application, predominantly on a staging domain, and end-to-end tests that check users can carry out goals that you expect them to achieve.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>How to scope Typecheck to your project folder</title>
    <link href="https://example.com/posts/typecheck-source-only/"/>
    <updated>2020-03-31T13:21:21Z</updated>
    <id>https://example.com/posts/typecheck-source-only/</id>
    <content type="html">&lt;p&gt;I configured a command so that I can run a type check on my project, but the results always include stuff in the &lt;code&gt;node_modules&lt;/code&gt; folder. It took me a lot of investigation and asking around before I figured out how to scope tsc to only the &lt;strong&gt;./src/&lt;/strong&gt; folder?&lt;/p&gt;
&lt;p&gt;in package.json:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;scripts: {
  &amp;quot;typecheck&amp;quot;: &amp;quot;tsc --noEmit&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this configuration, he compiler should pick up config from tsconfig.json, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
  ...
  },
  &amp;quot;include&amp;quot;: [&amp;quot;src/**/*&amp;quot;],
  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;, &amp;quot;**/*.test.*&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I still get results from &lt;strong&gt;node_modules&lt;/strong&gt; when I run the command. It took me ages to figure it out, but for anyone else coming across this one, I managed to find that submitting an empty array to types did it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;types&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now be able to run &lt;code&gt;yarn typecheck&lt;/code&gt; and see results that don&#39;t include everybody elses code!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On website longevity</title>
    <link href="https://example.com/posts/website-longevity/"/>
    <updated>2020-03-31T14:21:21Z</updated>
    <id>https://example.com/posts/website-longevity/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;When you build something, how long do you expect it to last? Whilst it might be easy to think about the things we create as our legacy to the world, that might not be the case when it comes to our online creations ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I was first experimenting with Gatsby, I built a site that I was really proud of. It was my first JAMStack project, and allowed me to publish content for a cause I wanted to support. However, only a few years later I found I could not continue to use it.&lt;/p&gt;
&lt;p&gt;What had happened was that things had moved on. I had built it with an early alpha of Gatsby v1, and since then the project has continued to iterate, being supported by it&#39;s vast online community.&lt;/p&gt;
&lt;p&gt;All of the dependencies that Gatsby uses under-the-hood had been updated too. React router had made way for reach router, there were new ways of handling many different things ... no doubt &lt;em&gt;better&lt;/em&gt; ways, but ways that still left my little old website flaky after only about three years of uptime.&lt;/p&gt;
&lt;p&gt;This isn&#39;t necessarily a problem. People can still view the content I posted there in all those years that I was able to use it. And I &lt;em&gt;could&lt;/em&gt; still have run it locally ... had I not wiped my computer and started over with a new install of Nodejs, Gatsby cli, and everything else.&lt;/p&gt;
&lt;p&gt;That last step seems to have rendered it challenging for me to even add a new locally-hosted Markdown blog page, and so I find I haven&#39;t updated the blog in quite a while now.&lt;/p&gt;
&lt;p&gt;I have three young kids ... if you have kids, you know that means practically zero time out. So there&#39;s no time for me to even plan - let alone carry out - a rebuild of the site.&lt;/p&gt;
&lt;p&gt;I guess what I&#39;m saying is that these new tools are awesome, and I don&#39;t want to stop using them. I just wish they didn&#39;t result in things being quite so ... ephermeral.&lt;/p&gt;
&lt;p&gt;After all, if I&#39;d built the site out of custom HTML, CSS and JS, I have no doubt that a refactor wouldn&#39;t be necessary now at all.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning serverless with Webiny</title>
    <link href="https://example.com/posts/learning-serverless-with-webiny/"/>
    <updated>2020-04-03T13:21:21Z</updated>
    <id>https://example.com/posts/learning-serverless-with-webiny/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Webiny is a new CMS in the market, one that seeks to compete with other well-established headless CMS platforms and existing apps. But I&#39;ve also come to enjoy using it for another reason: it&#39;s helping me learn how to apply principles of Serverless application architecture.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve spent a great deal of time over the past 2 years around the CMS space. I am particularly focused in self-hosted, javascript-based CMSes. I had already created sites with both Ghost and Strapi, two very competent systems with content APIs.&lt;/p&gt;
&lt;p&gt;Very recently, I came across Webiny, a hosted platform which recently pivoted to become a self-hosted product, and which has the interesting selling proposition of being a &amp;quot;serverless&amp;quot; CMS.&lt;/p&gt;
&lt;h2 id=&quot;why-i-think-serverless-matters&quot; tabindex=&quot;-1&quot;&gt;Why I think serverless matters &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/learning-serverless-with-webiny/#why-i-think-serverless-matters&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s a lot of buzz around the word &amp;quot;serverless&amp;quot; in my world recently, and for good reasons. Although some are keen to point out that the term doesn&#39;t technically mean you&#39;re not using servers, it does have the strong advantage that you only pay for what you use, and if you don&#39;t exceed often generous free initial offerings, you don&#39;t pay for the product ... at all.&lt;/p&gt;
&lt;p&gt;This is how Heroku got so popular. It can afford to give you the space to create an app, knowing that past a certain point it can be destroyed, saving on computing expenses. Your app can then be spun up at some point in the future when called upon at the cost of a minute of two of time.&lt;/p&gt;
&lt;p&gt;Companies today spend a huge amount of money running servers constantly, even when there&#39;s nobody using their services. Imagine if you didn&#39;t have to pay for that downtime?&lt;/p&gt;
&lt;p&gt;That&#39;s why I think serverless is going to become an increasingly large player in the devops space in the next few years.&lt;/p&gt;
&lt;h2 id=&quot;webiny:-truly-&amp;quot;serverless&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;Webiny: truly &amp;quot;serverless&amp;quot;? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/learning-serverless-with-webiny/#webiny:-truly-%22serverless%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unless your CMS is git-based tool, such as NetlifyCMS, Tina or Forestry, your content needs to be stored on a database somewhere. And therein lies a weakness of any CMS: it depends on writes to one single database, which you could argue doesn&#39;t scale hugely well.&lt;/p&gt;
&lt;p&gt;Webiny is no exception: it has connectors for different databases, and I&#39;ve used Mongo&#39;s hosted service &amp;quot;Atlas&amp;quot; for mine. However does that mean it doesn&#39;t truly fit into the &amp;quot;serverless&amp;quot; paradigm?&lt;/p&gt;
&lt;p&gt;I would argue that it does. And this reveals some of the underlying arguments around the semantics of what &amp;quot;serverless&amp;quot; means. To some people, the term only refers to lambda functions, and not to other things like the authentication service, or the file storage system.&lt;/p&gt;
&lt;p&gt;However, for me, &amp;quot;serverless&amp;quot; means a disparate collection of interrelated services, tied together by common use. By this definition, the file storage system, the authentication service, the database, and everything else, constitutes a serverless application ... i mean, tool ... I mean, whatever.&lt;/p&gt;
&lt;h2 id=&quot;how-webiny-helped-me-learn-about-serverless&quot; tabindex=&quot;-1&quot;&gt;How Webiny helped me learn about serverless &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/learning-serverless-with-webiny/#how-webiny-helped-me-learn-about-serverless&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although you can create serverless applications using the online interfaces given to you by different providers, it&#39;s real strength is in allowing you to programmatically create your services as you go.&lt;/p&gt;
&lt;p&gt;This is incredibly powerful. Here&#39;s my Webiny application code:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; webiny&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;apps&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;xxxxxxx&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;env.AWS_REGION&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@webiny/serverless-app&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Webiny Site&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;vars.region&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./site/build&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;SSR_FUNCTION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ssr.name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;ssr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@webiny/serverless-function&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Site SSR&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;vars.region&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn build&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cli.env&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./site&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./site/build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ssr&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; handler.handler&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@webiny/serverless-app&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;vars.region&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Webiny Admin&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yarn build&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cli.env&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./admin&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@webiny/serverless-api-gateway&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Apps Gateway&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;binaryMediaTypes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Serverless React Apps&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /admin/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;key+&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GET&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /admin&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GET&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;key+&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GET&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GET&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;cdn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@webiny/serverless-aws-cloudfront&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;origins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;api.url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m not going to break down everything, but you might be able to recognise different services for &amp;quot;site&amp;quot;, &amp;quot;ssr&amp;quot;, &amp;quot;admin&amp;quot;, &amp;quot;api&amp;quot; and &amp;quot;cdn&amp;quot;, etc, which are variously the API gateway, the admin interface, the frontend static site, and some lambda functions.&lt;/p&gt;
&lt;p&gt;They all tie together to make the backend interface work, and to compile a static site hosted on S3.&lt;/p&gt;
&lt;p&gt;And if I log into my AWS dashboard, I can see these services there too ... I mention that just because I have a visual kind of brain.&lt;/p&gt;
&lt;p&gt;This idea, of &amp;quot;infrastructure as code&amp;quot; means your applications are truly portable: you can destroy it and re-create it from its blueprint using the code you&#39;ve written.&lt;/p&gt;
&lt;p&gt;And with the amount I use my Webiny CMS, I&#39;m probably not going to ever pay a thing for it.&lt;/p&gt;
&lt;h2 id=&quot;try-it-out!&quot; tabindex=&quot;-1&quot;&gt;Try it out! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/learning-serverless-with-webiny/#try-it-out!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I highly recommend giving Webiny a spin. The product is in early stages but is already quite promising. It&#39;s nice that as JavaScript developers, we have a good range of choice between this, the rising star Strapi, and the very mature Ghost.&lt;/p&gt;
&lt;p&gt;What do you think of it? Let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to test JavaScript API Calls</title>
    <link href="https://example.com/posts/writing-tests-for-js-api-calls/"/>
    <updated>2020-04-09T10:21:21Z</updated>
    <id>https://example.com/posts/writing-tests-for-js-api-calls/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;In the January 2020 issue of Net Magazine, we walked through how to use React testing library to write basic unit tests for your React components. In this article I&#39;m going to dive a little deeper and show how to write tests for some code that fetches data from an API.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an important distinction from what we covered previously because writing tests for UI components is very different from tests like this, and I hope that you&#39;ll learn some more things to help you ensure that &lt;em&gt;all&lt;/em&gt; of your code is production ready, which will give you and your stakeholders more confidence when publishing new code.&lt;/p&gt;
&lt;h2 id=&quot;step-0.-decide-what-to-test&quot; tabindex=&quot;-1&quot;&gt;Step 0. Decide What to Test &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#step-0.-decide-what-to-test&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we even begin writing tests it&#39;s good to decide &lt;em&gt;what&lt;/em&gt; needs to be tested. We need to set clear boundaries before we begin, otherwise we could waste time writing tests unnecessarily. Read through your code and see what different outcomes might be generated by your code.&lt;/p&gt;
&lt;p&gt;In our example of fetching data from an API, the API call could be successful, that counts as one outcome. But what if it&#39;s not successful? And what should happen if the call is successful, but it returns no data? That&#39;s three different possible outcomes already!&lt;/p&gt;
&lt;p&gt;Let&#39;s look at our imaginary API call to see what outcomes exist. Here&#39;s the code we&#39;re going to test:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; env &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./ENV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;axios&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getApiData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;parameters &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  axios&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;domain&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/api/v1/data/?&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;parameters&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// handle success&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// handle error&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at my code, I can see the following outcomes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch api data&lt;/li&gt;
&lt;li&gt;Fetch data with parameters specified&lt;/li&gt;
&lt;li&gt;Return the data if the call was successful&lt;/li&gt;
&lt;li&gt;Return an empty array if no data was received&lt;/li&gt;
&lt;li&gt;Log an error if the request was unsuccessful&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking at your code in the beginning like this often reveals other issues to you that you may not have noticed before, and which prompts you to revisit your original code and improve it.&lt;/p&gt;
&lt;p&gt;Let&#39;s handle the first 4 tests first, then come back to the last two and see how we can improve our code.&lt;/p&gt;
&lt;p&gt;To begin, I&#39;ll create a new file to write my tests in. The name of the file is usually the same as the module. So if my module is called &lt;strong&gt;GetApiData.js&lt;/strong&gt;, my test should be &lt;strong&gt;GetApiData.test.js&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;setup-and-mocking&quot; tabindex=&quot;-1&quot;&gt;Setup and Mocking &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#setup-and-mocking&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-mock-the-api&quot; tabindex=&quot;-1&quot;&gt;1. Mock the API &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#1.-mock-the-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although this test is about fetching data from the API, I don&#39;t want to actually call the data from the API. There are several reasons for this: Primarily, it&#39;s because I&#39;m not testing the API, I&#39;m testing the code I have written. But also there could be a cost involved each time I contact the API, I don&#39;t want or need that cost to be incurred. Finally, I don&#39;t want to wait for the API query to resolve for my tests to finish!&lt;/p&gt;
&lt;p&gt;To do that, I&#39;m going to &amp;quot;mock&amp;quot; this function. When you &amp;quot;mock&amp;quot; something you essentially overwrite the function with a fake function. Let&#39;s first import the code that was written to fetch data from that API, and also the library that we used to connect to the API, Axios:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; GetApiData &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./GetApiData&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;axios&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After importing it, we can overwrite the functionality of axios like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;axios&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockedAxios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, every time we call GetApiData in this file, and that calls Axios, it&#39;ll use our mocked implementation. Using it in the variable &lt;code&gt;mockedAxios&lt;/code&gt; will help us identify clearly what we&#39;re doing when we write our tests.&lt;/p&gt;
&lt;p&gt;The last thing we want to set up in regard to our API is the domain. This would be a parameter that is passed via our configuration, or part of our environment variables. But we&#39;re not testing our environment variables, so we should mock that domain too:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; domain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://fakeapi.com/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2.-mock-the-console&quot; tabindex=&quot;-1&quot;&gt;2. Mock the console &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#2.-mock-the-console&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next thing we want to mock is what we would have used in our code to log out errors: &lt;code&gt;console.log()&lt;/code&gt;, for similar reasons we mentioned above: we&#39;re not testing the functionality of the console. Also, we don&#39;t want to actually log the errors to the console as we&#39;re running tests, but instead somewhere we can test the output.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockedConsole &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;global&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using Jest&#39;s &lt;code&gt;SpyOn&lt;/code&gt; function, we can examine when that function was called, and what it was called with ... it&#39;s actually is a spy function, reporting back to us (thankfully!).&lt;/p&gt;
&lt;h3 id=&quot;3.-mock-the-data-that-should-be-returned&quot; tabindex=&quot;-1&quot;&gt;3. Mock the data that should be returned &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#3.-mock-the-data-that-should-be-returned&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, because we&#39;re not contacting the api, we need to provide mocked data to test against as if though it did:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockedDataOne &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Super Blog Post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;_embedded&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Category&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Author&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockedDataTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Super Post Two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;_embedded&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Category&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Author&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right! Let&#39;s begin our tests with a wrapping description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe(&#39;GetApiData() Source data so we can consume it&#39;, () =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;4.-clean-ups&quot; tabindex=&quot;-1&quot;&gt;4. Clean ups &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#4.-clean-ups&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Last piece of setup here: we want to reset our mocked API call and console log before each new test, otherwise we&#39;ll have stale data left over from the previous test, which could cause subsequent tests to fail:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  mockedAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockReset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mockedConsole&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockReset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right, now we&#39;ve set up our tests, and mocked the important stuff, let&#39;s dive into our first test ...&lt;/p&gt;
&lt;h2 id=&quot;test-1:-fetch-api-data&quot; tabindex=&quot;-1&quot;&gt;Test 1: Fetch api data &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#test-1:-fetch-api-data&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s begin our tests with a wrapping description:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;GetApiData()&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This wrapping function describes the component, or makes a short statement to help us understand what these tests are for. If your function name adequately describes what it does, and you don&#39;t need a longer description, that&#39;s a good sign that you have named your function well!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Should get api data&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  mockedAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hi I worked!&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getApiData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockedAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First thing to note: this is an &lt;em&gt;asynchronous&lt;/em&gt; function! &lt;code&gt;axios.get&lt;/code&gt; is already an async function so it makes sense to test it asynchronously too. It&#39;s best to make api calls async because you have a callback even if something fails, rather than the request simply hanging indefinitely, which is bad for user experience.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mockResolvedValueOnce()&lt;/code&gt; is a built-in function in Jest that, well, mocks the resolved value of the API call just once.&lt;/p&gt;
&lt;p&gt;Here we&#39;re mocking the &lt;em&gt;result&lt;/em&gt; of the mocked axios call. We&#39;re not testing the &lt;em&gt;contents&lt;/em&gt; of the data, so I&#39;ve just added a dummy object to the result of the &lt;code&gt;mockResolvedValueOnce()&lt;/code&gt; function, since that&#39;s adequate for what we&#39;re testing.&lt;/p&gt;
&lt;p&gt;You can now run this test, and you should see 1 passing test. Go you!&lt;/p&gt;
&lt;p&gt;So ... it worked! We can stop there right?&lt;/p&gt;
&lt;p&gt;Well ... how do we know our code contacted the right API endpoint? How do we know it sent the correct parameters, if we need any?&lt;/p&gt;
&lt;h2 id=&quot;test-2:-return-the-data-if-the-call-was-successful&quot; tabindex=&quot;-1&quot;&gt;Test 2: Return the data if the call was successful &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#test-2:-return-the-data-if-the-call-was-successful&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our next test will check that we have the data we expected in the return value of the &lt;code&gt;GetApiData()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Should get data from the api&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	mockedAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; mockedDataOne&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mockedDataTwo &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time we&#39;re mocking the return value containing the two objects we originally set up.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getApiData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockedAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just as before, I like to check that we did actually call the &lt;code&gt;mockedAxios&lt;/code&gt; function. Next I&#39;m going to check one of the data objects to make sure it has the same &lt;code&gt;id&lt;/code&gt; as &lt;code&gt;mockedDataOne&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;objectContaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mockedDataOne&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could do more tests, perhaps making sure that &lt;code&gt;data[1]&lt;/code&gt; also has the corresponding ID, but this is enough to convince me that the data is returning correctly.&lt;/p&gt;
&lt;p&gt;Now this does seem a little ... &amp;quot;circular&amp;quot; at first. You might think &amp;quot;of course it contains it! That&#39;s what you told it to contain!&amp;quot;, but think about it for a minute: we haven&#39;t &lt;em&gt;just&lt;/em&gt; returned that data. We&#39;ve used &lt;em&gt;our preexisting code&lt;/em&gt; (minus the actual API calls and real data) to return it. It&#39;s like throwing a ball, then our code caught it, and threw it back.&lt;/p&gt;
&lt;p&gt;If nobody threw our ball back, then something is very wrong with the code we&#39;re testing: it&#39;s not working as we expected.&lt;/p&gt;
&lt;h2 id=&quot;test-3:-fetch-data-with-parameters-specified&quot; tabindex=&quot;-1&quot;&gt;Test 3: Fetch data with parameters specified &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#test-3:-fetch-data-with-parameters-specified&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here&#39;s our next assertion. We want to make sure our code passed the parameters we wanted, and returned the value we expected.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should get data using parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this time our &lt;code&gt;params&lt;/code&gt; contain an array specifying category 2 should be fetched. Remember we mocked some data in our setup? How many of those mocked data sets has the category of &lt;code&gt;2&lt;/code&gt;? Only one of them:&lt;code&gt;mockedDataTwo&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    mockAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mockedDataTwo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetApiData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;domain&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/api/v1/data/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categories&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so if this test passes, our code is passing the categories correctly. Great! But does the data reflect that?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;objectContaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this test passes, then great! We have successfully obtained data with the correct parameters.&lt;/p&gt;
&lt;p&gt;Another check to do here is that the data &lt;em&gt;only&lt;/em&gt; contains items with this category, and not any other. I&#39;ll leave that one for you to figure out.&lt;/p&gt;
&lt;p&gt;These next two tests are to verify we have captured two significant &lt;em&gt;branches&lt;/em&gt;, or outcomes, of our code: failures.&lt;/p&gt;
&lt;h2 id=&quot;test-4:-return-an-empty-object-if-no-data-was-recieved&quot; tabindex=&quot;-1&quot;&gt;Test 4: Return an empty object if no data was recieved &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#test-4:-return-an-empty-object-if-no-data-was-recieved&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If there hasn&#39;t been any data sent back to us after the API call, we have returned an array as a fallback so that we don&#39;t have an exception in our data layer. that can be used by our UI to provide a fallback - once the API call has been resolved.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Should return an empty array if no data was recieved&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetApiData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  mockAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toBeTruthy&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;re mocking a data object with a &lt;code&gt;null&lt;/code&gt; value here to represent no values being returned from the API call. We&#39;re using &lt;code&gt;Array.isArray&lt;/code&gt; because that is far more robust than using &lt;code&gt;isArray&lt;/code&gt;, which is an older method that returns &lt;code&gt;true&lt;/code&gt; for a number of different cases (don&#39;t ask...).&lt;/p&gt;
&lt;h2 id=&quot;test-5:-log-an-error-if-the-request-was-unsuccessful&quot; tabindex=&quot;-1&quot;&gt;Test 5: Log an error if the request was unsuccessful &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#test-5:-log-an-error-if-the-request-was-unsuccessful&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Logging errors is a vital part of a robust application. It&#39;s a great way of being able to respond to API failures or application exceptions before users get to see them. In this test, I&#39;m just going to check for a &lt;code&gt;console.log()&lt;/code&gt; call, but in a production app, there would be an integration with some external logging system that would send an email alert to the dev team if it was a critical error:&lt;/p&gt;
&lt;p&gt;Our final test uses our &lt;code&gt;consoleMock&lt;/code&gt; from our initial setup (see above):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Should log an error if the request was unsuccessful&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;there was an error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  mockAxios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockRejectedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetApiData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockAxios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockedConsole&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockedConsole&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &lt;code&gt;consoleMock&lt;/code&gt; function allows us to mock the functionality of the console.log object. Because we&#39;re testing that an error is thrown by our code, we need to use the &lt;code&gt;Error&lt;/code&gt; object to test the output correctly.&lt;/p&gt;
&lt;p&gt;So there we are ... we now have a suite of tests to give us more confidence that our code is production ready ... as long as the tests don&#39;t fail in our pipeline, we can be confident that we have met the core criteria for our &lt;code&gt;GetApiData&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s a lot to these functions and it can take quite a bit of time to get used to writing this much code:- more than our actual function! But what is the price of confidence? ... if you think about it, by spending the time writing this code, we could have saved our company hundreds of thousands of pounds from lost income if it was broken!&lt;/p&gt;
&lt;p&gt;I would say that thoroughly testing your code is an important step, along with static typing, quality checking, and pre-release validation, to ensuring that your code is indeed production ready!&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-the-price-of-confidence&quot; tabindex=&quot;-1&quot;&gt;Boxout: The price of confidence &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#boxout:-the-price-of-confidence&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Developers will spend more time writing tests than writing the components they’re building. That makes sense if you think about it: you need to test every possible outcome of the code that’s being written. As is demonstrated in this article, one API call with some basic functionality can result in a number of differing outcomes.&lt;/p&gt;
&lt;p&gt;The benefit of adding tests to your code can easily override the time spent by developers following this practice. If your business or customers needs the confidence that things won’t break, then testing is definitely a good practice to introduce at the start of a project.&lt;/p&gt;
&lt;p&gt;Other ways that testing can benefit a project include during refactors. Often project requirements will change after the code has been written. That introduces more risk into the codebase because on revisiting the code a developer might decide to refactor to make it simpler … which could include deleting things that were actually needed! Looking at the test serves as documentation: developers can see that there was a decision behind every code outcome that has been written.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;boxout:-scoping-outcomes&quot; tabindex=&quot;-1&quot;&gt;Boxout: Scoping outcomes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/writing-tests-for-js-api-calls/#boxout:-scoping-outcomes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The hardest part of finding out what to test is knowing what your code actually does. This becomes harder with the more time that passes between when you write tests to when you write the actual code. So I recommend writing tests alongside the component, or even before you write your component.&lt;/p&gt;
&lt;p&gt;When you’re doing this you’ll be more clearly able to think about all of the different outcome possibilities that your code offers: what variables might change? What different return values are possible?&lt;/p&gt;
&lt;p&gt;I’ve used an API call in this example because there’s plenty of variety in what can happen … but I’ve still missed out one valuable test … can you spot which test I haven’t done?&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating my homepage animation</title>
    <link href="https://example.com/posts/creating-homepage-animation/"/>
    <updated>2020-04-22T14:21:21Z</updated>
    <id>https://example.com/posts/creating-homepage-animation/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I made the original animation for this site when I was using Hugo, but it&#39;s taken some time to refactor to React. Here&#39;s the story of how I achieved that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wanted this site to be pretty minimal, but a few nice little touches can really make a website stand out. That&#39;s why I made the animation here on the homepage. You have to scroll up &amp;amp; down slowly to see it ...&lt;/p&gt;
&lt;h2 id=&quot;first-steps&quot; tabindex=&quot;-1&quot;&gt;First steps &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/creating-homepage-animation/#first-steps&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The original animation was created with both ScrollMagic and GreenSock, two of the most incredibly diverse animation libraries available. The combination of these two is I think the easiest way of creating JavaScript animations when you&#39;re scrolling around, and I have used them to provide some pretty nice effects on sites I&#39;ve worked on before.&lt;/p&gt;
&lt;p&gt;However, the bundle sizes of GreenSock and ScrollMagic are ... quite large. I wanted to rewrite it because (1) I care about how much JavaScript I&#39;m sending down (2) I want to see what I can achieve in plain JavaScript (3) I have the luxury of having no deadlines.&lt;/p&gt;
&lt;p&gt;Here&#39;s the original animation on CodePen (137 lines):&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;js&quot; data-user=&quot;endymion1818&quot; data-slug-hash=&quot;xrRyXw&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Animation on Scroll w/ ScrollMagic &amp;amp;amp; GreenSock&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/endymion1818/pen/xrRyXw&quot;&gt;
  Animation on Scroll w/ ScrollMagic &amp;amp; GreenSock&lt;/a&gt; by Ben Read (&lt;a href=&quot;https://codepen.io/endymion1818&quot;&gt;@endymion1818&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Animations, especially ones where you&#39;re telling a story like this one, depend much on timing. I was particularly happy with the specific points that each rabbit became visible in this iteration, especially the last three, where the rabbit appears to be listening out for something, before dashing off the screen. It took a considerable investment of hours to get this right, so I&#39;ve more or less kept this though the other implementations.&lt;/p&gt;
&lt;p&gt;I&#39;ve been told that this animation isn&#39;t prominent enough for most people to notice it. But I think that&#39;s partly the point: I like the idea that most people might not notice there is an animation: after all, most people aren&#39;t looking for that when they come to my site, so I didn&#39;t want to distract further their already distracted minds.&lt;/p&gt;
&lt;p&gt;However, for those that do stop to notice, the brevity almost emphasises the subject matter more: it&#39;s only when we slow down ourselves that we start to notice the wonderful little things that are going on in nature around us.&lt;/p&gt;
&lt;p&gt;The SVG images are free ones I found after trawling through a huge raft of websites selling, giving away, and pretending to give away, svgs.&lt;/p&gt;
&lt;h2 id=&quot;rebuild-in-javascript&quot; tabindex=&quot;-1&quot;&gt;Rebuild in JavaScript &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/creating-homepage-animation/#rebuild-in-javascript&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this re-implementation I made one significant change: the opacity of each rabbit is controlled by CSS, and doesn&#39;t fade in and out whilst you&#39;re scrolling. It&#39;s a a little bit of a cheat but I quite like how it makes the effect a little more dream like:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;js&quot; data-user=&quot;endymion1818&quot; data-slug-hash=&quot;ZEbGXgj&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Animation on Scroll (vanilla js)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/endymion1818/pen/ZEbGXgj&quot;&gt;
  Animation on Scroll (vanilla js)&lt;/a&gt; by Ben Read (&lt;a href=&quot;https://codepen.io/endymion1818&quot;&gt;@endymion1818&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;This is only 35 lines, and without any libraries, it&#39;s much faster and better for users.&lt;/p&gt;
&lt;h2 id=&quot;rebuild-to-react&quot; tabindex=&quot;-1&quot;&gt;Rebuild to React &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/creating-homepage-animation/#rebuild-to-react&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I switched to React I was conscious that my JavaScript bundle had increased quite a lot, and I wanted to try to make compensation for that by implementing some other performance gains before I started getting fancy.&lt;/p&gt;
&lt;p&gt;It took some time to get this to work in React. Building this honestly got me to question whether React is &amp;quot;just javascript&amp;quot; ...&lt;/p&gt;
&lt;div style=&quot;overflow: scroll&quot;&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/rabbit-animation-y2in6?fontsize=14&amp;hidenavigation=1&amp;module=%2Fsrc%2FRabbits.js&amp;moduleview=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;rabbit animation&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;(click the left side to see the code)&lt;/p&gt;
&lt;p&gt;The actual animation code is 43 lines, a significant step up. There were a few tricky things I had to work out too:&lt;/p&gt;
&lt;p&gt;React re-renders the page at different stages, so needs a way of getting the &lt;em&gt;current&lt;/em&gt; element that&#39;s in the DOM. The &lt;code&gt;useRef()&lt;/code&gt; hook allows us to do that. There&#39;s a caveat with that though: the initial value of &lt;code&gt;current&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, it wasn&#39;t until I realised I needed to get the elements first then call them inside of a &lt;code&gt;useEffect()&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;It was also easier to use a pre-built hook, &lt;code&gt;react-use-scroll-position&lt;/code&gt;, rather than write my own code. It&#39;s pretty minimal so I don&#39;t mind that too much.&lt;/p&gt;
&lt;h2 id=&quot;typescript-implementation&quot; tabindex=&quot;-1&quot;&gt;TypeScript implementation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/creating-homepage-animation/#typescript-implementation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m using this one on my homepage now, but with TypeScript:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Rabbits&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerWidth &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;998&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scrollYPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useScrollYPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getScrollPercent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        scrollYPosition &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollHeight &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollHeight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clientHeight&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;domElement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;HTMLDivElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;inHeight&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;outHeight&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;number&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getScrollPercent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; inHeight &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;token function&quot;&gt;getScrollPercent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; outHeight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      domElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opacity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0.8&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      domElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opacity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; treeSummer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitOne &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitThree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitFour &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitFive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitSix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rabbitSeven &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitOne&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitOne&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitTwo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitThree&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitFour&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitFive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitSix&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;useScrollHeightToChangeOpacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rabbitSeven&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;getScrollPercent&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hardest part of the TypeScript implementation was to find out how to get the &lt;code&gt;.current&lt;/code&gt; value of &lt;code&gt;useRef()&lt;/code&gt;, because the initial value as you can see is &lt;code&gt;null&lt;/code&gt; (the dom element doesn&#39;t exist yet). Unfortunately the only help you get from the compiler is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Argument of type &#39;null&#39; is not assignable to parameter of type &#39;HTMLDivElement&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To tell the compiler that it&#39;s not possible for this value to be &lt;code&gt;null&lt;/code&gt; at this point, you append it with a &lt;code&gt;!&lt;/code&gt;, the non-null assertion operator.&lt;/p&gt;
&lt;p&gt;Annoying, but not annoying enough for me to change my position on TypeScript.&lt;/p&gt;
&lt;h2 id=&quot;future-plans&quot; tabindex=&quot;-1&quot;&gt;Future plans &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/creating-homepage-animation/#future-plans&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have to ask why I chose this particular scene, it&#39;s because it reminds me both of my childhood days roaming the countryside of County Durham when such wildlife was abundant, and the film &amp;quot;Watership Down&amp;quot; (I watched that film when I was far too young!).&lt;/p&gt;
&lt;p&gt;Originally, I planned ot have different animations on other pages too, like a bird or butterfly crossing the viewport, and a little girl sitting on a tree swing. I&#39;m still thinking about whether or not to implement those, since the SVGs are quite large and it might not be good for my bundle size.&lt;/p&gt;
&lt;p&gt;However I do really like how much character it lends to the site.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What is Typescript?</title>
    <link href="https://example.com/posts/what-is-typescript/"/>
    <updated>2020-05-14T09:21:21Z</updated>
    <id>https://example.com/posts/what-is-typescript/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;What is TypeScript? How can it be useful to a person learning web development? I was asked this question on a Slack dicussion recently, and came up with the following example which seemed to be enough for my friends to grasp it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is a &lt;em&gt;dynamic&lt;/em&gt; language.&lt;br /&gt;
Here’s an example using the browser’s console:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/type-coercion.png&quot; alt=&quot;Type coercion in progress&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I assigned the var a to a number , the number 1, then I assigned the next var, b, to a string, &#39;two&#39; ... and then I added them together.&lt;/p&gt;
&lt;p&gt;The result was a string (1two) because JavaScript changed my number into a string. In a lot of other languages, you cannot do this. The compiler, what interprets your code, would throw an error.&lt;/p&gt;
&lt;p&gt;This example shows that JavaScript is a dynamic language, it changes types on the go (not just from strings to numbers but lots of others too) depending on a set of it’s own rules which sometimes don’t make sense. It’s a bit like the English language!&lt;/p&gt;
&lt;p&gt;TypeScript is a compiler which tries to stop JavaScript from doing this crazy stuff so it becomes more predictable.&lt;/p&gt;
&lt;h2 id=&quot;when-writing-code&quot; tabindex=&quot;-1&quot;&gt;When writing code &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/what-is-typescript/#when-writing-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TypeScript can also be useful when using certain code editors.&lt;/p&gt;
&lt;p&gt;For example, I&#39;ve typed something that doesn&#39;t exist in the data structure here, and my compiler can warn me about it, meaning I don&#39;t have to see an error in the browser, then switch back to my code editor:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/typescript-wrong.png&quot; alt=&quot;Type is incorrect&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I can also get useful tools like this, so I have confidence even when I&#39;m typing, that my code is going to be correct.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/typescript-correct.png&quot; alt=&quot;Type is correct&quot; /&gt;&lt;/p&gt;
&lt;p&gt;These two features are great timesavers, and claw back a lot of time you might have spent setting up TypeScript and debugging issues you might have as a result.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Some of my favourite books</title>
    <link href="https://example.com/posts/favourite-books/"/>
    <updated>2020-06-27T14:21:21Z</updated>
    <id>https://example.com/posts/favourite-books/</id>
    <content type="html">&lt;p&gt;I have found it very difficult to collect this list together, I go through phases with books and these might be considered my current favourites ... but here goes!&lt;/p&gt;
&lt;p&gt;In no strict order of preference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;F Scott Fitzgerald - collected short stories.&lt;/strong&gt; Life in the 1920s &amp;amp; 30s with just a pinch of melancholy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;John Keats complete poems&lt;/strong&gt; - the sheer genius of this 20 year olds ideas was amazing. Such a tragic life too (he died aged 26)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Victor Hugo - les Miserables (translated by Norman Denny).&lt;/strong&gt; An undiluted masterpiece, Paris in minature and a lot of fascinating philosophical meandering in between.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;James Joyce - Poems &amp;amp; shorter writings.&lt;/strong&gt; JJ’s books are unnaproachable but he had a command of English like only Shakespeare, which makes his poetry magnificent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virginia Woolf - The Waves.&lt;/strong&gt; Just read the opening page. She understood people on such an intrinsic level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Marcel Proust - Swanns Way.&lt;/strong&gt; He takes a long time to get to the point but it’s like climbing a mountain, the view from the peak is indescribably beautiful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundation - Asimov.&lt;/strong&gt; The scope of the initial concept for the series is mind boggling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frank Herbert - Dune.&lt;/strong&gt; world building at its absolute best&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dan Simmons - The Hyperion Cantos.&lt;/strong&gt; Requires a bit of a strong stomach but the author loved literature as well as high concept sci fi. Awesome.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;China Mieville - Perdido Street Station, Embassytown or The City and the City.&lt;/strong&gt; Some incredible concepts about language and world building, writing style is mesmerising and transports you into the his worlds with ease.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mervyn Peake - Titus Groan.&lt;/strong&gt; Brilliant, ponderous, odd, and wonderful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jorge Luis Borges - Collected Stories.&lt;/strong&gt; Mind bending infinite and looping concepts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anne Fadiman - Confessions of a Common Reader.&lt;/strong&gt; I re-read this slim volume every few years, a wonderful love letter to books, reading, and life in general.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boris Pasternak - Doctor Zhivago.&lt;/strong&gt; a grand, poetic, and empathic exploration of individuals in Russia in the civil war. &amp;quot;I feel for each of them / As if I were in their skin&amp;quot;, he writes in one of the poems attached to the book.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;honourable-mentions&quot; tabindex=&quot;-1&quot;&gt;Honourable mentions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/favourite-books/#honourable-mentions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am halfway through the Illiad, an old translation by a guy called Chapman who kept the original meter from the poem, it’s jolly wordy and doesn’t convey the barbarism of the original (probably a good thing!).&lt;/p&gt;
&lt;p&gt;I also recently read Paradise Lost by John Milton. The charachterization is superb and language and turn of phrase is delightful.&lt;/p&gt;
&lt;p&gt;Sophie’s World is good for covering the basic concepts of just about every branch of philosophy, in story form too!&lt;/p&gt;
&lt;p&gt;I read Robinson Crusoe but the racism and colonialism were stomach churning.&lt;/p&gt;
&lt;p&gt;As a biography I loved Seven Pillars of Wisdom by “Lawrence of Arabia”, he’s such a figure but he really loved the Bedouin culture and writes about it so honestly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dynamic client side routes in GatsbyJS</title>
    <link href="https://example.com/posts/dynamic-client-routes-in-gatsbyjs/"/>
    <updated>2020-07-18T14:21:21Z</updated>
    <id>https://example.com/posts/dynamic-client-routes-in-gatsbyjs/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Would you use GatsbyJS for a dynamic app? Yes I would. The reason is that I can make good use of Gatsby&#39;s great developer experience, as well as do everything I would normally do in a React application. Here&#39;s how I recently implemented dynamic routing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: My colleage Romina Moya originally discovered how Gatsby could do this, and showed it to me afterwards.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve been learning more about Amazon Web Services recently, and found an excellent tutorial written by the makers of Seed, a sort of CI pipeline for serverless applications. You can find the tutorial at &lt;a href=&quot;https://serverless-stack.com/&quot;&gt;https://serverless-stack.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to diverge from the tutorial a little on the frontend, especially since I really enjoy working with GatsbyJS and wanted to use it&#39;s static rendering where I could.&lt;/p&gt;
&lt;p&gt;One of the lessons uses React Router to render routes for notes like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/notes/2074d6b0-c5d7-11ea-bd39-5f447bbc7b39
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the last part of the url (the &amp;quot;pathname&amp;quot;) needs to be generated client-side only. The reason is that the component would resolve to any number of records in the database, and needs be accessible only to the logged-in user.&lt;/p&gt;
&lt;p&gt;To achieve this in Gatsby I referred to their excellent documentation (&lt;a href=&quot;https://www.gatsbyjs.org/docs/client-only-routes-and-user-authentication/&quot;&gt;https://www.gatsbyjs.org/docs/client-only-routes-and-user-authentication/&lt;/a&gt;), but there&#39;s a lot of information in that documentation, and it can be a little difficult to see what you need to do. So here&#39;s some extra pointers that I thought might be useful:&lt;/p&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dynamic-client-routes-in-gatsbyjs/#setup&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my applications as in most Gatsby sites, I use a wrapping component that I name &amp;quot;layout&amp;quot; or &amp;quot;entry&amp;quot;. If you don&#39;t have that, you could effectively do the same thing by adding a file in the root of your project named &amp;quot;gatsby-browser.js&amp;quot; and using the &lt;code&gt;onClientEntry()&lt;/code&gt; api (&lt;a href=&quot;https://www.gatsbyjs.org/docs/browser-apis/#onClientEntry&quot;&gt;https://www.gatsbyjs.org/docs/browser-apis/#onClientEntry&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In that file I needed to first &lt;code&gt;import { Router } from &amp;quot;@reach-router&amp;quot;&lt;/code&gt;, and also &lt;code&gt;import { navigate } from &amp;quot;gatsby&amp;quot;&lt;/code&gt; then in the &lt;code&gt;render&lt;/code&gt; function add this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BounceToHome &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;BounceToHome&lt;/code&gt; function is for any path the router comes across that isn&#39;t defined (as you can see from the &lt;code&gt;default&lt;/code&gt; prop I passed to it). This is useful for if the user types anything That function uses &lt;code&gt;navigate()&lt;/code&gt; that I imported earlier:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;BounceToHome&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;navigate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see I use the &lt;code&gt;useEffect&lt;/code&gt; hook to navigate the user home on the first render.&lt;/p&gt;
&lt;h2 id=&quot;rendering-client-only-component&quot; tabindex=&quot;-1&quot;&gt;Rendering client-only component &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dynamic-client-routes-in-gatsbyjs/#rendering-client-only-component&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the top of the file I&#39;ve imported the functionality I already defined for rendering, editing and deleting notes:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Notes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Notes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now as a child of the Router component I&#39;m going to add in my Notes component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Notes path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/notes/:noteId/&quot;&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Notes&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; tells Reach Router that I want to accept paths with a prefix &amp;quot;/notes&amp;quot;, and the colon after that is a variable that will be passed to your component. It could be called anything you like, I thought &lt;code&gt;noteId&lt;/code&gt; was the most relevant name for what I was building.&lt;/p&gt;
&lt;p&gt;On the following line I&#39;ve passed to the router which component I want to render on that path.&lt;/p&gt;
&lt;p&gt;Now I can use that component in the page in this way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Notes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;noteId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadNote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;notes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/notes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;noteId&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onLoad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; note &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadNote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;note&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setNote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;note&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;onLoad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;noteId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whenever the &lt;code&gt;noteId&lt;/code&gt; changes the &lt;code&gt;useEffect&lt;/code&gt; hook runs and &lt;code&gt;loadNote()&lt;/code&gt; gets the note using functionality available in the &lt;strong&gt;aws-amplify&lt;/strong&gt; package.&lt;/p&gt;
&lt;h2 id=&quot;gatsby-is-ready-for-apps!&quot; tabindex=&quot;-1&quot;&gt;Gatsby is ready for Apps! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dynamic-client-routes-in-gatsbyjs/#gatsby-is-ready-for-apps!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If React is &amp;quot;just JavaScript&amp;quot;, then Gatsby is &amp;quot;just a javascript framework&amp;quot;, with all of the benefits that brings you, as well as some significant other things like better accessibility, static rendering, and loads of other cool stuff.&lt;/p&gt;
&lt;p&gt;Let&#39;s not be too quick to pigeon-hole Gatsby into a certain corner: it&#39;s a versatile set of tools that allows us to jump start our projects and create any number of really cool things.&lt;/p&gt;
&lt;h2 id=&quot;update:-don&#39;t-put-this-in-your-layout-entry-file!&quot; tabindex=&quot;-1&quot;&gt;Update: don&#39;t put this in your Layout / Entry file! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dynamic-client-routes-in-gatsbyjs/#update:-don&#39;t-put-this-in-your-layout-entry-file!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After playing with this a little more, I realised that client only routes override file routes ... so if you have the dynamic routing on the root path (usually &amp;quot;/&amp;quot;), it&#39;ll override everything else and you won&#39;t be able to navigate to any other page you have defined in the &lt;strong&gt;pages&lt;/strong&gt; folder.&lt;/p&gt;
&lt;p&gt;So it&#39;s best to scope your client routes to a folder (such as &lt;strong&gt;app&lt;/strong&gt;), and avoid overriding your other pages!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Comparing two redux setups</title>
    <link href="https://example.com/posts/comparing-redux-setup/"/>
    <updated>2020-08-03T13:21:21Z</updated>
    <id>https://example.com/posts/comparing-redux-setup/</id>
    <content type="html">&lt;p&gt;I recently came across two different examples of setup that used Redux to manage state in a sample app. They were so different that I thought it was worth delving a little deeper into why, and how we can write Redux code so it&#39;s a good fit for our needs.&lt;/p&gt;
&lt;h2 id=&quot;minimum-viable-redux&quot; tabindex=&quot;-1&quot;&gt;Minimum Viable Redux &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/comparing-redux-setup/#minimum-viable-redux&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Redux used to be pretty much the only way of managing state in React without &amp;quot;prop drilling&amp;quot; or mutating state (which means changing it so that the original state is lost) as you go. There are a bunch of different options now, but Redux is still in common use. However that use doesn&#39;t always have a common pattern. Take this example I found on a JSFiddle by Caner Dagli:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Provider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; connect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createStore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; applyMiddleware &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;redux&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;redux-thunk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPostsRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FETCH_REQUEST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPostsSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FETCH_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    payload&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPostsError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FETCH_ERROR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FETCH_REQUEST&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FETCH_SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPostsWithRedux&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchPostsRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchPostsSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchPostsError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchPosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/posts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;    Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchPostsWithRedux&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; Container &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapStateToProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchPostsWithRedux &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I really think this example is great, it shows us how to write the most basic boilerplate code for a Redux store and how you might use it for a simple use case, one data type and a single action.&lt;/p&gt;
&lt;p&gt;So does Redux require a lot of boilerplate code? Not in this example. However, if you want to be able to scale it to use different data types (think posts and users and tags and pages ...), the above code isn&#39;t going to scale.&lt;/p&gt;
&lt;h2 id=&quot;redux-at-scale&quot; tabindex=&quot;-1&quot;&gt;Redux at scale &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/comparing-redux-setup/#redux-at-scale&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Take a look at this example, it&#39;s a GatsbyJS starter but I hope you can still find your way around the code: &lt;a href=&quot;https://github.com/Evaluates2/Gatsby-Starter-TypeScript-Redux-TDD-BDD&quot;&gt;https://github.com/Evaluates2/Gatsby-Starter-TypeScript-Redux-TDD-BDD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you peek inside the &lt;strong&gt;/src/&lt;/strong&gt; folder, you&#39;ll see another folder, &lt;strong&gt;/state/&lt;/strong&gt;, with another 4 folders, &lt;strong&gt;/actions/&lt;/strong&gt;, &lt;strong&gt;/middlewares/&lt;/strong&gt;, &lt;strong&gt;/reducers/&lt;/strong&gt; and &lt;strong&gt;/types/&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Just look inside the &lt;strong&gt;/actions/&lt;/strong&gt; folder and you&#39;ll see four files. Two are tests, but there&#39;s an action for each data type (login and todos respectively). Similarly, there&#39;s a reduce for each data type, middleware for each type ... etc.&lt;/p&gt;
&lt;p&gt;This code is built for extensibility. By compartmentalising code like this I can see that I will be able to add another type (like lists or pages or transactions) without having to make fundamental changes to how this project is set up. Smiliarly, if something changed in my todos, I can see more easily where I need to go to change something so that the app still renders in the way I expect it to.&lt;/p&gt;
&lt;p&gt;I liked this example because it shows us a totally different way of writing Redux code. It helps us see the separate concerns we need to care about (reducers, actions, middleware even) if we are going to write a robust application that will be able to serve many product iterations over a longer period of time without major refactors.&lt;/p&gt;
&lt;p&gt;I think these two approaches also teach us that Redux is a powerful suite of tools that help us manage state in our applications — and that it can be used in different ways depending on your desired approach.&lt;/p&gt;
&lt;p&gt;But they also tell us something about software development: the fastest approach is great for some small project you&#39;re only going to touch once. But architecting an application that will withstand the test of time is a different game altogether.&lt;/p&gt;
&lt;p&gt;That&#39;s the great thing about the way Redux is built: it doesn&#39;t get in the way of writing new code ... providing we start out in the right way!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Explaining technical things to nontechnical thinkers</title>
    <link href="https://example.com/posts/explaining-technical-to-nontechnical-audience/"/>
    <updated>2020-08-28T10:21:21Z</updated>
    <id>https://example.com/posts/explaining-technical-to-nontechnical-audience/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;A significant part of our jobs as developers is explaining technical things to people who don&#39;t have the same technical knowledge. How do we help someone to make a decision that involves technical understanding?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A large part of any developers role is not coding, but explaining what needs to be written, or explaining what was written by somebody else, or to help make decisions on procurement or other things.&lt;/p&gt;
&lt;p&gt;How do we do this effectively? If we start explaining technical things to those who don&#39;t have the background we do, we&#39;ll lose them within the first few words. So we need to find a way around the problem.&lt;/p&gt;
&lt;h2 id=&quot;use-comparisons&quot; tabindex=&quot;-1&quot;&gt;Use comparisons &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/explaining-technical-to-nontechnical-audience/#use-comparisons&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One method I&#39;ve used a lot lately is comparisons.&lt;/p&gt;
&lt;p&gt;In a selection process for a search tool, we had a broad range of tools that we spent a lot of time researching. Some tools were extremely simple, off-the-shelf plugins. Others were fully-featured Saas apps. And some were whole environments that you could upload to a server and build an experience around.&lt;/p&gt;
&lt;p&gt;In order to convey the breadth of what we had, I used &lt;em&gt;cars&lt;/em&gt; as a comparison to these tools.&lt;/p&gt;
&lt;p&gt;Our SaaS tool was a &lt;em&gt;Porsche&lt;/em&gt;, because it was not just what we needed in a neat package, but it was also really nice to travel in.&lt;/p&gt;
&lt;p&gt;We found a very basic cloud tool that was suitable, but had almost none of the features that the SaaS tool had, so I compared it to a &lt;em&gt;handcar&lt;/em&gt; that involved a lot of manual work, but would still get us there.&lt;/p&gt;
&lt;p&gt;There was a new contender on the market, which was still in active development. I compared this to a &lt;em&gt;concept car&lt;/em&gt; that I knew would eventually do everything we needed to, but for now it was a nice dream.&lt;/p&gt;
&lt;p&gt;And then there were some enterprise offerings that were immensely configurable but would require many months of development time to configure, and a sizeable investment to maintain, that I compared to a &lt;em&gt;car factory&lt;/em&gt;, because it would provide what we need, but we&#39;d need to build the factory first ... and we only needed one car.&lt;/p&gt;
&lt;p&gt;Comparisons hit home when they contain only the information that&#39;s needed. Even specifying what type of car was perhaps an unnecessary detail I could&#39;ve dropped here.&lt;/p&gt;
&lt;p&gt;And comparisons work even better when they are something the person can relate to. I knew we all understood the concept of cars and what it takes to manufacture one, so this was a good basis for comparison.&lt;/p&gt;
&lt;p&gt;I&#39;m still learning how to explain technical concepts to others in my team, but slowly, and with consideration for others&#39; points of view, we&#39;ll get there together.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The search service landscape</title>
    <link href="https://example.com/posts/search-service-landscape/"/>
    <updated>2020-08-28T10:21:21Z</updated>
    <id>https://example.com/posts/search-service-landscape/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Search is a massive growth market but there is only one market leader and many inadequate contenders. Here&#39;s why I think we should be building more search providers to expand the market.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When did you last use a site search tool? What engine powered that tool? I can pretty much guess what most of you would reply. And whilst they are by far the market leaders, I think that&#39;s an indication that search as a market is about to explode.&lt;/p&gt;
&lt;h2 id=&quot;history-of-search&quot; tabindex=&quot;-1&quot;&gt;History of search &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#history-of-search&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building a basic search implementation was often something that was baked into monolithic apps. For example, WordPress comes with a no-frills search built in.&lt;/p&gt;
&lt;p&gt;However we&#39;ve gotten past monolithic do-everything-in-one-codebase apps now. Search becomes it&#39;s own concern, which is better for the search tool, and for the person using it, because we have the option to swap tools that aren&#39;t doing their job well enough.&lt;/p&gt;
&lt;p&gt;Whilst &lt;strong&gt;Apache Solr&lt;/strong&gt; and &lt;strong&gt;Elastic Search&lt;/strong&gt; are the granddaddies of search, they are in themselves extremely powerful, out-of-the box platforms. I am going to exclude them from the criteria because they&#39;re more used for logging, processing and analysing hefty amounts of data such as event logs, application errors and things like that.&lt;/p&gt;
&lt;p&gt;The use cases I&#39;m specifically thinking about are site search, app search and searches for online documentation.&lt;/p&gt;
&lt;h2 id=&quot;the-contenders&quot; tabindex=&quot;-1&quot;&gt;The contenders &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#the-contenders&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Search is an emerging market and not nearly as well developed as the CMS market. But there are a few up and coming options.&lt;/p&gt;
&lt;h3 id=&quot;1.-algolia&quot; tabindex=&quot;-1&quot;&gt;1. Algolia &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#1.-algolia&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Algolia is the shining beacon here. It is clear from their implementation that they saw a gap in the market and have exploited it masterfully. They&#39;ve also got the most unbelievable marketing department, so good that you might be pursuaded to believe there are no contenders for the throne (which is almost true ...)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Lovely analytics dashboard, delightful SDK&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; Closed source platform that can get really expensive ... just mention &amp;quot;single sign-on&amp;quot; and watch the dollar signs roll...&lt;br /&gt;
&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&quot;https://www.algolia.com/&quot;&gt;https://www.algolia.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2.-cludo&quot; tabindex=&quot;-1&quot;&gt;2. Cludo &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#2.-cludo&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cludo are an up and coming SaaS platform not unlike Algolia, with a nice dashboard and machine learning backed features. I really want to like Cludo ... but they currently only offer a web scraper as a tool. Having seen the interface, I can say it&#39;s a really good scraper with a good set of features, but it&#39;s still a content scraper. In the use case I had, I needed to upload indexes at the time we built them, and we couldn&#39;t rely on that kind of tool. If they extended their product to include API uploads, it would be a much stronger product in my opinion.&lt;/p&gt;
&lt;p&gt;UPDATE: Cludo team have told me they &lt;em&gt;do&lt;/em&gt; have a data push API, so you don&#39;t need to use their site crawler. More info: &lt;a href=&quot;https://docs.cludo.com/#data-indexing_push&quot;&gt;https://docs.cludo.com/#data-indexing_push&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Good contender for the market&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; No SDK.&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://www.cludo.com/&quot;&gt;https://www.cludo.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3.-swifttype&quot; tabindex=&quot;-1&quot;&gt;3. SwiftType &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#3.-swifttype&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SwiftType have recently been bought out by Elastic, and is now called &amp;quot;Elastic Site Search&amp;quot;. Again, a good tool with two strong products: app search and site search. But again this product falls into the trap of only allowing content in via web scraper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Backing of Elastic, a leader in the landscape&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; No content uploads API. No SDK.&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://swiftype.com/&quot;&gt;https://swiftype.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4.-meili&quot; tabindex=&quot;-1&quot;&gt;4. Meili &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#4.-meili&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Meili is an outlier in this space, and an entirely new product that isn&#39;t built on any existing technologies (most of the other platforms rely on Elastic under the hood). Meili is an open-source, self-hosted solution (I hope they&#39;ll offer it as a Saas in the future too), written in Rust. It is in active development, and possibly pre-alpha as I write this. There&#39;s no dashboard which seems a shame, but there is a good set of SDKs and &lt;a href=&quot;https://github.com/meilisearch/integration-guides&quot;&gt;integration guides on their GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Self hosted, fast as heck. Upload content via API&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; No analytics dashboard&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://www.meilisearch.com/&quot;&gt;https://www.meilisearch.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;5.-typesense&quot; tabindex=&quot;-1&quot;&gt;5. TypeSense &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#5.-typesense&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;m adding Typesense about a month after I published this original article, since I&#39;ve only just found it.&lt;/p&gt;
&lt;p&gt;Typesense is, like Meili, open source, with a &amp;quot;cloud&amp;quot; version that you can sign up to as well. Typesense seems to have its positioning right, as a search API that you can install from a Docker image or on a Linux server via apt or yum package managers. There&#39;s also API libraries in JavaScript, PHP, Python and Ruby. The JS package in particular seems to come at a reasonable bundle size.&lt;/p&gt;
&lt;p&gt;The interesting thing about this is it&#39;s written in C++, so it&#39;s likely to be pretty fast too.&lt;/p&gt;
&lt;p&gt;Shoutout to Christopher Geary for letting me know about this one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Self hosted and cloud option&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; No analytics dashboard&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://typesense.org/&quot;&gt;https://typesense.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/search-service-landscape/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I was an indie hacker or an investor with some developer punch, I&#39;d be building an Algolia clone right now. Whilst they are clearly market leaders there&#39;s plenty of room for growth here, only one or two key features hold back the expansion into a mature market with a good amount of choice.&lt;/p&gt;
&lt;p&gt;For now, I&#39;m not sure whether to recommend Algolia with the bitter pill of it&#39;s astronomical Enterprise costs, or bet on a competitor, hoping that they will eventually catch up.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Don&#39;t fear the JAMStack</title>
    <link href="https://example.com/posts/dont-fear-jamstack/"/>
    <updated>2020-09-03T10:21:21Z</updated>
    <id>https://example.com/posts/dont-fear-jamstack/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;WordPress has long been the de facto publishing platform for the web. But many developers are hearing more about the JAMStack. Here&#39;s why I switched, and my take on where I think things are going to go from here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I would like to acknowledge and address some recent efforts of those in WordPress circles to be vocal against the new approaches to publishing that have arisen in recent years, most significantly these 2 that I&#39;ve seen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thenewstack.io/wordpress-co-founder-matt-mullenweg-is-not-a-fan-of-jamstack/&quot;&gt;&amp;quot;WordPress Co-Founder Matt Mullenweg Is Not a Fan of JAMstack&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/photomatt/status/1301419020827074560?s=21&quot;&gt;Tweet: &amp;quot;Switching back to WordPress after a year on Hugo&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all, I must acknowledge a debt of gratitude to WordPress. The efforts the team have made to democratise publishing over the past 20 years have been hugely successful, and I still am really happy that there&#39;s a solution out there that people with little technical knowledge can utilise. No other publishing platform has done that, and even now its real competitors cannot achieve this because they are closed silos.&lt;/p&gt;
&lt;p&gt;However, a democracy can never consist of one. A lot has happened in recent years which has preceded a sea change for a lot of developers to the JAMStack, a myriad of alternative separate technologies – one that still &lt;em&gt;includes&lt;/em&gt; WordPress, but which is radically different from the approach it has taken.&lt;/p&gt;
&lt;h2 id=&quot;progression&quot; tabindex=&quot;-1&quot;&gt;Progression &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dont-fear-jamstack/#progression&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For me, this change happened when I realised I was struggling to progress as a developer, or even to find enjoyable work, where I could produce things I could be proud of. And that in order to move forward, I needed to move away from that platform. I found 3 things that were damaging my development career:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The WordPress API is often inconsistent. &lt;code&gt;get_the_content()&lt;/code&gt; vs &lt;code&gt;the_content()&lt;/code&gt;, &lt;code&gt;WP_Post&lt;/code&gt; vs &lt;code&gt;WP_Term&lt;/code&gt;, differing returns (sometimes &lt;em&gt;void&lt;/em&gt;, sometimes not) for different &lt;code&gt;get_*()&lt;/code&gt; functions ... trying to find my way around this API could never help someone cultivate good development habits, or understand how an API &lt;em&gt;should&lt;/em&gt; work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WordPress hasn&#39;t moved on from PHP 5. This means learning newer aspects of the language has been impossible and left me unprepared to work on other platforms. I could only get another job working with WordPress, which meant I was unlikely to ever move out of the cottage industry that provides.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WordPress development practices haven&#39;t moved with the times. I worked for a short time on a Laravel project, and I was dumbfounded by things I had to learn, like build pipelines, database migrations, object oriented language principles, and even how to use a package manager.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In short, I was faced with a decision: either continue to develop solely with WordPress for the rest of my career, or make the jump. I had already seen a large number of developers grow dissatisfied because of these issues, and similarly move off the platform.&lt;/p&gt;
&lt;p&gt;I decided to do the same just around the time that Gutenberg was being released.&lt;/p&gt;
&lt;h2 id=&quot;gutenberg&quot; tabindex=&quot;-1&quot;&gt;Gutenberg &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dont-fear-jamstack/#gutenberg&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whilst the new editor interface, Gutenberg, was a big step forward for users of the platform, it&#39;s no secret that it alienated a lot of developers.&lt;/p&gt;
&lt;p&gt;Largely this was because of the ease with which page layouts could be created without developer input, bypassing the finesse and structure that a developers&#39; input brings to a website. Now it&#39;s even easier for individuals to create blogs under their own steam.&lt;/p&gt;
&lt;p&gt;I am overall pleased with this idea because it pulls the rug out from under a lot of cheap, low quality &amp;quot;web design&amp;quot; agencies that have built their empires on the free platform for many years. I&#39;ve worked for a range of these companies and I personally would be happy to see them pivot or be made extinct.&lt;/p&gt;
&lt;p&gt;But that also means there&#39;s a lot less work for a developer to do ... so not only has WordPress been keeping developers in a cottage industry, it is also forcing people &lt;em&gt;out&lt;/em&gt; of that industry at an increasing rate.&lt;/p&gt;
&lt;p&gt;When I looked to the horizon, my colleagues and I could see a world where WordPress was once again the de facto standard for small customers who needed a quick platform, and where agencies turn to using alternatives.&lt;/p&gt;
&lt;p&gt;I needed to skill up quickly.&lt;/p&gt;
&lt;h2 id=&quot;voting-pebbles&quot; tabindex=&quot;-1&quot;&gt;Voting Pebbles &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/dont-fear-jamstack/#voting-pebbles&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s still room for WordPress in the new landscape of the JAMStack world. The WP GraphQL plugin is great for sourcing content. But yes, there are a lot more alternatives that have the economies of scale and financial power to pivot much more quickly than WordPress has.&lt;/p&gt;
&lt;p&gt;A lot of progress has been made towards finding a better editor experience ... but we haven&#39;t quite solved it yet. I think projects like TinaCMS from Forestry are going to be the next iteration, and have the potential to bring an even better editing experience to users than WordPress can provide.&lt;/p&gt;
&lt;p&gt;In the meantime, developers like me will continue to push the JAMStack agenda. Why? Because we have been pushed out of our cottage industry, and we need to continue to work, and to enjoy our work. And because we do have a lot of buying power for our clients, stakeholders and family and friends whom we build for.&lt;/p&gt;
&lt;p&gt;WordPress is no longer my favourite option. But it is still an option.&lt;/p&gt;
&lt;p&gt;You started the avalanche, and it&#39;s too late for the pebbles to vote.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/60loeoblu0M&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;(Wow there really &lt;em&gt;is&lt;/em&gt; a Babylon 5 quote for every occasion.)&lt;/p&gt;
&lt;p&gt;&lt;small&gt;with thanks to the TND community, specifically Frank Taillandier for the title!&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Freelancing: options and suggestions</title>
    <link href="https://example.com/posts/freelancing-options-suggestions/"/>
    <updated>2020-09-07T13:21:21Z</updated>
    <id>https://example.com/posts/freelancing-options-suggestions/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Many of us dream someday of freelancing and living a ... less restrictive? ... lifestyle. But is it truly the best option? I freelanced for 7 years before the Credit Crunch killed my business. Looking back, here are a few of the questions I&#39;ve been asked about freelancing.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;is-it-better-to-freelance&quot; tabindex=&quot;-1&quot;&gt;Is it better to freelance? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#is-it-better-to-freelance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Is it better to freelance, or to work full time at one company? I think in a lot of ways, it is better to freelance. It does depend on your personality: are you risk averse, or do you mind living off your wits a little?&lt;/p&gt;
&lt;p&gt;I freelanced for a number of years, and it went OK. It provided about enough to support my wife and I until the 2008 recession hit … then it got bad really quickly. I used up all of our savings within the first year and had to find alternative employment. For myself, I don’t think I’d consider it now, but that’s mostly because I have 3 young kids to support. However, once they’ve grown up I’d really like to go back to it.&lt;/p&gt;
&lt;h2 id=&quot;do-i-need-to-be-experienced&quot; tabindex=&quot;-1&quot;&gt;Do I need to be experienced? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#do-i-need-to-be-experienced&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would say don’t worry about your experience level. The hardest thing to learn is how to manage business relationships, not how to code, and you can only learn both by practice … so I don’t think you need to worry too much, especially if you’re already building things so you have a portfolio (ie you can prove you can do what you&#39;re saying).&lt;/p&gt;
&lt;p&gt;When I started web development, it was a little bit by accident: I started a graphic design business, but one of my first clients wanted a website as well as branding. So I charged a small fee and learnt as I went, without having a clue how to do it.&lt;/p&gt;
&lt;p&gt;I didn&#39;t make any money, but I learned enough to get more web development work off the back of that, and building my own site.&lt;/p&gt;
&lt;h2 id=&quot;should-i-find-a-niche-or-generalise&quot; tabindex=&quot;-1&quot;&gt;Should I find a niche or generalise? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#should-i-find-a-niche-or-generalise&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a lot of generalists in the freelance world: people who can work with multiple languages, turn their hand to many different things ... and there are those who specialise in a niche and get work from being specialists in the one subject.&lt;/p&gt;
&lt;p&gt;Finding a niche is quite valuable, but there are hazards too. If your niche dries up, then you’re going to have to pivot rather quickly onto another skill. But some niches can be very lucrative, for example I recently read that some government / industrial projects are still hiring FORTRAN developers. That blew my mind.&lt;/p&gt;
&lt;p&gt;If you maintain a generalist approach, you can turn your hand to most things. And that means you might be able to afford to be more selective in who you work with.&lt;/p&gt;
&lt;h2 id=&quot;what-tech-stack-should-i-use&quot; tabindex=&quot;-1&quot;&gt;What tech stack should I use? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#what-tech-stack-should-i-use&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s no right answer to this one either, if I were to freelance and manage my own clients today, I’d probably do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a standard frontend that I can fork and iterate on quickly, probably leaning on an existing library to do the heavy lifting. I’d probably use Gatsby because I’m familiar with it and it has a great plugin ecosystem.&lt;/li&gt;
&lt;li&gt;Set up a multi-tenant backend so that I have only 1 codebase to maintain and keep my clients happy. I can’t decide how to do this ... it needs to be something that supports multiple tenants, so that might be a bit complex. I’d likely use Strapi or Webiny, or perhaps even a paid platform such as DatoCMS or Sanity to start with, until I’m confident in my own platform&lt;/li&gt;
&lt;li&gt;Set up monitoring and analytics tools on my own platforms using open source software so I can keep an eye on what’s going on without paying too much for it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is because I&#39;m a JavaScript developer and I love open source and indie web. You&#39;d likely make a different decision if you knew PHP or another language.&lt;/p&gt;
&lt;h2 id=&quot;contracting-or-freelancing&quot; tabindex=&quot;-1&quot;&gt;Contracting or freelancing? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#contracting-or-freelancing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess there’s broadly 2 types of freelancing open to developers:&lt;/p&gt;
&lt;p&gt;a) Building websites for clients directly&lt;br /&gt;
b) Contracting&lt;/p&gt;
&lt;p&gt;With contracting, you’re able to keep your hands on the tools, so to speak. But if you are building websites for clients, your primary concern is marketing, building your reputation, and keeping them happy. That involves certain sacrifices, though there’s more chance of “money on a sunday” from that one.&lt;/p&gt;
&lt;p&gt;What I mean by “money on a sunday” is that you can charge monthly fees for maintenance and hosting, and therefore you’ll be earning money when you’re not working (on Sundays!). That can become very lucrative. I know someone who makes 40% of their business income from those regular fees, and can afford to not take any more new clients on if they wanted to.&lt;/p&gt;
&lt;p&gt;So there’s no clear cut answer … and you could do both: have a few clients and contract in between. It could mean that sometimes you’re working all hours because you need to keep clients happy as well as keep your obligations to your contract firm.&lt;/p&gt;
&lt;h2 id=&quot;other-tips&quot; tabindex=&quot;-1&quot;&gt;Other tips &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/freelancing-options-suggestions/#other-tips&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build your network quickly. Start as soon as possible. Use a small business network to get a foothold, connect with businesses on LinkedIn, canvass among businesses locally. Anything to get you connected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get in touch with some good designers who are in need of developers. Quite often they are better at marketing and can pass you referrals if you do them favours in return.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advertise, advertise, advertise! Don&#39;t stop writing or producing content like podcasts, blog posts, vLogs ... be careful that doesn&#39;t take up too much of your time but you&#39;ll be more respected and likely get more work because of that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build in a hosting and maintenance model for residual income. All technology needs to be maintained, if it isn&#39;t it&#39;ll break down sooner than it should. Sell that idea to your customers. If you can aim to get 20-40% of revenue this way, your life will be much easier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build in a support model. Clients will often come to you for small updates or content updates (even if they have a cms!), because either they don&#39;t have the skill or the time to do it. Arrange a regular fee for those who come to you on this basis. And charge a high minimum 1-hour fee for those who don&#39;t (to push them towards the regular maintenance).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hire an accountant as soon as you can afford to do so. They can keep on top of things like taxes, late invoices and they&#39;ll find out where you can claim or save money.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s it! At least, I can&#39;t think of anything else right now ... I hope that&#39;s useful to someone.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Publishing both JS and non-JS sites</title>
    <link href="https://example.com/posts/publishing-both-js-non-js-sites/"/>
    <updated>2020-09-18T13:21:21Z</updated>
    <id>https://example.com/posts/publishing-both-js-non-js-sites/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;It&#39;s always bothered me that the majority of internet users spend a lot of money downloading and running JavaScript, yet I enjoy building things with JavaScript, and want to provide an enhanced experience using JS without sacrificing their needs to do so. Here&#39;s one way we can have the best of both worlds.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m not going to argue JS vs no JS use here, I don&#39;t think it&#39;s even an argument. In my opinion we need to provide the best experience we can for &lt;em&gt;all&lt;/em&gt; of our users, and that includes both those on slow connections and those on fast ones.&lt;/p&gt;
&lt;p&gt;Now, there&#39;s an easier way to do both.&lt;/p&gt;
&lt;h2 id=&quot;why-this-site&quot; tabindex=&quot;-1&quot;&gt;Why this site? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#why-this-site&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&#39;t really need any JavaScript on this site. But I used GatsbyJS to build it, which by generates HTML but then overlays that with a React app (I already switched from React to Preact for better performance benefits). I had a site search and an animation, which wasn&#39;t part of the core experience but were nice enhancements.&lt;/p&gt;
&lt;p&gt;So I decided that I should by default provide an experience which was friendlier to those with CPU or battery restrictions, and then have another domain which had the fancy stuff.&lt;/p&gt;
&lt;h2 id=&quot;setup-using-gatsby-plugins&quot; tabindex=&quot;-1&quot;&gt;Setup using Gatsby Plugins &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#setup-using-gatsby-plugins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used two plugins to render an HTML &amp;amp; CSS site with Gatsby: &lt;code&gt;gatsby-plugin-no-javascript&lt;/code&gt; and &lt;code&gt;gatsby-plugin-no-javascript-utils&lt;/code&gt;. The first builds the site as normal, but then unlinks the JavaScript, so that all you get is the HTML version of the site that Gatsby already builds. The second allows you to do some other finessing so that you can disable inline styles and remove sourcemaps too.&lt;/p&gt;
&lt;p&gt;After installing and configuring these plugins, the next step was to setup an environment variable:&lt;/p&gt;
&lt;p&gt;In a file called &lt;strong&gt;.env&lt;/strong&gt; in the root of the project, I added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JS_DISABLED=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then in my &lt;strong&gt;gatsby-config.js&lt;/strong&gt; I access this variable by adding the following to the top of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require(&amp;quot;dotenv&amp;quot;).config()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I wanted to keep everything else about the configurations the same. Since the export in this file is a single JavaScript object, I could compose it up from separate elements. I could have one array for the plugins, another array for my noJS plugins, like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultPlugins &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// everything else&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; noJsPlugins &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;defaultPlugins&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gatsby-plugin-no-javascript&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gatsby-plugin-no-javascript-utils&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;removeGeneratorTag&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;noInlineStyles&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now combine them into one object, conditionally choosing which array of plugins to choose, and export it as a module:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;siteMetadata&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;pathPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; siteTitle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;siteUrl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://deliciousreverie.co.uk&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;blog of developer &amp;amp; bookworm benjamin read&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JS_DISABLED&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;noJsPlugins&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;defaultPlugins&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;setting-up-on-netlify&quot; tabindex=&quot;-1&quot;&gt;Setting up on Netlify &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#setting-up-on-netlify&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Netlify is very smart. I only needed to do a few things: I initiated a new site and chose the same base repo. I had to make sure I was using Netlify&#39;s DNS so that I could use my subdomain with the new site. Then I set the environment variables on both sites, merged the code and it was live!&lt;/p&gt;
&lt;h2 id=&quot;updating-the-ui&quot; tabindex=&quot;-1&quot;&gt;Updating the UI &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#updating-the-ui&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I checked the noJS version of my site, the search bar was still visible, although it didn&#39;t work. So I had to stop it from showing on the noJS version.&lt;/p&gt;
&lt;p&gt;I tried using &lt;code&gt;process.env.JS_DISABLED&lt;/code&gt; in the JSX, but Gatsby separates environment variables. If I wanted to access this variable on the frontend, I could rename it GATSBY_JS_DISABLED, but I thought of another way of doing it that proved just as effective...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{typeof window !== &#39;undefined&#39; &amp;amp;&amp;amp; &amp;lt;SearchForm /&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the JSX that gets built on the server doesn&#39;t render the searchform because there&#39;s no Window object. &lt;a href=&quot;https://joshwcomeau.com/react/the-perils-of-rehydration/&quot;&gt;Josh W Comeau has a more robust way of handling this use case on his blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I used this again to display a message in the footer to let users know which version of the site they are on:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      You&#39;re currently on the &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;javascript disabled&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; version &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; To&lt;br /&gt;      enable the site search and some pretty animations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://jsenabled.deliciousreverie.co.uk&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        view the javascript enabled react app&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      You&#39;re currently on the &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;javascript enabled&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; version &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;br /&gt;      you need to conserve your battery or &lt;span class=&quot;token constant&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://deliciousreverie.co.uk&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;view the &lt;span class=&quot;token constant&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CSS&lt;/span&gt; only site&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used this method because I wanted to &lt;em&gt;toggle between&lt;/em&gt; elements that were inside a single parent element.&lt;/p&gt;
&lt;h2 id=&quot;discouraging-search-engines&quot; tabindex=&quot;-1&quot;&gt;Discouraging search engines &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#discouraging-search-engines&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, I needed to discourage robots from indexing the JS enabled version of the site: the last thing I need is duplicate content warnings or to hurt my own SEO.&lt;/p&gt;
&lt;p&gt;I could have used the same trick I&#39;ve already used above to add this meta tag to the &lt;em&gt;Layout&lt;/em&gt; file, but I opted instead to use Netlify&#39;s postprocessing tool to add it to the appropriate site:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;robots&amp;quot; content=&amp;quot;noindex&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought this would be more robust since the first pass robots make is done without JavaScript enabled, so it needed to be added to the pre-rendered HTML that&#39;s under the React app.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What&#39;s stopping us building everything like this? It didn&#39;t take long to set up, and with some UI tweaks I got the best of both worlds: a fancy site with all the whistles and bangs of a JavaScript app, and a barebones (but still pretty) site that doesn&#39;t cost the earth to run.&lt;/p&gt;
&lt;h2 id=&quot;post-script:-&amp;quot;this-should-be-done-by-browser-hosting-platform-a-serverless-function&amp;quot;&quot; tabindex=&quot;-1&quot;&gt;Post-Script: &amp;quot;This should be done by [browser, hosting platform, a serverless function]&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#post-script:-%22this-should-be-done-by-browser-hosting-platform-a-serverless-function%22&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things I hear often is that we developers shouldn&#39;t be responsible for this kind of thing, that it should be the responsibility of some other part of the infrastructure of the web to handle request loads, but I don&#39;t think that&#39;s the case.&lt;/p&gt;
&lt;p&gt;Here&#39;s a few reasons I don&#39;t think it can be the responsibility any of those things:&lt;/p&gt;
&lt;h3 id=&quot;browser&quot; tabindex=&quot;-1&quot;&gt;Browser? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#browser&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browsers start fetching small packets of information, then scale up until they&#39;ve expended the bandwidth. It&#39;s only once they reach that point that they can tell what the users&#39; connection is like. This is probably too late to decide what to send down the wire.&lt;/p&gt;
&lt;h3 id=&quot;hosting-platform&quot; tabindex=&quot;-1&quot;&gt;Hosting platform? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#hosting-platform&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hosting platforms don&#39;t have the information required to know in detail what the users&#39; connection is like. At best this is an approximation. Could we implement an API so that we can get that data? Maybe, but take a look at what happened with the Battery status API. We don&#39;t want to go there again.&lt;/p&gt;
&lt;h3 id=&quot;serverless-function&quot; tabindex=&quot;-1&quot;&gt;Serverless function? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#serverless-function&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hmm ... maybe ... but see above. Potentially an edge function could do it ... though I don&#39;t know enough about this to see how.&lt;/p&gt;
&lt;h3 id=&quot;nobody&quot; tabindex=&quot;-1&quot;&gt;Nobody? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/publishing-both-js-non-js-sites/#nobody&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Erm no. Someone has to take responsibility here, and it&#39;s not the user. Since we&#39;ve exhausted all other options, I think that we must rise to the challenge and provide people the online experience ... not that they &lt;em&gt;need&lt;/em&gt;, but that they &lt;em&gt;deserve&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tools for Production Ready Code</title>
    <link href="https://example.com/posts/tools-production-ready-code/"/>
    <updated>2020-10-14T10:21:21Z</updated>
    <id>https://example.com/posts/tools-production-ready-code/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;A note about this article&lt;/strong&gt;: This was a feature I wrote for Net magazine which was sadly closed down before it was published, so I published it on &lt;a href=&quot;http://dev.to/&quot;&gt;dev.to&lt;/a&gt; initially. It&#39;s aimed at people who want to get into devOps, or product owners who want to understand what it is they&#39;re getting themselves into. I hope it proves to be useful.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Websites are great tools for communication, but it&#39;s remarkably easy to take them offline. One of the most panic-inducing moments for any operation can be that first call from a customer informing you that the site is down ... and then the next call, and then fifty more ... suddenly the company grinds to a halt until the problem can be fixed.&lt;/p&gt;
&lt;p&gt;Downtime might not be much of a problem for every site out there. If you take down your own personal blog for a few hours, it probably doesn&#39;t matter a huge amount. However, most companies and other organisations now depend upon their web sites being accessible 24 hours a day, 7 days a week. Any downtime for these organisations results in loss: the company could be losing money, critical information might not be reaching the right people in a disaster zone, or at the very least, the organisation&#39;s reputation is being eroded, minute by minute.&lt;/p&gt;
&lt;p&gt;For those organisations in which there&#39;s a huge financial investment and thousands — perhaps millions - of customers, reliability is a huge concern. There are now a large range of tools, products and - above all - strategies - for ensuring that if (or rather, &lt;em&gt;when&lt;/em&gt;) something untoward happens, the right people can resolve the situation as quickly as possible.&lt;/p&gt;
&lt;p&gt;In this article we&#39;re going to provide some answers to these questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can we as development teams continue to offer high levels of confidence?&lt;/li&gt;
&lt;li&gt;How can we trust that new features are going to work as expected?&lt;/li&gt;
&lt;li&gt;What can we do to minimise issues that do occur?&lt;/li&gt;
&lt;li&gt;What steps can we take to make sure any unwanted surprises can be fixed quickly?&lt;/li&gt;
&lt;li&gt;How can we make sure that the duration of any downtime is as short as possible?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have at our fingertips a wealth of tools that can be added to a code base, and a process flow, to catch issues before they reach production ... and if they do reach production, to minimise the impact.&lt;/p&gt;
&lt;p&gt;The strategies and tools we&#39;re looking at here cover both prevention and resolution of problems that could occur to any web site, but with a focus on full-stack JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-javascript-fails&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When JavaScript fails &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-javascript-fails&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript is a dynamic language. It&#39;s great for coercing strings into numbers and back again. But sometimes this causes issues. We have to make sure that the values we&#39;re working with are of the same type, otherwise one error in the JavaScript code could break the site entirely.&lt;/p&gt;
&lt;p&gt;There have been a number of notable projects that make an effort to deal with this kind of problem by turning JavaScript from a &lt;em&gt;dynamic&lt;/em&gt; to a &lt;em&gt;statically&lt;/em&gt; typed language:&lt;/p&gt;
&lt;h3 id=&quot;typescript-flow-or-reason&quot; tabindex=&quot;-1&quot;&gt;TypeScript, Flow or Reason &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#typescript-flow-or-reason&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TypeScript and Flow are the two most popular ways of turning JavaScript into a statically-typed language. Both approaches are a superscript of JavaScript, which means your code needs to be transpiled back into normal JavaScript in order to work on the web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; is run by Microsoft and is developed for building applications at scale. &lt;strong&gt;Flow&lt;/strong&gt; is a great alternative with a similar api.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt; is a more interpretive system that allows you to write very succinct type-safe code. There are a lot of features to this language that mean it can appear quite different to the JavaScript developers are used to writing.&lt;/p&gt;
&lt;p&gt;Neither tool is perfect: each of these languages still needs to be compiled to the kind of JavaScript that runs in browsers. Developers need to also adopt strategies to ensure that compiled code still coerces values correctly by writing functions that check types where it could be of an unexpected type, for example data being requested from a 3rd party via an API.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-things-aren&#39;t-working-as-expected&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When things aren&#39;t working as expected &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-things-aren&#39;t-working-as-expected&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The development team stand back proudly, showing you the work they&#39;ve done over the last three months. Their pride quickly melts into dismay as the stakeholders say, &amp;quot;It wasn&#39;t supposed to work like that...!&amp;quot; Suddenly, the team has some costly refactoring work to do.&lt;/p&gt;
&lt;p&gt;Assumptions are a development project&#39;s worst enemy. The more assumptions we make about how something is meant to work, the more risk we are creating. The best way to avoid assumptions is by investing time in gathering requirements and writing up clear documentation before any development work starts. If the documentation is loose, unclear or even non-existent, there will be a higher chance of something not working as expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;“Hell is other people’s undocumented assumptions.” — Nicole Fenton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;project-management-tools&quot; tabindex=&quot;-1&quot;&gt;Project Management Tools &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#project-management-tools&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Project management tools such as &lt;strong&gt;Trello&lt;/strong&gt;, &lt;strong&gt;JIRA&lt;/strong&gt;, &lt;strong&gt;Monday&lt;/strong&gt; and others can be set up so that requirements can be clearly documented before project work can begin, and work can be broken down into manageable chunks. Some things that should be included in the documentation should include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature requirements&lt;/li&gt;
&lt;li&gt;Scope (what it should &lt;em&gt;not&lt;/em&gt; include)&lt;/li&gt;
&lt;li&gt;UI Mockups&lt;/li&gt;
&lt;li&gt;Testing approach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documenting the features as a team can be instrumental in reducing undocumented assumptions, allowing the developer to write code relevant to solving the task in scope.&lt;/p&gt;
&lt;p&gt;For more information on this strategy, see the box &amp;quot;Documenting Features&amp;quot; below.&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;supplementary-info:-documenting-features&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Supplementary info:&lt;/strong&gt; Documenting Features &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#supplementary-info:-documenting-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are able to find an issue early in the process then it costs far less time to fix than if you found it later on. For this reason, good documentation is key to having production ready code.&lt;/p&gt;
&lt;p&gt;Documenting a feature should include acceptance criteria, which forms the basis for integration or E2E tests, and can be written in the form of given - when - then statements, for example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; I am using the website&lt;br /&gt;
&lt;strong&gt;When&lt;/strong&gt; I visit the signup page&lt;br /&gt;
&lt;strong&gt;Then&lt;/strong&gt; I can create an account&lt;/p&gt;
&lt;p&gt;Here&#39;s another:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; I am using the website&lt;br /&gt;
&lt;strong&gt;When&lt;/strong&gt; I visit the signup page and have forgotten my password&lt;br /&gt;
&lt;strong&gt;Then&lt;/strong&gt; I can reset my password&lt;/p&gt;
&lt;p&gt;The first part of the statement, &lt;em&gt;Given&lt;/em&gt;, may sound a bit redundant at first, and it could be tempting to miss it out altogether. But it really helps to frame the feature and can become very useful as a reference point further on in the process.&lt;/p&gt;
&lt;p&gt;If the E2E tests fail against these acceptance criteria, the feature can be fixed or rethought.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;unit-tests&quot; tabindex=&quot;-1&quot;&gt;Unit tests &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#unit-tests&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unit tests using a testing library (such as &lt;strong&gt;Jest&lt;/strong&gt;, &lt;strong&gt;Mocha&lt;/strong&gt;, &lt;strong&gt;Chai&lt;/strong&gt;, &lt;strong&gt;Jasmine&lt;/strong&gt; or perhaps something else) are the foundation of developers being able to ensure things are working as they should. How you adopt this approach can vary, but production-ready code means there are at least tests for each possible outcome of the component.&lt;/p&gt;
&lt;p&gt;TDD, or test-driven development, means that a developer will write tests &lt;em&gt;before&lt;/em&gt; they write the component they are building. This helps with conceptual thinking because the developer can have each outcome clearly in mind before they start writing code. This often results in less code refactors, and more optimal code that doesn&#39;t have as much legacy or unnecessary lines.&lt;/p&gt;
&lt;p&gt;For TDD to be effective, the component to be built needs to be planned carefully first.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-your-users-do-something-you-didn&#39;t-expect&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When your users do something you didn&#39;t expect &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-your-users-do-something-you-didn&#39;t-expect&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The phrase &amp;quot;expect the unexpected&amp;quot; is most apt when used in connection with software and those who use it! Quite often, people using your software will be able to use things in a way you didn&#39;t anticipate. The best way to avoid this is to invite people to use the software before it&#39;s released to everyone.&lt;/p&gt;
&lt;h3 id=&quot;quality-assurance-testing&quot; tabindex=&quot;-1&quot;&gt;Quality Assurance testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#quality-assurance-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;QA Engineers can be viewed as the secret superpower of a development team. It&#39;s surprising how many times a good QA Engineer has saved a developer from themselves, or saved the development team from its own assumptions ... or even saved an entire business from its own good intentions. An on-hand QA Engineer is invaluable to a development team, but there are organisations you can contract who will run through your app and uncover issues you would never have been able to think up.&lt;/p&gt;
&lt;p&gt;Two of those companies are &lt;strong&gt;Global App Testing&lt;/strong&gt; and &lt;strong&gt;User Testing&lt;/strong&gt;. Both only have subscription plans. There might be others who can offer a one-off test of your app on a single payment basis.&lt;/p&gt;
&lt;h3 id=&quot;user-acceptance-testing&quot; tabindex=&quot;-1&quot;&gt;User acceptance testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#user-acceptance-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some companies have a &amp;quot;UAT&amp;quot; environment that serves as a staging ground for code that is a candidate for release to the production site. They can then use that environment to organise a group of people to come in from the public to give their opinions on a feature to be released. This gives some qualitative assurance that the feature works and is going to benefit the intended audience. There are a number of companies who organise the individuals to come and test the software, which would involve a fee for their time.&lt;/p&gt;
&lt;p&gt;To be safest, it&#39;s best that everything in the stack - the database, the external functions, the frontend, the authentication server, is duplicated for UAT. That way, the complete user journey can be tested in isolation from production. The result is that any errors in the code won&#39;t accidentally knock out a production service. UAT should be a safer environment for developers to take necessary risks.&lt;/p&gt;
&lt;h3 id=&quot;multivariate-or-ab-testing&quot; tabindex=&quot;-1&quot;&gt;Multivariate, or A/B, Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#multivariate-or-ab-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As well as qualitative testing (validating by quality), quantitative testing (validating by quantity) is also a good way of decreasing risk that a new feature could be causing a problem. Once &lt;strong&gt;Google Optimize&lt;/strong&gt;, &lt;strong&gt;Optimizely&lt;/strong&gt; or a similar tool are integrated with your site, you can release a new feature to a segment of your potential customers for a set period of time.&lt;/p&gt;
&lt;p&gt;Once there has been a significant enough amount of traffic, you can analyse the results and check if conversions are increasing, decreasing, or have stopped altogether, and if the results aren&#39;t positive, you can turn it off so that no further losses occur.&lt;/p&gt;
&lt;h3 id=&quot;user-behaviour-monitoring&quot; tabindex=&quot;-1&quot;&gt;User behaviour monitoring &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#user-behaviour-monitoring&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Getting an insight into user behaviour is invaluable to any experience. Tools like &lt;strong&gt;Hotjar&lt;/strong&gt;, &lt;strong&gt;sessioncam&lt;/strong&gt;, &lt;strong&gt;CrazyEgg&lt;/strong&gt; and others record where the user clicks, and what journey they took through your site, which is particularly useful when introducing new user flows or features. However, these tools have a performance cost, and in my view shouldn&#39;t be left on indefinitely.&lt;/p&gt;
&lt;p&gt;Analytics tools such as &lt;strong&gt;Fathom&lt;/strong&gt;, &lt;strong&gt;Google Analytics&lt;/strong&gt; and others can also be a good source of insight into what could be breaking user flow. Some can even be set up to report activity you want to be monitored, for example if the number of 404 or 500 errors increases above a certain amount in a day or hour.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-components-clash&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When components clash &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-components-clash&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The components we build for our websites might be perfectly built in themselves ... but what happens when we mix them with other components? This can often cause unexpected side effects that can crash your site or result in other issues or errors.&lt;/p&gt;
&lt;p&gt;For this reason, it&#39;s best to check beforehand how they integrate with other components, and whether your visitors can actually complete the tasks you want them to.&lt;/p&gt;
&lt;h3 id=&quot;integration-testing&quot; tabindex=&quot;-1&quot;&gt;Integration testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#integration-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Often written in the same way as unit tests (see above), integration tests can be written for several components that are known to be used together, for example: input fields and a submit button.&lt;/p&gt;
&lt;h3 id=&quot;end-to-end-testing&quot; tabindex=&quot;-1&quot;&gt;End-to-end testing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#end-to-end-testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tools like &lt;strong&gt;Selenium&lt;/strong&gt; (which is cross-platform) and &lt;strong&gt;Cypress&lt;/strong&gt; (JavaScript) can test a user flow from beginning to end (hence the name). This type of tool is critical to ensuring users can complete their journey from first visiting a site, to checking out and paying for a product, or any other journey you might want someone to take.&lt;/p&gt;
&lt;p&gt;End-to-end tests can often be written by the developers but the journey, and each possible outcome, need to be planned by the development team.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-you-need-to-roll-back-quickly&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When you need to roll back quickly &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-you-need-to-roll-back-quickly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Exceptions in an application that are not caused by malicious intent or load are often caused by new releases. Debugging in production isn&#39;t something you ever want to do, so once the cause has been identified it&#39;s wise to roll back to the previous release. Then the development team can continue to work on a fix without impeding the business.&lt;/p&gt;
&lt;p&gt;Tools that store each built version of an application, such as &lt;strong&gt;JFrog&#39;s Artifactory&lt;/strong&gt;, can ensure that the time to rollback is kept to the absolute minimum. When this has been configured, you don&#39;t need to rebuild the version you&#39;re rolling back to, which could take from several minutes to potentially hours.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-you-need-to-understand-what-the-problem-is&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When you need to understand what the problem is &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-you-need-to-understand-what-the-problem-is&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The development team won&#39;t be able to fix the issue unless they clearly understand the problem ... that&#39;s why it&#39;s important to implement different types of monitoring, both on the app, and separately too.&lt;/p&gt;
&lt;h3 id=&quot;application-reporting&quot; tabindex=&quot;-1&quot;&gt;Application Reporting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#application-reporting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Logging errors to the browser console is the most basic kind of application reporting, but that limits debugging to only the issue that occur on one person&#39;s machine ... what if you want to see what happened on someone else&#39;s?&lt;/p&gt;
&lt;p&gt;Tools such as &lt;strong&gt;Sentry&lt;/strong&gt;, &lt;strong&gt;LogRocket&lt;/strong&gt;, &lt;strong&gt;BugSnag&lt;/strong&gt; and a plethora of others, allow you to send errors to their platform, and from there to Slack, Email or to a telephone system.&lt;/p&gt;
&lt;p&gt;This way, whenever there is a serious error in production, the appropriate people can be notified immediately.&lt;/p&gt;
&lt;p&gt;However, some issues are not immediately obvious and require more monitoring over longer time periods.&lt;/p&gt;
&lt;h3 id=&quot;application-monitoring&quot; tabindex=&quot;-1&quot;&gt;Application Monitoring &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#application-monitoring&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tools like &lt;strong&gt;Splunk&lt;/strong&gt;, &lt;strong&gt;DataDog&lt;/strong&gt;, &lt;strong&gt;Honeycomb&lt;/strong&gt; or &lt;strong&gt;AWS X-Ray&lt;/strong&gt; allow you to log other useful data so that you can closely monitor the activity of your application or distributed systems.&lt;/p&gt;
&lt;p&gt;A word of caution: it&#39;s important to be careful that no personal data is being logged without users being informed and consent obtained.&lt;/p&gt;
&lt;p&gt;Knowing what needs to be logged and what doesn&#39;t takes time to discover: be prepared to keep adapting your strategy until you log useful data ... and &lt;em&gt;only&lt;/em&gt; the useful data!&lt;/p&gt;
&lt;h3 id=&quot;health-reporting&quot; tabindex=&quot;-1&quot;&gt;Health reporting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#health-reporting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Of course, if your site is throwing a server error (HTTP 500 code), no amount of in-app logging is going to inform you of that: your web app is down! For that reason, external services can help monitor the health of your app, and inform you when something happens.&lt;/p&gt;
&lt;p&gt;One of the most basic of these is Uptime Monitor, which pings a site at regular intervals. There are more sophisticated tools like &lt;strong&gt;AWS Cloudwatch&lt;/strong&gt;, &lt;strong&gt;Pingdom&lt;/strong&gt;, &lt;strong&gt;Retrace&lt;/strong&gt; and others which allow you to analyse your site in real time and send out alerts to your team.&lt;/p&gt;
&lt;p&gt;Some also take the view that automated QA tests should run in production too, so that you can fully grasp the state of the production app. This is really helpful especially if you can&#39;t replicate your testing environment identically like your production environment. But we need to be careful: if we have a monolithic app, the extra load created by the automated tests could cause crashes at peak times. If it&#39;s a serverless app, you could find you&#39;ve incurred extra costs for runtime.&lt;/p&gt;
&lt;h2 id=&quot;situation:-when-you&#39;re-under-attack&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Situation:&lt;/strong&gt; When you&#39;re under attack &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#situation:-when-you&#39;re-under-attack&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This kind of issue is out of scope for this article, but I feel it&#39;s worth mentioning a valuable resource that has become &lt;em&gt;the&lt;/em&gt; go-to handbook for modern DevOps teams, and is highly valued for its insights into the way Google manages applications at vast scale: the &lt;strong&gt;Site Reliability Handbook&lt;/strong&gt;, published by O&#39;Reilly Media. It&#39;s available to read online here: &lt;a href=&quot;https://landing.google.com/sre/sre-book/toc/index.html&quot;&gt;https://landing.google.com/sre/sre-book/toc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;supplementary-info:-how-to-manage-incidents&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Supplementary info:&lt;/strong&gt; How to Manage Incidents &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#supplementary-info:-how-to-manage-incidents&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite everyone&#39;s best efforts, failures in production will occur. There are strategies and tools to help reduce the downtime and get your services back up and running more quickly:&lt;/p&gt;
&lt;h3 id=&quot;step-1.-define-a-severity-level&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Define a severity level &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#step-1.-define-a-severity-level&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When an incident occurs, it&#39;s everyone&#39;s first priority to get things working again. However, defining different levels of severity helps everyone understand the impact it&#39;s having on customers and the organisation: some incidents will naturally have higher impact than others; some will have no immediate impact but could still require an incident level response.&lt;/p&gt;
&lt;h3 id=&quot;step-2.-delegate-and-manage-communication&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Delegate and manage communication &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#step-2.-delegate-and-manage-communication&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having a dedicated incident management team is invaluable when there are issues in production. Otherwise, someone should be assigned to keep stakeholders and other interested parties up to date with what&#39;s happening. Splitting this responsibility away frees the developers to focus on fixing the problem and informs other developers who are not involved to stop them from jumping in with well-meaning patches — patches that could make the situation worse.&lt;/p&gt;
&lt;h3 id=&quot;step-3.-arrange-post-mortem-meetings&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Arrange post mortem meetings &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#step-3.-arrange-post-mortem-meetings&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once a situation has been resolved, post mortem meetings can be very helpful to identify what the problem was and put things in place to avoid a similar issue from arising again. Such meetings aren&#39;t focused on blame; rather they should be about understanding the problem and how to avoid it happening in future.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;boxout&quot;&gt;
&lt;h2 id=&quot;supplementary-info:-a-word-about-code-reviews&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Supplementary info:&lt;/strong&gt; A word about code reviews &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#supplementary-info:-a-word-about-code-reviews&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the best ways of catching a range of potential issues early on in the development process is by the use of effective code reviews. Having two or more developers that are familiar with a codebase and that use it regularly review each other&#39;s code means it&#39;s going to reflect a more well-thought out and well-structured project. Good code reviews can also point out flaws in logic and gaps in tests that might easily slip through without notice if there was just one developer looking after a project.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tools-production-ready-code/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The web is still a new frontier, the boundaries of which we may never fully define. Its great strength is in diversity and potential to be used in a variety of ways: from just one individual to a small family unit; for a community or enterprise, to a tool for the betterment of humankind.&lt;/p&gt;
&lt;p&gt;But with great power comes great responsibility. I hope some of the strategies we&#39;ve looked at, and the tools to mitigate them, help your organisation to provide stable, predictable production-ready code in the face of ever-changing challenges of the expanding, mutating and growing world wide web.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Three UI Component Conundrums</title>
    <link href="https://example.com/posts/three-ui-component-conundrums/"/>
    <updated>2020-10-30T14:21:21Z</updated>
    <id>https://example.com/posts/three-ui-component-conundrums/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;React combined with Styled Components is a flexible and maintainable way of composing reusable user interfaces for the web. However, every set of tools has as well as awesome features, a few tricky problems to solve. Here are three that I&#39;ve come across recently.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;some-conundrums&quot; tabindex=&quot;-1&quot;&gt;Some conundrums &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#some-conundrums&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-css-inheritance:-the-conundrum&quot; tabindex=&quot;-1&quot;&gt;1. CSS inheritance: The conundrum &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#1.-css-inheritance:-the-conundrum&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first issue concerns encapsulation. Broadly speaking, the main differing opinions on this argue that the results of your functions should be bound to that function only, and not have any effect on anything outside that variable (this is &lt;em&gt;encapsulation&lt;/em&gt;), versus the idea that it&#39;s OK for things to &lt;em&gt;inherit&lt;/em&gt;, or to have an effect that carries on across multiple functions.&lt;/p&gt;
&lt;p&gt;I&#39;m weighing into this discussion on a different level to most. In this post, I&#39;m not talking about encapsulation and inheritance as it pertains to object-oriented programming, although the principles are the same. I&#39;m chiefly interested in UI components, and here I&#39;m going to talk about these principles and how they&#39;ve impacted my recent work.&lt;/p&gt;
&lt;p&gt;The basic tenet of CSS assumes inheritance. It&#39;s in the name: &lt;em&gt;Cascading&lt;/em&gt; Style Sheets. If you started your web development career from this angle, then you&#39;re probably quite used to seeing things like:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;div.banner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;div&lt;/code&gt; with the class &lt;code&gt;banner&lt;/code&gt; will &lt;em&gt;inherit&lt;/em&gt; the &lt;code&gt;background-color&lt;/code&gt; from the first &lt;code&gt;div&lt;/code&gt;. This is a normal way of writing CSS ... &lt;em&gt;if&lt;/em&gt; you&#39;ve had a certain type of introduction to CSS.&lt;/p&gt;
&lt;p&gt;At work, I&#39;m using an internal library of components written in Styled Components. This has some really distinct advantages: it&#39;s very simple for developers to keep within the brand guidelines, and even very basic elements are &lt;em&gt;encapsulated&lt;/em&gt;, that is, they can be composed together without any unexpected side effects.&lt;/p&gt;
&lt;p&gt;But this has also led us into some complications... here&#39;s the conundrum and solution for two of them:&lt;/p&gt;
&lt;p&gt;Here&#39;s a real-world example in React using the CSS-in-JS library Styled Components:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// declared in an external library&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    color: lightblue;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// declared in an external library&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SCard&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;SCard&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// my override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SCard &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Card&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    p {&lt;br /&gt;        color: green;&lt;br /&gt;    }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, no inheritance will occur, because the style applied directly to &lt;code&gt;&amp;lt;Text/&amp;gt;&lt;/code&gt; has higher priority than the &lt;code&gt;color&lt;/code&gt; declaration on &lt;code&gt;&amp;lt;SCard/&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, how do I make the text in &lt;code&gt;&amp;lt;SCard/&amp;gt;&lt;/code&gt; the colour I need it to be? At this point, I have to either set the API of the &lt;code&gt;&amp;lt;Text/&amp;gt;&lt;/code&gt; component to recieve a &lt;code&gt;color&lt;/code&gt; property (if you have access to that, which I didn&#39;t), or override the colour in &lt;code&gt;&amp;lt;SCard/&amp;gt;&lt;/code&gt; using an &lt;code&gt;!important&lt;/code&gt; declaration.&lt;/p&gt;
&lt;h3 id=&quot;1:-css-inheritance:-the-solution&quot; tabindex=&quot;-1&quot;&gt;1: CSS inheritance: The solution &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#1:-css-inheritance:-the-solution&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this instance, our solution was to change the API of &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt; so that by default the colour was &lt;code&gt;inherit&lt;/code&gt;. This made it possible for both approaches: inheritance where necessary using CSS, or by adding a colour directly to the Text component using it&#39;s &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;
&lt;h3 id=&quot;2:-large-pages:-the-conundrum&quot; tabindex=&quot;-1&quot;&gt;2: Large pages: the conundrum &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#2:-large-pages:-the-conundrum&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;m not sure what the average number of DOM elements on a page is. We have some pages that have a lot of elements, around 1,100. Just about every element is a separate &lt;code&gt;React.Component&lt;/code&gt;, and due to design variation, we extend a lot of them in a similar way to this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Card &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;component-library&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SCard &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Card&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  background: lightblue;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems to wrap the component in a &lt;code&gt;React.Context&lt;/code&gt; that serves to keep track of the original component ... after all, if the &lt;em&gt;original&lt;/em&gt; component changes, how will we know to update this extended component?&lt;/p&gt;
&lt;p&gt;On the pages where there are a lot of these extended components, we are seeing a significant drop in performance. I&#39;m assuming it&#39;s because of the extra dependencies involved (1. the original component, 2. the &lt;code&gt;React.Context&lt;/code&gt; wrapper, 3. the new component).&lt;/p&gt;
&lt;h3 id=&quot;2:-large-pages:-the-solution(s)&quot; tabindex=&quot;-1&quot;&gt;2: Large pages: the solution(s) &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#2:-large-pages:-the-solution(s)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We haven&#39;t solved this yet, but I found it particularly interesting that there was a significant drop in performance, proving to be a noticeable factor in how many conversions we see from those pages when compared to a previous iteration of the application.&lt;/p&gt;
&lt;p&gt;I can think of a few options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Switch to a css-in-js solution with lower (or zero) runtime, like Linaria&lt;/li&gt;
&lt;li&gt;Keep Styled Components but export CSS strings alongside the components so that we can extend them using CSS only (in most, the components&#39; APIs don&#39;t change significantly)&lt;/li&gt;
&lt;li&gt;Rationalise the design so that it uses styles that already exist in the library&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What would you choose?&lt;/p&gt;
&lt;h3 id=&quot;3:-markdown-content:-the-conundrum&quot; tabindex=&quot;-1&quot;&gt;3: Markdown content: the conundrum &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#3:-markdown-content:-the-conundrum&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one is related to the above, but we are also using these components in Markdown content we pull in from our CMS. So for each &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag that&#39;s generated from the Markdown, we use our libraries&#39; &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;This hasn&#39;t been an issue yet, but I can see one day we&#39;re going to have an extremely long page of content that uses many elements that also impacts page performance.&lt;/p&gt;
&lt;h3 id=&quot;3:-markdown-content:-the-possible-solution(s)&quot; tabindex=&quot;-1&quot;&gt;3: Markdown content: the possible solution(s) &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#3:-markdown-content:-the-possible-solution(s)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We&#39;re probably going to have to use one of the 3 solutions in the previous conundrum to solve this one too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/three-ui-component-conundrums/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have tremendous confidence in css-in-js, and believe if you&#39;re using React, Styled Components is a great, broadly performant solution that gets most people where they need to be.&lt;/p&gt;
&lt;p&gt;However, it has to be noted that there is a runtime overhead that increases with every component you extend.&lt;/p&gt;
&lt;p&gt;I am interested to see if there&#39;s a way of compiling all components at build time and avoiding that &lt;code&gt;React.Context&lt;/code&gt; link, since in our case we don&#39;t expect the original components to change after that.&lt;/p&gt;
&lt;p&gt;And I&#39;m interested to see whether other solutions, like Linaria, can provide a solution we can utilise in the future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The JavaScript CMS Landscape</title>
    <link href="https://example.com/posts/javascript-cms-landscape/"/>
    <updated>2020-11-23T14:21:21Z</updated>
    <id>https://example.com/posts/javascript-cms-landscape/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve been keenly interested in a specific subset of CMSes since about 2 years ago, when it became clear that Zopa would soon need to invest in one, and that I would be involved in choosing something that would be a good fit for the company. This post is a roundup of some of the great products available, and is the result of some of the research and proofs-of-concept I have made.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The requirements I had for my search were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has to be self-hosted, open source, so we can secure our perimeter&lt;/li&gt;
&lt;li&gt;Needs to be maintainable by an internal team of JavaScript developers&lt;/li&gt;
&lt;li&gt;Needs to be headless (in order to render the frontend in an existing JavaScript application)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had a separate search for a hosted platform-as-a-service which I executed in parallel, but my personal interest is more towards the open source community, hence the focus of this blog post.&lt;/p&gt;
&lt;h2 id=&quot;1.-ghost&quot; tabindex=&quot;-1&quot;&gt;1. Ghost &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#1.-ghost&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ghost seems like the grandaddy of JavaScript CMSes. Their version 3, which was launched about a year ago, was fully API-enabled, allowing it to be used as a headless CMS.&lt;/p&gt;
&lt;p&gt;Ghost was built out of dissatisfaction with the WordPress technology stagnation if I remember correctly, but it&#39;s grown far past that to become a slick, comfortable and beautiful interface for building simple blogs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Wonderful editing experience&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; Not very extendable in terms of custom fields and content types&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://ghost.org/&quot;&gt;https://ghost.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2.-strapi&quot; tabindex=&quot;-1&quot;&gt;2. Strapi &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#2.-strapi&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve watched Strapi go from an early Alpha state to a mature product with an international team, and that&#39;s been very rewarding to see. The UI is really great with a lot of integrations, and they&#39;re constantly working on new plugins and features that enrich your experience.&lt;/p&gt;
&lt;p&gt;I was particularly pleased that they continue to improve on their Gatsby integrations, but there&#39;s one thing that I hope they&#39;re able to resolve in the short term: transforming data in their Gatsby examples is done on the frontend, when it can be done in the Node process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Very adaptable and customizable&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; You only get 3 roles on the free tier (unless your OSS or a student), their GatsbyJS examples don&#39;t demonstrate how to transform data on the server&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://strapi.io/&quot;&gt;https://strapi.io&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3:-webiny&quot; tabindex=&quot;-1&quot;&gt;3: Webiny &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#3:-webiny&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Webiny is a lot more than a CMS, in fact, the CMS aspect is just one of the plugins for this incredible serverless framework. And honestly, Webiny does showcase some of the fancy things that become possible with serverless, and also levels out a lot of that road for newer developers.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in serverless architecture, definitely give Webiny a look.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Serverless, so expect a lot of free hosting. A great way to learn the serverless architecture paradigm&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; Recommends use of gatsby-source-graphql plugin, which doesn&#39;t have access to nodes at build time. As a result, data transforming must be done on the frontend :-(&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://webiny.com/&quot;&gt;https://webiny.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4:-keystone&quot; tabindex=&quot;-1&quot;&gt;4: Keystone &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#4:-keystone&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I haven&#39;t spent any time with Keystone, but Wes Bos hails it&#39;s solid role-based access and easy deployment features. I&#39;ll update this post when I&#39;ve had a chance to play with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Role based access, easy deployment&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; // TODO: try this app and update this blog post&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://www.keystonejs.com/&quot;&gt;https://www.keystonejs.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5.-apostrophe&quot; tabindex=&quot;-1&quot;&gt;5. Apostrophe &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#5.-apostrophe&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apostrophe only just fits onto this list because it&#39;s a full-stack CMS with a Headless plugin ... which is just fine, but it&#39;s an interesting choice. The presence of plugins like this one gives me confidence this is a mature app that has a solid future. Again, I haven&#39;t tried it out, but I will report back when I have.&lt;/p&gt;
&lt;p&gt;The marketing talks about &amp;quot;in-context editing&amp;quot;, but I&#39;m not sure this refers to headless mode or not (edit: it&#39;s not) ... if it is, this could be a killer feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; // TODO: try this app and update this blog post&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; // TODO: try this app and update this blog post&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://apostrophecms.com/&quot;&gt;https://apostrophecms.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6.-payload&quot; tabindex=&quot;-1&quot;&gt;6. Payload &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#6.-payload&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I heard about this newcomer on the scene only a few days ago, but the value proposition made sense to me. The UI is very minimal, on the basis that you&#39;ll want to customize it significantly. Their strongest feature is that there are hooks for every action, so you can extend the functionality very easily, and the initial codebase you see is &lt;em&gt;extremely&lt;/em&gt; minimal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; // TODO: try this app and update this blog post&lt;br /&gt;
&lt;strong&gt;Cons:&lt;/strong&gt; // TODO: try this app and update this blog post&lt;br /&gt;
&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://payloadcms.com/&quot;&gt;https://payloadcms.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/javascript-cms-landscape/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript, particularly on the server, is still a new language, but it&#39;s incredible that we have so much variety in tooling available to us already.&lt;/p&gt;
&lt;p&gt;I&#39;ve been keenly interested in how the CMS market has developed: I was initially afraid that hosted platforms would gobble up all of the market share and there would be no room left for open-source options. I&#39;m glad to say this hasn&#39;t happened, and we have the freedom to choose between hosted platforms and these more maintenance-heavy but intrinsically open apps.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2020 Review / 2021 Aims</title>
    <link href="https://example.com/posts/2020-review-2021-aims/"/>
    <updated>2020-12-04T14:21:21Z</updated>
    <id>https://example.com/posts/2020-review-2021-aims/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;2020 has been ... a lot. But I&#39;ve also learned a ton of stuff. Though I can&#39;t ever say I know enough of anything, my objectives for 2021 are going to be quite different from previous years...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve definitely not been the smartest person in the room over the last year. I&#39;ve worked with some incredible people, such as David Hewitt, David Fernandez, Romina Moya, Kate Beavis, Gerard Blanes, and many other great folk who have been good enough to explain stuff, pair code with me, and bear with my failures.&lt;/p&gt;
&lt;h2 id=&quot;what-i-set-out-to-achieve-this-year&quot; tabindex=&quot;-1&quot;&gt;What I set out to achieve this year &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#what-i-set-out-to-achieve-this-year&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-bash-scripting&quot; tabindex=&quot;-1&quot;&gt;1. Bash scripting &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#1.-bash-scripting&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Erm, didn&#39;t really get to this a huge amount. Though I&#39;m less concerned with remembering the syntax of specific languages these days (more about that later...)&lt;/p&gt;
&lt;h3 id=&quot;2.-continue-getting-to-grips-with-kubernetes&quot; tabindex=&quot;-1&quot;&gt;2. Continue getting to grips with Kubernetes &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#2.-continue-getting-to-grips-with-kubernetes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh wow ... I can&#39;t believe I added this lol. I spent only as much time with K8s this year as I had to. I know it&#39;s got it&#39;s value but the point of an abstraction is generally so you don&#39;t have to worry about it unless something goes wrong. Nothing has gone horribly wrong with our Kubernetes instances this year.&lt;/p&gt;
&lt;h3 id=&quot;3.-serverless!&quot; tabindex=&quot;-1&quot;&gt;3. Serverless! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#3.-serverless!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Serverless still really makes sense to me. I spend a bit of time during furlough following along with &lt;a href=&quot;https://serverless-stack.com/&quot;&gt;Seed&#39;s excellent tutorial at serverless-stack&lt;/a&gt;, and messing around with the serverless application framework &lt;a href=&quot;https://webiny.com/&quot;&gt;Webiny&lt;/a&gt;, which were great eye openers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;I&#39;d love to think that by the end of 2020 I will be able to write a Terraform script and get a system comprised of a few key pieces not only up and running but fully deployed, monitored and testable too.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ha ha ... nope. Not that bothered by Terraform any more. It&#39;s a good enterprise system that I&#39;d gladly pick up if my job required it ... but if not, I&#39;m sticking with the Serverless framework. As with Kubernetes, it has more abstractions but less to have to worry about yourself.&lt;/p&gt;
&lt;h3 id=&quot;4.-writing&quot; tabindex=&quot;-1&quot;&gt;4. Writing &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#4.-writing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ah you know, that didn&#39;t go at all the way I&#39;d hoped! Netmag folded just when I&#39;d finished writing my first feature article for them. How sad for everyone who worked there. I&#39;m still scoping out how I might be able to continue writing, but haven&#39;t figured anything out yet.&lt;/p&gt;
&lt;h2 id=&quot;what-i-want-to-achieve-this-year&quot; tabindex=&quot;-1&quot;&gt;What I Want to Achieve This Year &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#what-i-want-to-achieve-this-year&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I mentioned near the start of this post, my journey this year has involved less about deepening my understanding of tools, and more about the &lt;em&gt;core&lt;/em&gt; skills of a software engineer. So that&#39;s what I&#39;m aiming for primarily this year.&lt;/p&gt;
&lt;h3 id=&quot;advocacy-and-mentoring&quot; tabindex=&quot;-1&quot;&gt;Advocacy and mentoring &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#advocacy-and-mentoring&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I already really enjoy advocating for others, so my role leading Zopa&#39;s Frontend Guild will continue. I hope that I can chair the group fairly and focus on the needs of our most junior and least outspoken members.&lt;/p&gt;
&lt;p&gt;Next year will also bring a new opportunity to help someone grow their career, and I relish the opportunity to be involved in that.&lt;/p&gt;
&lt;h3 id=&quot;follow-through&quot; tabindex=&quot;-1&quot;&gt;Follow through &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#follow-through&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One piece of feedback I received this year was that I should pursue issues that arise with third parties and other internal teams, instead of waiting for others to ask me what the next steps could be.&lt;/p&gt;
&lt;p&gt;If there&#39;s an issue I should pick it up and progress it as far as I can on my own, not leaning on others in the team to do so. Although, keeping them informed about what&#39;s happening and allowing them visibility over key events and decisions is a necessity.&lt;/p&gt;
&lt;h3 id=&quot;stand-up-for-whats-right&quot; tabindex=&quot;-1&quot;&gt;Stand up for whats right &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#stand-up-for-whats-right&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;During a few exercised I wasn&#39;t able to explain clearly why my preferred approach should be adopted, over another approach that was favoured by someone who wasn&#39;t as experienced as I.&lt;/p&gt;
&lt;p&gt;I found that I struggled to make a case why it was better. If I&#39;d been more insistent I think I would have been able to politely convince the other person why my approach was the best.&lt;/p&gt;
&lt;p&gt;I still need to introspect about this a little, hopefully I can find out why I do that!&lt;/p&gt;
&lt;h3 id=&quot;not-giving-up&quot; tabindex=&quot;-1&quot;&gt;Not giving up &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#not-giving-up&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I recently paired with David on a project where we were both unfamiliar with the codebase. What impressed me is that David didn&#39;t give up, he kept pursuing different avenues to figure out what the code did and how it worked.&lt;/p&gt;
&lt;p&gt;This persistence ultimately led to us refactoring the code to achieve our objective instead of reaching out to colleagues who would have been able to help.&lt;/p&gt;
&lt;p&gt;The tricks he used to progress through the code were ones I use often, but on an unfamiliar codebase I would more than likely reach out to others earlier instead of applying those skills in this setting. I&#39;m going to try to change that perspective and persist with puzzles that I&#39;m not familiar with.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2020-review-2021-aims/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A lot of these items are here because I want to become a Senior developer, and a lot of that isn&#39;t about code but about other skills which you need to exercise.&lt;/p&gt;
&lt;p&gt;There&#39;s a lot of churn in our industry, and I&#39;m still really keen to learn things like Svelte, spend more time with Webiny, and more with fullstack apps (instead of static frontends). However that&#39;s proved to be really difficult due to the time my children need from me at this stage in their lives.&lt;/p&gt;
&lt;p&gt;However, progressing within Zopa is something I&#39;d really like to achieve. It&#39;s still a great place to work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>4 things that I learned from counselling training</title>
    <link href="https://example.com/posts/4-things-learned-from-counselling-training/"/>
    <updated>2021-01-02T14:21:21Z</updated>
    <id>https://example.com/posts/4-things-learned-from-counselling-training/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Most of us have moments in life where we question ourselves, often forced into being by some personal crisis or difficult situation. During one of these I enrolled on a course to learn Counselling, a form of Cognitive Behavioural therapy that is popular in the NHS and privately in the UK. I studied for about two years, and afterwards took a course in abnormal psychology. Even though I never qualified to become a counsellor, it&#39;s one skill I use often, even in web development.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the main takeaways I gleaned from my course:&lt;/p&gt;
&lt;h2 id=&quot;1.-drink-more-water&quot; tabindex=&quot;-1&quot;&gt;1. Drink more water &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/4-things-learned-from-counselling-training/#1.-drink-more-water&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It amazed me how much of our psychology changes with our eating and drinking habits. I&#39;m not talking about drugs or stimulants here: my tutor noted that we often compensate for tiredness by drinking coffee, however a good glass of water would often have a much bigger impact.&lt;/p&gt;
&lt;p&gt;Similarly with getting sufficient sleep: if we get 7.5 hours or less, our thinking is impaired. The less we sleep, the more irrational our thinking becomes. I realized the truth of this statement most clearly one occasion when I hadn&#39;t slept for three nights, drove my car, and crashed it into a truck.&lt;/p&gt;
&lt;p&gt;If you&#39;re having an issue with some code, take a break. Have a nap. Drink some more water. It amazes me at how often this helps me to solve coding problems.&lt;/p&gt;
&lt;h2 id=&quot;2.-everyone-has-different-perspectives&quot; tabindex=&quot;-1&quot;&gt;2. Everyone has different perspectives &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/4-things-learned-from-counselling-training/#2.-everyone-has-different-perspectives&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You&#39;re on the way to a close friend or family members&#39; wedding, driving down the motorway, and running late. You see a puppy on the side of the road, in distress, clearly malnourished.&lt;/p&gt;
&lt;p&gt;What would you do?&lt;/p&gt;
&lt;p&gt;Some people would drive past: taking care of the dog would make them late for the wedding; something they&#39;ve been planning for a while. Others wouldn&#39;t hesitate to stop to help the stranded animal. In fact, they might only attend the wedding once the dog has been safely cared for, no matter the time that might take.&lt;/p&gt;
&lt;p&gt;Everyone has a reason for what they do; and these perspectives often drive our decisions. The person who stopped to pick up the dog wasn&#39;t being inconsiderate to their friend who was getting married; they simply judged that another had a greater need at that moment.&lt;/p&gt;
&lt;p&gt;Conversely, the person who ignored the dog wasn&#39;t being heartless: they merely have different drivers for their decisions.&lt;/p&gt;
&lt;p&gt;Some people have a preference to write with the right-hand, others the left. We&#39;re all inherently have these preferences for our personalities too. We can train ourselves another way, like a left-handed person can train themselves to write with the right hand, but our overriding preference doesn&#39;t really go away.&lt;/p&gt;
&lt;p&gt;This taught me that we should respect others&#39; choices, and stop judging them, they have good reasons for making their decisions. They are also &lt;em&gt;their&lt;/em&gt; decisions, not ours.&lt;/p&gt;
&lt;p&gt;We should take into consideration these perspectives when we&#39;re writing software. We should also be writing software with other people - not necessarily developers, but other people invested in the outcome. Because if you&#39;re writing software in isolation, how can you take into consideration other people&#39;s ways of thinking, or even be aware of things like their skin colour or facial features? What about their physical or cognitive disabilities?&lt;/p&gt;
&lt;h2 id=&quot;3.-psychology-theory-is-just-theory&quot; tabindex=&quot;-1&quot;&gt;3. Psychology theory is just theory &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/4-things-learned-from-counselling-training/#3.-psychology-theory-is-just-theory&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the most famous psychologists, Sigmund Freud, was obsessed by evolution, and therefore the base instincts a person has. This led to some pretty interesting ideas about the activity of the subconscious, but also some pretty horrific viewpoints on racism.&lt;/p&gt;
&lt;p&gt;Carl Jung was a natural successor, and I often think of him as ... kinder ... to human nature. He&#39;s the one who came up with cognitive behavioural theory (CBT), that a person can change if they have enough awareness and motivation.&lt;/p&gt;
&lt;p&gt;Isabel Briggs-Myers and her mother Katherine Cook-Briggs subsequently came up with the Myers-Briggs Type Indicator (MBTI), which suggests there are four differentiators (like a preference for writing with the left-hand or right) that combine to form a persons&#39; personality. They tested loads of people on this, and quite often the results were a remarkably good fit. Their ideas form the basis for a lot of personality tests you see today. However, because nobody knows what is really going on in our heads, it&#39;s still just a theory. We can&#39;t say it&#39;ll fit every individual. For example, by suggesting a person has certain personality traits, are they more prone to adapting to show those traits? Or to not show them over time? I&#39;ve taken the same MBTI test with a 10 year gap. My personality type the second time was significantly different to the first.&lt;/p&gt;
&lt;p&gt;As developers, we can be tempted to strictly categorise and compartmentalise everything - specifically people, but other things too. But these will ultimately break down and become less relevant. Sometimes you just have to go with what works.&lt;/p&gt;
&lt;h2 id=&quot;4.-just-listen&quot; tabindex=&quot;-1&quot;&gt;4. Just listen &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/4-things-learned-from-counselling-training/#4.-just-listen&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the time, the most powerful thing you can do to help someone is to listen to them. As much as it gets repeated on social media, memes and other places, actually, really, attentively listening to someone is a skill we often lack.&lt;/p&gt;
&lt;p&gt;The main thing that gets in the way is ego: we strongly desire to share our experiences, our solutions, to validate ourselves, or to compete with another person.&lt;/p&gt;
&lt;p&gt;But once we let that go, instead focusing on the needs of the other person, we put ourselves in a place to really help them.&lt;/p&gt;
&lt;p&gt;What I mean by &lt;em&gt;really&lt;/em&gt; listening is &lt;em&gt;active&lt;/em&gt; listening: hearing what they say and then validating it, either by reflecting it back to them (using different words to say what they just said), or asking pertinent questions. If you didn&#39;t understand what someone said, don&#39;t be afraid to ask them, &amp;quot;what did you mean by that?&amp;quot;, or check your understanding by reflecting back and welcoming their explanations.&lt;/p&gt;
&lt;p&gt;This can help us in many aspects of web development: at the planning stage when a feature is being explained to us, when listening to feedback on a feature we&#39;ve just written, or when doing user interaction research with customers.&lt;/p&gt;
&lt;h2 id=&quot;how-does-any-of-this-help-me-in-my-web-development-career&quot; tabindex=&quot;-1&quot;&gt;How does any of this help me in my web development career? &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/4-things-learned-from-counselling-training/#how-does-any-of-this-help-me-in-my-web-development-career&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some people take up software engineering to get away from people. However, if you&#39;re tempted to do that I think you&#39;d probably be disappointed. We primarily engineer software to help people, and people are intrinsically involved in deciding what we build, and how we build it.&lt;/p&gt;
&lt;p&gt;Also, every day we interact with our team mates, and other colleagues. One day, they&#39;re going to experience a crisis and will need our support. I consider it part of my job to be there for them when they do.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Automated accessibility testing is great, but ...</title>
    <link href="https://example.com/posts/automated-accessibility-testing-is-great-but/"/>
    <updated>2021-01-20T14:21:21Z</updated>
    <id>https://example.com/posts/automated-accessibility-testing-is-great-but/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;We recently had a situation using jest-axe in tests, where the landmarks feature wasn&#39;t work as expected. This helped me verify why we shouldn&#39;t rely solely on automated tools, never mind how good they are.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In unit tests for our &lt;a href=&quot;https://github.com/zopaUK/react-components&quot;&gt;react component library&lt;/a&gt; at Zopa, we have utilised &lt;a href=&quot;https://github.com/nickcolley/jest-axe&quot;&gt;jest-axe&lt;/a&gt; to test whether our components adhere to a number of accessibility rules.&lt;/p&gt;
&lt;p&gt;The funny thing was, when we adhered to the rules (specifically the way components either use semantic HTML or aria roles), further testing in &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Google&#39;s Lighthouse tool&lt;/a&gt; revealed that there were accessibility issues with our components:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Some ARIA child roles must be contained by specific parent roles to properly perform their intended accessibility functions.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The trouble is that our library contains a lot of components that do not require the use of landmarks. We build our UI pages up from these component pieces, and would utilise landmarks &lt;em&gt;on the page&lt;/em&gt; typically.&lt;/p&gt;
&lt;p&gt;This rule was forcing our developers to add aria &lt;code&gt;role&lt;/code&gt;s where they weren&#39;t needed.&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;a href=&quot;https://github.com/nickcolley/jest-axe/issues/92&quot;&gt;You can disable this rule&lt;/a&gt;. However, this means that there are far less checks for semantic HTML in our codebase.&lt;/p&gt;
&lt;p&gt;I don&#39;t think this kind of issue is something that&#39;s easily solved by the axe team. It does highlight the flaws in tools like jest-axe: we can&#39;t rely solely on them. In fact, right on the Github repo the team identify clearly (in large writing!) that &amp;quot; This project does not guarantee what you build is accessible&amp;quot;, and that &amp;quot;The GDS Accessibility team found that only ~30% of issues are found by automated testing.&amp;quot;&lt;/p&gt;
&lt;p&gt;We ultimately decided that ~30% is better than nothing. And &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; soup, whilst undesirable, is better than using &lt;code&gt;role&lt;/code&gt;s where they&#39;re misleading. So we disabled this rule and we&#39;re going to continue to use jest-axe in our project.&lt;/p&gt;
&lt;h2 id=&quot;other-ways-forward&quot; tabindex=&quot;-1&quot;&gt;Other ways forward &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/automated-accessibility-testing-is-great-but/#other-ways-forward&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To try to keep our focus on giving all of our users the best experience possible, we have recently created the role of &amp;quot;feature champions&amp;quot; among the frontend community.&lt;/p&gt;
&lt;p&gt;These individuals take on a subject that they are passionate about, such as TypeScript, unit testing and, yes, accessibility too, and will occasionally give a quick eye to projects to kindly advise whether we are following best practices.&lt;/p&gt;
&lt;p&gt;So much more is needed. Each of us needs to continue to develop empathy for our customers and visitors. And we need to avoid trusting the tools we use for accessibility: they don&#39;t always get everything right.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Talk: accessibility and you</title>
    <link href="https://example.com/posts/talk-accessibility-you/"/>
    <updated>2021-01-26T14:21:21Z</updated>
    <id>https://example.com/posts/talk-accessibility-you/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Over a year ago I was invited to give a talk at London dev meetup JS Roundabout on the subject of accessibility. I recently discovered the talk has been put online ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was honoured to present this talk at JS Roundabout, who specifically contacted me on the back of some of my articles about accessibility, especially in the React space.&lt;/p&gt;
&lt;div class=&quot;responsive-iframe-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XdiIOd6wgMg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;I don&#39;t know about you but I always look back on myself with a critical eye. I talk too fast. I stutter sometimes and lose the thread. But my aim was to motivate and generate enthusiasm, and I think I achieved that. I &lt;em&gt;hope&lt;/em&gt; I achieved that.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Predictions for GatsbyConf 2021</title>
    <link href="https://example.com/posts/gatsbyjs-predictions-2021/"/>
    <updated>2021-02-19T00:21:21Z</updated>
    <id>https://example.com/posts/gatsbyjs-predictions-2021/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;It&#39;s no secret that NextJS is knocked the socks off Gatsby last year in terms of developer adoption. I think the frameworks will keep learning from each other (read: steal features), and it&#39;s a good thing for both frameworks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dustin Schau &lt;a href=&quot;https://twitter.com/schaudustin/status/1362223485523648512?s=21&quot;&gt;asked in this tweet&lt;/a&gt;, &amp;quot;What do &lt;em&gt;you&lt;/em&gt; think we&#39;re launching at #GatsbyConf on March 2nd?&amp;quot;&lt;/p&gt;
&lt;p&gt;Here&#39;s my take on what could be announced at Gatsby&#39;s forthcoming conference.&lt;/p&gt;
&lt;h2 id=&quot;1.-hosting-on-gatsby-cloud&quot; tabindex=&quot;-1&quot;&gt;1. Hosting on Gatsby Cloud &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/gatsbyjs-predictions-2021/#1.-hosting-on-gatsby-cloud&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using Gatsby Cloud as part of a preview environment has been a great innovation, especially the work that has gone into the speed and ease of incremental builds.&lt;/p&gt;
&lt;p&gt;Building out this existing functionality into a fully-fledged hosting platform to compete with the likes of Vercel and Netlify makes sense, especially if deploys benefit from that same speed.&lt;/p&gt;
&lt;h2 id=&quot;2.-server-functions&quot; tabindex=&quot;-1&quot;&gt;2. Server functions &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/gatsbyjs-predictions-2021/#2.-server-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the reasons many developers love NextJs is that it isn&#39;t restricted to being exported as a static site. Vercel, Netlify and AWS Amplify and some other platforms allow you to run serverless functions which complement the application, so that you don&#39;t have to render all of your content on build, instead when a page is requested for the first time, it can be generated then.&lt;/p&gt;
&lt;p&gt;Allowing this isomorphic approach is definitely on Gatsby&#39;s radar, and it would really be good to see it a first class citizen on &lt;a href=&quot;https://www.gatsbyjs.com/cloud/&quot;&gt;Gatsby Cloud&lt;/a&gt;, their hosting platform that will compete with Vercel, Netlify, and all the other offerings that have sprung up in the last year or two.&lt;/p&gt;
&lt;p&gt;This will probably mean those platforms will have to do some work to ensure they are compatible with this new way of using Gatsby, so expect a bit of a delay before they are able to use this new version of Gatsby.&lt;/p&gt;
&lt;h2 id=&quot;3.-graphql-toolkit&quot; tabindex=&quot;-1&quot;&gt;3. GraphQL Toolkit &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/gatsbyjs-predictions-2021/#3.-graphql-toolkit&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of my biggest issues with Gatsby at the moment is that data from GraphQL APIs isn&#39;t able to be transformed. If you have a CMS that supplies rich text or Markdown, you have to write that transformation in the template, so it gets packaged into your bundle and transformed in the JavaScript runtime.&lt;/p&gt;
&lt;p&gt;It&#39;s a huge problem, but the &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-graphql-toolkit&quot;&gt;GraphQL Toolkit project&lt;/a&gt; looks really promising. Here&#39;s hoping it&#39;s ready to be merged in!&lt;/p&gt;
&lt;h2 id=&quot;4.-some-new-lowcode-nocode-features&quot; tabindex=&quot;-1&quot;&gt;4. Some new LowCode / NoCode features &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/gatsbyjs-predictions-2021/#4.-some-new-lowcode-nocode-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gatsby is aiming for a very different market to NextJS ... it&#39;s chief market are newer or less experienced developers who are building marketing sites for smaller organisations. WordPress proved that there&#39;s a huge volume of these and plenty of scope to facilitate a world where developers can pick a theme, add content, make some customisations, set up hosting and charge a client a fee for doing so.&lt;/p&gt;
&lt;p&gt;To what extent Gatsby wants to enter this market is anybody&#39;s guess. I&#39;m hoping they don&#39;t get too invested into it; I think it&#39;s healthy for Gatsby to still take on the NextJS market (to my mind this is more experienced developers who want a React &amp;amp; Node framework for their applications). However there&#39;s good money to be had and its doing a much better job than the current incumbent in this space.&lt;/p&gt;
&lt;p&gt;Let&#39;s wait and see what happens!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Working with styled components: multiple nested properties</title>
    <link href="https://example.com/posts/nesting-styled-components-properties/"/>
    <updated>2021-05-01T14:21:21Z</updated>
    <id>https://example.com/posts/nesting-styled-components-properties/</id>
    <content type="html">&lt;p&gt;I&#39;ve seen this fairly frequently when it comes to using shared media queries. sometimes you want to set the width of an element based on one property, but you need to access the &lt;code&gt;theme&lt;/code&gt; too.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; StyledContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;narrow&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; css&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;          @media (min-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;desktopMin&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;            max-width: 48rem;&lt;br /&gt;          }&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; css&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;          @media (min-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;desktopMin&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;            max-width: 32rem;&lt;br /&gt;          }&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could destructure them like this however it can become difficult to read, particularly the position of the closing bracket, which becomes difficult to see with the template literal syntax:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; StyledContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; narrow&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; theme &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; narrow &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; css &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;        @media (min-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;desktopMin&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;            max-width: 48rem;&lt;br /&gt;        }&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; css &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;          @media (min-width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;desktopMin&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;              max-width: 32rem;&lt;br /&gt;          }&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it could be better &lt;em&gt;not&lt;/em&gt; to destructure. You could easily start to think about what would happen when you have nested ternaries, which in my time I have spent too long trying to unpick.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Should I use ternary or the logical and operator?</title>
    <link href="https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/"/>
    <updated>2021-05-06T09:21:21Z</updated>
    <id>https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Templating with JSX in React is easy ... until it&#39;s not. Recently a colleague recommended I use the logical and operator instead of a ternary. However once we&#39;d dug into it a little, we found these operators do very different things ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quite often we follow this pattern for brevity, and there&#39;s good value doing it if there&#39;s only one variable at play:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  isLoggedIn &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SomeComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This avoids us from having to write something like&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  isLoggedIn &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SomeComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is totally redundant here, since if it&#39;s value is &lt;code&gt;false&lt;/code&gt;, it won&#39;t return the component.&lt;/p&gt;
&lt;p&gt;However, when there&#39;s a couple of things going on you might find it doing something unexpected:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesPotatoes &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;  formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesBananas &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;  formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesCake &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NotificationMessage icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alert&quot;&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        Please ensure that all the required questions have been answered before&lt;br /&gt;        proceeding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;NotificationMessage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is &lt;strong&gt;not&lt;/strong&gt; equivalent to:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesPotatoes &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;    formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesBananas &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesCake &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NotificationMessage icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alert&quot;&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          Please ensure that all the required questions have been answered&lt;br /&gt;          before proceeding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;NotificationMessage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the ternary operator (&lt;code&gt;isTrue ? dothis : dothat&lt;/code&gt;), our &lt;code&gt;&amp;lt;NotificationMessage/&amp;gt;&lt;/code&gt; will show when &lt;em&gt;any&lt;/em&gt; of the conditions are met. The logical AND (&lt;code&gt;isTrue &amp;amp;&amp;amp; dothat&lt;/code&gt;) will only show the component if &lt;em&gt;all&lt;/em&gt; of the conditions are met.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;h2 id=&quot;the-difference-between-the-logical-and-and-ternaries&quot; tabindex=&quot;-1&quot;&gt;The Difference between the logical AND and ternaries &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/#the-difference-between-the-logical-and-and-ternaries&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ternaries work similar to the &lt;code&gt;if&lt;/code&gt; operator. So it short circuits (closes off before any other variable is assessed), and returns true if any of the values are true.&lt;/p&gt;
&lt;p&gt;On the other hand, the logical AND operator returns true &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND&quot; title=&quot;MDN docs for logical and operator&quot;&gt;only if and only if all of its operands are true&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our case, when checking for form errors, we want to show a notification if &lt;em&gt;any&lt;/em&gt; of the fields have an error. So the ternary is the way to go.&lt;/p&gt;
&lt;h2 id=&quot;alternative-1:-abstract-it&quot; tabindex=&quot;-1&quot;&gt;Alternative 1: abstract it &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/#alternative-1:-abstract-it&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is another way of handling this situation where you could use the logical AND: chain those errors in a variable before &lt;code&gt;return&lt;/code&gt;ing the JSX:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hasError &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;  formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesPotatoes &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesBananas &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesCake&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;hasError &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NotificationMessage icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alert&quot;&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          Please ensure that all the required questions have been answered&lt;br /&gt;          before proceeding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;NotificationMessage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;alternative-2:-wrap-it&quot; tabindex=&quot;-1&quot;&gt;Alternative 2: Wrap it &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/#alternative-2:-wrap-it&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My friend Warrick Hill mentioned that you could also wrap the options in brackets to ensure they get evaluated together and therefore don&#39;t short circuit. This is how mathematical bracket operators work, where everything inside the brackets gets evaluated first, for example &lt;code&gt;(2 * 3) + 2 = 8&lt;/code&gt; but &lt;code&gt;2 \* (3 + 2) = 10&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesPotatoes &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;      formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesBananas &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;      formErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likesCake&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NotificationMessage icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alert&quot;&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          Please ensure that all the required questions have been answered&lt;br /&gt;          before proceeding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;NotificationMessage&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although Warrick points out that this is harder to spot than the alternative #1 above.&lt;/p&gt;
&lt;h2 id=&quot;thanks&quot; tabindex=&quot;-1&quot;&gt;Thanks &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/should-i-use-ternary-or-logicaland-in-react/#thanks&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks to Aimable N and Chris Geary (as well as Warrick) for their help with this article.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Towards better hydration</title>
    <link href="https://example.com/posts/towards-better-rehydration/"/>
    <updated>2021-05-08T14:21:21Z</updated>
    <id>https://example.com/posts/towards-better-rehydration/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I came across a tool recently that I&#39;m really excited about ... it&#39;s something that I think can solve one of the most pressing concerns in JavaScript development: rehydration.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Imagine how orange juice is transported: the water is removed to reduce the quantity, and water is added back - &amp;quot;rehydrated&amp;quot; - at the destination.&lt;/p&gt;
&lt;p&gt;A similar thing happens with a subset of modern JavaScript frameworks: they build static HTML pages (either when the application is built or on the server) send that down to the browser. Then they send and parse a JavaScript bundle that &lt;em&gt;also&lt;/em&gt; contains the layout of the page, except this one is interactive (hence &amp;quot;rehydrated&amp;quot;). It&#39;s that JavaScript generated representation of the HTML you see when you visit the site.&lt;/p&gt;
&lt;p&gt;These frameworks have really caught on because they allow for the greatest expressiveness possible without splitting concerns: they allow developers to write components instead of separate HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;But I think there is a fundamental problem with this idea that I think needs to be solved before we can scale our applications for the next generation of frontend architecture.&lt;/p&gt;
&lt;p&gt;I have just come across a tool that makes me think we&#39;re much closer to finding a suitable answer to this significant issue.&lt;/p&gt;
&lt;h2 id=&quot;the-issue&quot; tabindex=&quot;-1&quot;&gt;The issue &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/towards-better-rehydration/#the-issue&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript is inextricably tied to the other building blocks of the web: html and css. There&#39;s one single line of code that has allowed more and more control to be given to JavaScript:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#39;ve spent any time with JavaScript, you&#39;ll recognise that this is where it takes over the DOM, rendering pages in JavaScript instead of native HTML, facilitating our single page applications.&lt;/p&gt;
&lt;p&gt;But this creates a few issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nobody can see the page until the JavaScript is parsed and that version of the page renders (even if we&#39;re using static or server rendering),&lt;/li&gt;
&lt;li&gt;Bundle sizes grow larger and larger dependent on the requirements of the application, meaning that the JS pages take longer dependent on the bundle size (and therefore the complexity of the project),&lt;/li&gt;
&lt;li&gt;We also create performance issues such as time to interactive delays, or poor interactivity for people on lower-powered devices, because JavaScript runtime takes more processing power (not to mention battery energy) than plain old HTML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There have been three main ideas around how to solve this up until now:&lt;/p&gt;
&lt;h2 id=&quot;solution-1:-static-all-the-way-...&quot; tabindex=&quot;-1&quot;&gt;Solution 1: Static all the way ... &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/towards-better-rehydration/#solution-1:-static-all-the-way-...&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first answer to this problem is static-site generation: use JS to compile in the pipeline, and serve only static HTML to the browser. Certain static-site generators (like Hugo, Jekyll, Eleventy etc), excel at this.&lt;/p&gt;
&lt;p&gt;The advantage of this approach is that HTML is still the fastest and best way to serve up content.&lt;/p&gt;
&lt;p&gt;However, when you want to add any dynamic functionality, you need to load on a separate JavaScript framework, like Vue, Alpine or React. Some static site generators bundle this functionality on, some just focus on statically generating pages.&lt;/p&gt;
&lt;p&gt;I think the problem still remains: the static site and the javascript are &lt;em&gt;separate entities&lt;/em&gt;, and it could sometimes be challenging to keep them in sync.&lt;/p&gt;
&lt;h2 id=&quot;solution-2:-rehydrate-all-the-things&quot; tabindex=&quot;-1&quot;&gt;Solution 2: Rehydrate all the things &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/towards-better-rehydration/#solution-2:-rehydrate-all-the-things&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In sharp contrast to the static generators above, Next, Nuxt, Gatsby, SvelteKit and others send down HTML and then &lt;em&gt;rehydrate&lt;/em&gt; the entire page in JavaScript.&lt;/p&gt;
&lt;p&gt;This has some cool advantages, such as literally no overhead when making components dynamic or interactive, because, at the end of the day, the whole page is already rendered in JavaScript.&lt;/p&gt;
&lt;p&gt;But ... and this is a big but! ... it&#39;s expensive.&lt;/p&gt;
&lt;p&gt;Every page has both HTML and JavaScript counterparts. This means bundle sizes are larger and browsers are working harder to process JavaScript for scroll position, routing and even CSS styles.&lt;/p&gt;
&lt;h2 id=&quot;solution-3:-splitting-traffic&quot; tabindex=&quot;-1&quot;&gt;Solution 3: Splitting traffic &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/towards-better-rehydration/#solution-3:-splitting-traffic&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ve been trying to figure out how we negate these problems, because until we do, we face an impasse which prevents us from scaling our applications as we want — and from reaching broader audiences.&lt;/p&gt;
&lt;p&gt;(Remember, the next billion web users come from countries where conditions are a lot less ... guaranteed).&lt;/p&gt;
&lt;p&gt;My attempt at this idea is what I currently do on my website: I allow people the &lt;em&gt;option&lt;/em&gt; to visit a statically-rendered HTML and CSS site, or to visit a JavaScript SPA rendered with Preact.&lt;/p&gt;
&lt;p&gt;There&#39;s a variation on this one which I&#39;ve been thinking about on and off for a while: using an edge handler (such as those Cloudflare or Cloudfront provide, short running standalone functions) to split traffic (or transform websites even before they get to the viewer) based on some sort of browser preference setting. With this idea, we could route people based on one of these three settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;device has low battery&lt;/li&gt;
&lt;li&gt;device has a poor network connection&lt;/li&gt;
&lt;li&gt;user has enabled a setting preferring less JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trouble with each of these in turn is that (1) battery status can be used to track people against their wishes, (2) the state of the network isn&#39;t typically known until the site has finished downloading, and (3) this one gets awfully muddy awfully quickly: &lt;em&gt;all&lt;/em&gt; JavaScript? That would be like saying turn off the browsers&#39; ability to drop cookies: loads of services normal people use every day would be useless.&lt;/p&gt;
&lt;p&gt;So no, splitting traffic isn&#39;t a good option. It may be fine to do that on small blogs like this one, but it&#39;s not a viable option for sites when some complex functionality is required .. or even some simple functionality: my HTML-only site doesn&#39;t have animations or a search tool.&lt;/p&gt;
&lt;h2 id=&quot;a-solution&quot; tabindex=&quot;-1&quot;&gt;A solution &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/towards-better-rehydration/#a-solution&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What we need is something &lt;em&gt;in-between&lt;/em&gt; these options. Something that can build HTML statically (or on the server), and &lt;em&gt;partially rehydrate&lt;/em&gt; elements on the client where that is needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/partial-rehydration.png&quot; alt=&quot;Partial rehydration demonstrated&quot; title=&quot;a mostly HTML web page with interactive elements in the header and carousel using JavaScript&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This isn&#39;t a new idea. The core React team were hoping that concurrent mode would allow you to do this. However, building up a DOM tree is pretty difficult to achieve asynchronously.&lt;/p&gt;
&lt;p&gt;Massive steps towards this idea have been made by NextJS with server rendering (building pages on demand), and with SvelteKit&#39;s optional rendering (which allows individual pages to be statically rendered as HTML or JS) ... but it&#39;s still happening on a per-page basis, meaning that for those pages: there&#39;s either no possibility of interactivity, or there&#39;s a JavaScript overhead. Sometimes both.&lt;/p&gt;
&lt;p&gt;This idea of partial rehydration, or &amp;quot;Islands architecture&amp;quot; by Jason Miller (creator of, among other things, Preact), is something I had really hoped we&#39;d get to at some point.&lt;/p&gt;
&lt;p&gt;And now it seems we are here. The below talk at Svelte Summit 2021 blew my mind:&lt;/p&gt;
&lt;div class=&quot;responsive-iframe-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fnr9XWvjJHw?start=10490&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Astro is the first tool I&#39;ve come across that has this ambition: to facilitate importing and selectively hydrating components in your page as you require them.&lt;/p&gt;
&lt;p&gt;And Astro goes further: we can share state across components, or potentially use different modern frameworks (react, svelte, Angular, you name it!) as we want, and we can request JavaScript to only load when the component is in the viewport.&lt;/p&gt;
&lt;p&gt;This has the potential to solve all of these problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No more &amp;quot;uncanny valley&amp;quot; of pages being visible but not being interactive&lt;/li&gt;
&lt;li&gt;No large bundles being loaded upfront&lt;/li&gt;
&lt;li&gt;We could even give the user control over whether they want to load certain components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Astro is in early alpha, and seemingly in stealth mode too! I&#39;m so eager to get building with this tool now, but it seems I&#39;m going to have to wait a while before the team are ready to open it to a public beta offering.&lt;/p&gt;
&lt;p&gt;This could be a really powerful tool, and fundamentally improve the way we build for the web. How exciting would that be!&lt;/p&gt;
&lt;p&gt;PS. &lt;a href=&quot;https://astro.build/&quot;&gt;&lt;em&gt;slightly&lt;/em&gt; more detail here on Astro&#39;s website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PPS. &lt;a href=&quot;https://css-tricks.com/astro/&quot;&gt;Of &lt;em&gt;course&lt;/em&gt; Chris Coiyer has already written a post on CSS Tricks about Astro&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First steps with Sveltekit</title>
    <link href="https://example.com/posts/first-steps-with-sveltekit/"/>
    <updated>2021-05-27T14:21:21Z</updated>
    <id>https://example.com/posts/first-steps-with-sveltekit/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Svelte is a new framework for JavaScript ... hear me out! It does seem to some people that there&#39;s a new JavaScript framework out every day. And there are a lot of new ones at the minute. But SvelteKit is great for one reason: performance. And it&#39;s this above everything else (except accessibility) that I&#39;m excited about.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Svelte does have a lot of things going for it. It&#39;s as nice (if not nicer) to develop with than React, and getting started is a lot, lot quicker.&lt;/p&gt;
&lt;p&gt;These days, if you&#39;re going to build a site with React, you either go with the slightly walled garden of create-react-app, or something like Next or Gatsby. Vue has it&#39;s own set of these problems too.&lt;/p&gt;
&lt;p&gt;However Svelte ... isn&#39;t just a framework. It&#39;s a compiler too. This facilitates much smaller bundle sizes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/img/moviano-jsframeworkcomparison.png&quot; alt=&quot;Here&#39;s a comparison of some common JS frameworks&quot; title=&quot;Chart showing popular JS frameworks as of today: React is hugely popular, but also much larger in size than others. Svelte has the smallest bundle size.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;React is 42.2kb including react-dom. By comparison, Preact is 4kb. By contrast, Svelte is 1.6kb. That blows my mind.&lt;/p&gt;
&lt;p&gt;In our day of multi-megabyte downloads for some websites (that I&#39;ve seen), Svelte could really turn the tide.&lt;/p&gt;
&lt;h2 id=&quot;developer-experience&quot; tabindex=&quot;-1&quot;&gt;Developer experience &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-sveltekit/#developer-experience&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The other thing I want to talk about is the developer experience of Svelte. It&#39;s very pleasant to work with. Writing components &lt;em&gt;feels&lt;/em&gt; a lot more like writing native HTML and CSS. There were certainly some unusual (to me) augmentations, for example writing conditional blocks has an unusual syntax, with &lt;code&gt;{ #if }&lt;/code&gt; and &lt;code&gt;{ /if}&lt;/code&gt; either side of the condition.&lt;/p&gt;
&lt;p&gt;I have to say, I do kinda prefer React&#39;s slightly more JavaScript-y approach.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  condition &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;conditional item&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when it comes to rendering HTML content, it&#39;s much more succinct.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;@html htmlContent&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t get me wrong, that reminder is pretty useful. However once you&#39;re familiar with the concept, it&#39;s not exactly a big deal any more.&lt;/p&gt;
&lt;h2 id=&quot;sveltekit-vs-nextjs-vs-gatsby&quot; tabindex=&quot;-1&quot;&gt;SvelteKit vs NextJS vs Gatsby &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-sveltekit/#sveltekit-vs-nextjs-vs-gatsby&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SvelteKit is definitely going more the route of NextJS rather than Gatsby. Gatsby is a little more prescriptive and great for newer developers (or those short on time), but NextJS allows much more freedom.&lt;/p&gt;
&lt;p&gt;Similar to NextJS, SvelteKit will have options for rendering with SSG / SSR or on the client, and different adapters for interfacing with serverless functions from different providers.&lt;/p&gt;
&lt;p&gt;This means you have to fetch data your own way, either on the client or server, and that means you have to be a bit more aware of the performance costs involved.&lt;/p&gt;
&lt;p&gt;However, I couldn&#39;t find any reference to how you build a NextJS that compiles at build time, that doesn&#39;t send any JavaScript to the client. Yet, that&#39;s one of the excellent things about SvelteKit: I easily configured my site to send exactly &lt;em&gt;no clientside javascript&lt;/em&gt; to the browser, and it works perfectly!&lt;/p&gt;
&lt;h2 id=&quot;my-project&quot; tabindex=&quot;-1&quot;&gt;My project &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-sveltekit/#my-project&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can take a look at my live project at &lt;a href=&quot;https://promatt.co.uk/&quot;&gt;https://promatt.co.uk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote this small site using a starter built by &lt;a href=&quot;https://scottspence.com/2021/05/06/graphcms-svelte-strter/&quot;&gt;Scott Spence&lt;/a&gt;. It fetches data from &lt;a href=&quot;https://graphcms.com/&quot;&gt;GraphCMS&lt;/a&gt; and is hosted on &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt;. I&#39;ve used &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt; to forward emails from the /contact page to my friend&#39;s email address, but I could have just as easily done that with a serverless function.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-steps-with-sveltekit/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s one other project I&#39;ve got my eye on that will trump SvelteKit for my tool of choice. I think it&#39;s a great challenge to other frameworks, and I really hope it starts some kind of &amp;quot;performance war&amp;quot; where the performance costs of frameworks are driven down by competition in the space.&lt;/p&gt;
&lt;p&gt;Even if that doesn&#39;t happen, SvelteKit is a wonderful addition to the JavaScript developers&#39; tool belt.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>monorepos.</title>
    <link href="https://example.com/posts/monorepos/"/>
    <updated>2021-06-04T14:21:21Z</updated>
    <id>https://example.com/posts/monorepos/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve recently been introduced to the use of monorepos to manage projects, and have a few thoughts on the idea.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, I&#39;d better explain what a monorepo is. The idea is that instead of having many different Git repositories for a group of related projects, you have just one, containing all of your different projects that come under a common umbrella.&lt;/p&gt;
&lt;p&gt;Many projects that I am interested, and to some extent involved in, use monorepo tools to manage their work.&lt;/p&gt;
&lt;h2 id=&quot;advantages&quot; tabindex=&quot;-1&quot;&gt;Advantages &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/monorepos/#advantages&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few of the advantages are that you can more easily get a &amp;quot;birds eye&amp;quot; view of the project, so if you&#39;re a new starter you can easily see what the coding styles are in other projects that might be similar to yours. This helped me when I started working at Purple Bricks: I could use some of the code that was already there in other applications to call APIs, build UIs and other things without having to ask my team mates hundreds of questions.&lt;/p&gt;
&lt;p&gt;Another advantage is that you can also share resources such as NPM packages in a more uniform manner. There&#39;s often just one &lt;code&gt;node_modules&lt;/code&gt; folder instead of one for each project, and you can have one &lt;code&gt;package.json&lt;/code&gt;, meaning every project uses the same version of each module you have installed or built. If you publish a new version of a shared library, the updates are pulled into the project on the next release, which can save a lot of laborious manual updates.&lt;/p&gt;
&lt;h2 id=&quot;necessities&quot; tabindex=&quot;-1&quot;&gt;Necessities &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/monorepos/#necessities&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&#39;s a flipside to that though: because shared modules are updated instantaneously, thorough testing is needed to make sure and changes aren&#39;t going to detrimentally affect some projects.&lt;/p&gt;
&lt;p&gt;There&#39;s also quite a bit of configuration involved, since all of your unit, integration and end-to-end tests are typically managed through the monorepo. I&#39;m currently using the &lt;a href=&quot;https://nx.dev/&quot;&gt;Nx monorepo management tool from Nrwl&lt;/a&gt;, which has done a lot to streamline the development process.&lt;/p&gt;
&lt;p&gt;Nx has a command-line tool, so you can run &lt;code&gt;nx affected:test&lt;/code&gt; to run tests for all of the applications you&#39;ve &lt;em&gt;affected&lt;/em&gt;, or altered, with the code you&#39;re writing. Nrwl claims to be very smart about this, so it can tell what&#39;s been updated and only test those affected apps.&lt;/p&gt;
&lt;p&gt;In reality this means that if you change something in a shared library, you have to run &lt;em&gt;all&lt;/em&gt; of the tests for that library, as well as &lt;em&gt;all&lt;/em&gt; of the tests for each of the affected applications. This can take quite a considerable amount of time as you add different applications to your workflow, and in my experience it soon gets really slow.&lt;/p&gt;
&lt;p&gt;We have a common shared UI library which is in active development, as most shared UI libraries tend to be. Each time we touch anything to do with these, it takes up to an hour for all of the CI checks to complete, and there can be timeout issues depending on the availability of the pipeline.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lerna.js.org/&quot;&gt;Lerna&lt;/a&gt;, an alternative, older monorepo management tool, has a concept of &lt;a href=&quot;https://github.com/lerna/lerna#independent-mode&quot;&gt;independent projects&lt;/a&gt;, which works similarly to if you have separate repositories. But that does negate some of the streamlining that shared projects have.&lt;/p&gt;
&lt;h2 id=&quot;verdict&quot; tabindex=&quot;-1&quot;&gt;Verdict &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/monorepos/#verdict&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So far, I&#39;ve benefited quite a bit by using Nx to manage our projects. development is somewhat simpler, it&#39;s learner friendly, and streamlines some of the issues you may have experienced if you&#39;ve worked on projects with interdependent code.&lt;/p&gt;
&lt;p&gt;However, it comes at quite a high price: configuration can be a pain, and build times do become extremely frustrating.&lt;/p&gt;
&lt;p&gt;If you judge the price is worth the benefits, it&#39;s worth adopting this approach. Careful thought is warranted though, since it is an investment you&#39;ll have to live with for some time!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lowest tech first</title>
    <link href="https://example.com/posts/lowest-tech-first/"/>
    <updated>2021-06-23T09:21:21Z</updated>
    <id>https://example.com/posts/lowest-tech-first/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Should I use CSS or JavaScript to perform this task? If you&#39;re asking yourself this question, I have an answer for you: use the lowest technology available to you which can complete the task.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I did a lot of prop threading the other day. I was updating our navigation section so that the last dropdown in the navigation would be positioned better.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NavList isLastItem&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My colleague pointed out that I was threading this through 3 successive components so I could apply some CSS to the menu, which is OK sometimes, but there could be a better way of doing it.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;&amp;amp;:last-of-type&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why is this better?&lt;/p&gt;
&lt;p&gt;Because it&#39;s using the lowest tech first principle. I&#39;m setting the property in CSS which means there&#39;s less overhead for the browser to maintain, less prop threading going on, and it&#39;s arguably easier to see what&#39;s going on in the styles of this component.&lt;/p&gt;
&lt;p&gt;I think we should strive to do things this way more. It&#39;s less overhead and easier to maintain.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>React: data fetching results in type error: object is not a function</title>
    <link href="https://example.com/posts/react-data-fetching-typerror-object-is-not-a-function/"/>
    <updated>2021-07-12T09:21:21Z</updated>
    <id>https://example.com/posts/react-data-fetching-typerror-object-is-not-a-function/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Sometimes I get frustrated with React, there can still sometimes be obscure errors that are a result of it&#39;s component lifecycle methods. But at least it means I can tell you about how to avoid them ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take a look at this code a second. There&#39;s nothing wrong with the fetch() resolution, the API works fine. There&#39;s nothing wrong with the render method either.&lt;/p&gt;
&lt;p&gt;But if you try to run this code you&#39;ll get some error like &lt;code&gt;Error: Objects are not valid as a React child (found: [object Promise])&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://cat-fact.herokuapp.com/facts/random?amount=10&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘error’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; facts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; facts&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; facts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;facts &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; facts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that the data you fetched isn&#39;t consumed by the components&#39; lifecycle. Yet there&#39;s nothing to tell you that in the error. Here&#39;s what you need to do to resolve it:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useEffect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://cat-fact.herokuapp.com/facts/random?amount=10&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘error’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; facts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; facts&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;facts&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setFacts&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;getFacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;facts&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setFacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;facts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;facts &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; facts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You see that we imported the &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useState&lt;/code&gt; hooks, then when the component mounts, we fetch the data, and pass it to state using &lt;code&gt;setFacts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, once the data has been retrieved, you won&#39;t get that error any more.&lt;/p&gt;
&lt;p&gt;It&#39;s a simple fix for an issue that wouldn&#39;t have occurred except for the fact that we&#39;re in React, and we need to respect the React component lifecycle, and it&#39;s way of handling data. We can&#39;t fetch data and assume we can just use it.&lt;/p&gt;
&lt;p&gt;When in Rome ...&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why Astro matters</title>
    <link href="https://example.com/posts/why-astro-matters/"/>
    <updated>2021-07-20T13:21:21Z</updated>
    <id>https://example.com/posts/why-astro-matters/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Next, Nuxt, Gatsby, SvelteKit ... there&#39;s been an explosion of frontend application frameworks lately. I&#39;ve tried many (but not all) of them, and I&#39;ve got to say, it&#39;s never been a more delightful experience to spin up a new project. So much so, that I&#39;ve got hundreds of unfinished ones lying around everywhere.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently, &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;, another new frontend application framework, launched itself on the unsuspecting JavaScript public.&lt;/p&gt;
&lt;p&gt;Whilst many of us may have been tempted to say &amp;quot;oh no not another one&amp;quot;, this framework really stood out to me.&lt;/p&gt;
&lt;p&gt;What&#39;s the point of difference with this one? Why does it &amp;quot;matter&amp;quot; so much? Well, consider this:&lt;/p&gt;
&lt;h2 id=&quot;1.-frontend-can-be-one-happy-family-again&quot; tabindex=&quot;-1&quot;&gt;1. Frontend can be one happy family again &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-astro-matters/#1.-frontend-can-be-one-happy-family-again&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Astro could be considered the first frontend &amp;quot;meta framework&amp;quot;.&lt;/p&gt;
&lt;p&gt;What&#39;s one of those then? It&#39;s a &amp;quot;set of core interfaces for common services and highly extensible backbone for integrating components &lt;a href=&quot;https://www.igi-global.com/chapter/java-web-application-frameworks/16864&quot;&gt;this is already Java thing by the way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Astro is essentially a &amp;quot;bring your own frontend&amp;quot; approach to modern web frameworks. You can use whatever framework (oh, ok &amp;quot;library&amp;quot; then) you know and love, and still spin up a performant app that you can host almost anywhere.&lt;/p&gt;
&lt;p&gt;Think about the potential here. Astro could be the place the frontend finally comes together. It no longer matters (as much) what framework you use. Use them all if you like 🤷‍♂️.&lt;/p&gt;
&lt;p&gt;Love Vue? You can love Astro. React? Same. Svelte? You&#39;ll find no argument from Astro, because Astro is the glue that underpins how we build websites and applications.&lt;/p&gt;
&lt;p&gt;Great, innit? It&#39;ll probably never happen but I can dream, can&#39;t I?&lt;/p&gt;
&lt;h2 id=&quot;2.-astro-pushes-the-boundaries-for-every-javascript-framework*&quot; tabindex=&quot;-1&quot;&gt;2. Astro pushes the boundaries for every javascript framework* &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-astro-matters/#2.-astro-pushes-the-boundaries-for-every-javascript-framework*&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(* oh, ok library then)&lt;/p&gt;
&lt;p&gt;Take a look at this tweet from Evan You, the creator of Vue:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I just tried this in a Vite SSRed app and this approach totally works... a plugin can simply remove the script tags for the actual bundle and let petite-vue &amp;quot;sprinkle&amp;quot; the parts.&lt;br /&gt;&lt;br /&gt;aka &amp;quot;Island Architecture&amp;quot; 🏝️ &lt;a href=&quot;https://t.co/Oe9KRvFsrd&quot;&gt;https://t.co/Oe9KRvFsrd&lt;/a&gt; &lt;a href=&quot;https://t.co/KV7SvCwyn8&quot;&gt;pic.twitter.com/KV7SvCwyn8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Evan You (@youyuxi) &lt;a href=&quot;https://twitter.com/youyuxi/status/1411405615369539590?ref_src=twsrc%5Etfw&quot;&gt;July 3, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Is it a coincidence that Vue now can do a similar thing to Astro? did Astro get Evan to start thinking more about this problem? Could the same be said for the other frameworks too?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://deliciousreverie.co.uk/post/towards-better-rehydration/&quot;&gt;Better hydration is something I&#39;ve been wanting ever since the present generation of frontend application frameworks came out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I know the React team have been working on it for a long time. &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/issues/17993&quot;&gt;I even opened (very prematurely it turns out!) this issue on the GatsbyJS repo around 2 years ago&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;React 18&#39;s hydration prioritisation is a good step forward, however the whole DOM tree still need to be hydrated. Won&#39;t it be great when we need only attach JavaScript generated elements to the DOM when components really need them?!&lt;/p&gt;
&lt;p&gt;It would be wonderful to think that partial rehydration could be everywhere, it would certainly level the playing field and even things up a lot &lt;a href=&quot;https://gomakethings.com/progressive-enhancement-and-the-next-billion-web-users/&quot;&gt;for the next 1 billion web users&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;check-out-astro&quot; tabindex=&quot;-1&quot;&gt;Check out Astro &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/why-astro-matters/#check-out-astro&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you care about performance (you care right?) please check out this gamechanger. I&#39;m so excited for the potential here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://astro.build/&quot;&gt;https://astro.build&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post was originally published on &lt;a href=&quot;https://dev.to/endymion1818/why-astro-matters-55nj/&quot;&gt;Dev.to&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What should I use to build my new project?</title>
    <link href="https://example.com/posts/tech-decision-tree/"/>
    <updated>2021-07-20T14:21:21Z</updated>
    <id>https://example.com/posts/tech-decision-tree/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;There are so many choices when it comes to frameworks, and that&#39;s teriffic! But it could be bad news for people who struggle to make decisions. They might feel paralyzed just by the amount of choice that&#39;s on offer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With that in mind, I&#39;ve given some deep thought into the tools I&#39;ve looked at recently, and historically, and tried to imagine how I might build an application, both frontend and backend, if I was just starting out.&lt;/p&gt;
&lt;p&gt;I came up with this chart. It&#39;s not a complete list of technologies, and it&#39;s at least a little biased towards my favourites. But it&#39;s hopefully something that can help unblock that paralysis, at least giving you a place to start.&lt;/p&gt;
&lt;p&gt;Making decisions about technology is difficult. I hope that this resource eases your pain even if just a little!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://example.com/img/tech-decision-tree.png&quot;&gt;&lt;img src=&quot;https://example.com/img/tech-decision-tree-thumb.png&quot; alt=&quot;Tech decision tree&quot; title=&quot;decision tree graphic. Click for a larger view&quot; /&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;backend&quot; tabindex=&quot;-1&quot;&gt;Backend &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tech-decision-tree/#backend&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This isn&#39;t mutually exclusive, but you might be spinning up a blog using Markdown or a 3rd party service. In which case, let&#39;s just skip this part and go to the frontend.&lt;/p&gt;
&lt;p&gt;Also, a lot of the frontends I&#39;ve mention have some sort of functions API built in. But since the backend isn&#39;t the focus of those tools, I&#39;ve left them out for simplicity&#39;s sake.&lt;/p&gt;
&lt;p&gt;If you&#39;re thinking you aren&#39;t going to need a lot of backend, likely the best thing to use would be lambdas. As I mentioned above, a lot of the frontend tools we have access to do have some sort of API for backend services. You could use that, or Netlify / Vercel&#39;s implementation, unless you&#39;re going directly to a cloud provider for your hosting.&lt;/p&gt;
&lt;p&gt;If you need more than this, you might want to consider whether you want to go the serverless route, or use a monolilth.&lt;/p&gt;
&lt;p&gt;Serverless tooling is a little less mature but it&#39;s probably more cost effective. You&#39;re not constantly paying for containers running in whatever service you&#39;re hosting on. So if you&#39;re needing a lot of backend it might pay dividends later.&lt;/p&gt;
&lt;p&gt;As I mentioned, the choices are very broad with monoliths. From straight-up CMS forms like Keystone, Ghost, Strapi, Payload and Apostrophe to full-blown frameworks such as Express, Meteor, Nest or Blitz.&lt;/p&gt;
&lt;p&gt;If you&#39;re looking at serverless, choices are decidedly more finite. There&#39;s a caveat though: some of the monoliths &lt;em&gt;can&lt;/em&gt; run as serverless. Nest and Express are the most notable of these.&lt;/p&gt;
&lt;p&gt;Otherwise if you want a framework to build on, there&#39;s Redwood (which works particularly well on Netlify and soon Vercel) or Webiny (for AWS, Azure and others).&lt;/p&gt;
&lt;h2 id=&quot;frontend&quot; tabindex=&quot;-1&quot;&gt;Frontend &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tech-decision-tree/#frontend&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The only JavaScript tool that doesn&#39;t have dynamic client-side routing out of the box is Eleventy. Eleventy&#39;s focus is on compiling away JavaScript, so you get a fast, browser-native experience out of the box.&lt;/p&gt;
&lt;p&gt;If you&#39;re focus is performance, and you need client-side routing, check out SvelteKit. Rather than shipping your framework to the frontend, SvelteKit compiles to pure JavaScript. But it still hydrates all of what you can see on your screen, meaning it&#39;s not as performant as Astro can be.&lt;/p&gt;
&lt;p&gt;Astro, a newcomer on the scene, does client-side routing via it&#39;s Collections API, other than that it&#39;s HTML all the way baby. I&#39;m particularly fond of Astro because you can use whatever frontend framework you want.&lt;/p&gt;
&lt;p&gt;If you&#39;re planning for a lot of client side JavaScript, dynamic routing and all, then your choices are on to whether you want a Vue-based or React-based framework.&lt;/p&gt;
&lt;p&gt;In the Vue world, there are plenty of choices, from the more low-level Nuxt, to Gridsome, which has a plugin ecosystem and build-time GraphQL API. It&#39;ll likely be quicker to use Gridsome because of this, but you may not need it.&lt;/p&gt;
&lt;p&gt;Similarly, Gatsby or NextJS are React frameworks. Gatsby has a large plugin ecosystem and GraphQL build-time API, whereas NextJS has a more low-level approach, you source data yourself, and plugins are scarce and likely not officially supported.&lt;/p&gt;
&lt;p&gt;I must admit i really enjoy using the build-time data layer approach. It&#39;s much easier to see when things are going to be rendered, and you can save API calls for your visitors by doing them upfront at the build stage.&lt;/p&gt;
&lt;p&gt;But also Next and Nuxt have some tricks up their sleeves. Next&#39;s innovated ISR &amp;quot;incremental static regeneration&amp;quot; means it can keep content more fresh than Gatsby currently can. However I imagine that&#39;s going to be a short-lived triumph.&lt;/p&gt;
&lt;h2 id=&quot;go-forth-and-build!&quot; tabindex=&quot;-1&quot;&gt;Go forth and build! &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/tech-decision-tree/#go-forth-and-build!&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Phew! There&#39;s a lot to choose from isn&#39;t there?!&lt;/p&gt;
&lt;p&gt;If you&#39;re still stuck at this point, and don&#39;t think you have a clear idea other than you want to build ... just choose one at random!! You will always learn something significant, and it&#39;ll be fun!&lt;/p&gt;
&lt;p&gt;It&#39;s never been more fun to build with JavaScript, the choices we have these days are staggering. I hope this has helped unblock your decision paralysis!!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to resolve Jest issues: tests passing, but code coverage fails!</title>
    <link href="https://example.com/posts/how-to-resolve-jest-issues-tests-passing-but-code-coverage-fails/"/>
    <updated>2021-08-02T14:21:21Z</updated>
    <id>https://example.com/posts/how-to-resolve-jest-issues-tests-passing-but-code-coverage-fails/</id>
    <content type="html">&lt;p&gt;Today I&#39;m continuing with my trend of making silly mistakes so you don&#39;t have to.&lt;/p&gt;
&lt;p&gt;The subject today is asynchronous tests in Jest. I&#39;ve spent waay too much time on this one, and I don&#39;t want you to have the same trouble.&lt;/p&gt;
&lt;p&gt;I&#39;m testing whether a page renders or not. The page takes some time to contact an API and therefore to render, so I&#39;ve used the &lt;code&gt;waitFor&lt;/code&gt; helper in Jest to assert what should happen.&lt;/p&gt;
&lt;p&gt;As I&#39;ve mentioned the test setup is slightly immaterial, however I&#39;m writing this rather quickly before the kids get hungry.&lt;/p&gt;
&lt;p&gt;Here&#39;s the test using &lt;code&gt;waitFor&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;renders the page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ThemeProvider theme&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;defaultTheme&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MockedProvider mocks&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mocks&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; addTypename&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IndexPage &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;MockedProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ThemeProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;screen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInTheDocument&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything wrong with this test? No?&lt;/p&gt;
&lt;p&gt;Look again. The documentation in fact plainly says this at the top of the page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The async methods return Promises, so be sure to use await or .then when calling them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://testing-library.com/docs/dom-testing-library/api-async/&quot;&gt;https://testing-library.com/docs/dom-testing-library/api-async/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What this doesn&#39;t do is show up in your tests. It&#39;ll look like they&#39;ve passed!&lt;/p&gt;
&lt;p&gt;The only reason I came across it was because when I use &lt;code&gt;--codeCoverage&lt;/code&gt; to make sure I&#39;ve covered all of my code with tests, it shows up as uncovered lines. But also, you&#39;ll notice there is an obscure message in the terminal about this too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ReferenceError: You are trying to access a property or method of the Jest environment after it has been torn down.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically the assertion cannot be verified because it&#39;s no longer there, the &lt;code&gt;render&lt;/code&gt; phase has passed. Although why this results in passing tests is anybody&#39;s guess. (Please let me know in the comments if you know!).&lt;/p&gt;
&lt;p&gt;Here&#39;s an example of a working test:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;renders the page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ThemeProvider theme&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;defaultTheme&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MockedProvider mocks&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mocks&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; addTypename&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IndexPage &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;MockedProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ThemeProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;screen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInTheDocument&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you go, I&#39;ve wasted hours of my precious life so you (hopefully!) don&#39;t have to!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introspection: comparing myself to others, glorifying the past</title>
    <link href="https://example.com/posts/introspection-comparing-glorifying-the-past/"/>
    <updated>2021-09-18T13:21:21Z</updated>
    <id>https://example.com/posts/introspection-comparing-glorifying-the-past/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;This post is a little bit of introspection for me. I&#39;ve recently been given a bit of time to think about certain things, and I&#39;d like a make a note of them for my own personal growth.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If this isn&#39;t the kind of article you&#39;re looking for from me, feel free to skip this one.&lt;/p&gt;
&lt;h2 id=&quot;drawing-personal-comparisons&quot; tabindex=&quot;-1&quot;&gt;Drawing personal comparisons &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introspection-comparing-glorifying-the-past/#drawing-personal-comparisons&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I find that I often spend time thinking about who I compare to other developers, especially those on my team or within my organisation.&lt;/p&gt;
&lt;p&gt;This helps me sometimes because once I&#39;ve identified who I think is a better developer, I tend to watch their work more closely. This is because I&#39;d like to pick up some of the things that make them so effective at their jobs.&lt;/p&gt;
&lt;p&gt;However, I&#39;ve also noticed that sometimes it leads to bumps in the road of my relationships with that person. I sometimes have a tendency to say things like &amp;quot;oh, you&#39;re a much better developer than me&amp;quot;, which (a) puts them on a pedestal, and (b) sometimes annoys them.&lt;/p&gt;
&lt;p&gt;It puts them on a pedestal because really what I&#39;m doing is being a bit envious of that person. I&#39;m never happy with myself, and sometimes value myself very poorly. But sometimes that means I value others too much.&lt;/p&gt;
&lt;p&gt;It annoys my colleagues because once I&#39;ve told them I think they&#39;re a better developer than me, they have to find some way of shifting the rather uncomfortable focus either back to me or onto something else. For some people that&#39;s a frustration they could do without.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How am I going to tackle this?&lt;/strong&gt; I&#39;m going to try to remind myself that a team is made up of a spectrum of skill sets and abilities. &lt;a href=&quot;https://youtu.be/Vyn_xLrtZaY&quot;&gt;There are no super chickens&lt;/a&gt;, and everyone is of value and creates value for the organisation.&lt;/p&gt;
&lt;h2 id=&quot;glorifying-the-past-(or-not)&quot; tabindex=&quot;-1&quot;&gt;Glorifying the past (or not) &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introspection-comparing-glorifying-the-past/#glorifying-the-past-(or-not)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used to often imagine myself living in some era of the past. Especially in England during the early 1800s, when John Keats was walking the Lakes or composing his best poetry. I enjoyed thinking of the &amp;quot;simplicity&amp;quot; of the age, in terms of there not being nearly so much commercialism, lack of common good, and general trust between individuals than perhaps there can be in todays&#39; world.&lt;/p&gt;
&lt;p&gt;However, somewhere in the past 10 years I&#39;ve stopped doing that.&lt;/p&gt;
&lt;p&gt;I think I finally decided that although those times in the past might have had some advantages, there were no doubt many hardships and disadvantages that caused a huge amount of suffering. Generally much poorer and less available healthcare. Rampant racism and sexism. Even perhaps a sort of brutality that our current age doesn&#39;t demonstrate so readily.&lt;/p&gt;
&lt;p&gt;But also, I stopped reading. I&#39;ve simply had no time available to do so.&lt;/p&gt;
&lt;p&gt;For both of these reasons, I stopped imagining myself in those past times. But the result of that is that I&#39;ve felt more adrift.&lt;/p&gt;
&lt;p&gt;Having that imagined world to think back on helped me to retreat away from some of the more uncomfortable realities I faced: disappointments, difficult and long commutes, the times I didn&#39;t enjoy my home life or work.&lt;/p&gt;
&lt;p&gt;I wonder if I should bring back at least &lt;em&gt;some&lt;/em&gt; of that imagination. I definitely want to bring reading for pleasure back into my life. It&#39;s going to be quite a challenge with my schedule though.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How am I going to tackle this?&lt;/strong&gt; I am going to try to spend an hour a week reading, hopefully that&#39;ll give me a little more &amp;quot;scope for the imagination&amp;quot; back into my life.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/introspection-comparing-glorifying-the-past/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, you made it to the end of the post. Thanks for caring that much. I hope these musings provide something of value to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>6 reasons why we chose Nx as our monorepo management tool</title>
    <link href="https://example.com/posts/6-reasons-why-we-chose-nx/"/>
    <updated>2021-09-23T10:21:21Z</updated>
    <id>https://example.com/posts/6-reasons-why-we-chose-nx/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Nx is a modular build framework for architecting and maintaining code projects. Using it means you configure once, then just focus on build your tools and apps. Nx can effectively manage the configuration around APIs, micro frontends and libraries of tools, so you don’t have to consciously think of this step each time it comes to building a new project. This is an article I wrote for the Purple Bricks tech blog on the subject.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sharing code across multiple disparate projects, at scale, can be a problem for many organisations.&lt;/p&gt;
&lt;p&gt;The challenge is to eliminate code duplication and unify user interface design patterns, whilst at the same time providing (hopefully) speedier development for engineers.&lt;br /&gt;
There are a few ways to tackle this issue.&lt;/p&gt;
&lt;p&gt;Here&#39;s the full article: &lt;a href=&quot;https://medium.com/purplebricks-digital/6-reasons-why-we-chose-nx-as-our-monorepo-management-tool-1fe5274a008e&quot;&gt;https://medium.com/purplebricks-digital/6-reasons-why-we-chose-nx-as-our-monorepo-management-tool-1fe5274a008e&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On digital estates</title>
    <link href="https://example.com/posts/on-digital-estates/"/>
    <updated>2021-11-29T14:21:21Z</updated>
    <id>https://example.com/posts/on-digital-estates/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently heard the term &#39;Digital estate&#39; to mean the technical property of an organisation. This, and the associations the term provides, have got me thinking about how we contribute to the success of organisations over time...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s start with this question: what does the word &amp;quot;estate&amp;quot; conjure up in your mind? I think it might include a variety of things. A house? Probably? The physical things you own? Maybe.&lt;/p&gt;
&lt;p&gt;I live in a country where that term can have two very distinct meanings beyond those two things.&lt;/p&gt;
&lt;p&gt;In times gone by, the ruling elite would have an estate. It usually consisted of one major, very large property that resembled (or actually was) a castle or manor house. It would also include extensive land around that area, much of it farmland. It could also include villages where people often worked for the estate. It was like the country&#39;s economy in miniature.&lt;/p&gt;
&lt;p&gt;If you&#39;ve watched Downton Abbey, you probably know what I&#39;m getting at here.&lt;/p&gt;
&lt;p&gt;Then ... there&#39;s the council estate.&lt;/p&gt;
&lt;p&gt;In this context, an estate is a collection of houses owned by a local council where people of less secure financial means can find accommodation. Although valiant attempts have often been made to increase the opportunities for people who live in these kinds of places, there&#39;s often still a lot of crime and violence. For many people it&#39;s home, and therefore it&#39;s a nice place to live. But given the opportunity, would they choose to live elsewhere?&lt;/p&gt;
&lt;p&gt;So what kind of &amp;quot;estate&amp;quot; are we talking about when it comes to a &lt;em&gt;digital&lt;/em&gt; estate?&lt;/p&gt;
&lt;p&gt;I guess it could be either really.&lt;/p&gt;
&lt;h2 id=&quot;be-mindful&quot; tabindex=&quot;-1&quot;&gt;Be mindful &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-digital-estates/#be-mindful&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What I&#39;m saying is that we should be mindful of what we&#39;re actually building. The code we write on a daily basis contributes to the overall estate of the organisation we&#39;re working for. Are we making that estate into something that is easy to move around in, neat, tidy, something we can be proud of? Or is it something that serves a necessary function but is difficult to work with?&lt;/p&gt;
&lt;p&gt;It depends on our attitude towards our work ... are we tempted to think that, because our surroundings are not conducive to finishing things off nicely, that we should do a sloppy job? Or do we have the opinion that we should try to improve the quality of life regardless of the situation of those around us?&lt;/p&gt;
&lt;h2 id=&quot;the-organisations-view&quot; tabindex=&quot;-1&quot;&gt;The organisations view &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/on-digital-estates/#the-organisations-view&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall organisation has a huge impact on the digital estate. Sometimes in ways they might not imagine. For example, technical debt is likely to always exist. But are teams encouraged to tackle this debt? Or does the organisation skirt around the issue, thinking that they can maintain velocity without paying it off?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/AgileVelocity1/technical-debt-sources-and-impacts-57655575&quot;&gt;for more on this subject, please see this slideshare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The organisation might want to keep producing features under pressure from stakeholders or higher management. Or they might make decisions about launch timelines of new digital products without asking the opinion of those who understand the cost of delivery.&lt;/p&gt;
&lt;p&gt;Both of these increase the rate of technical debt. So &amp;quot;shipping faster&amp;quot; is counterintuitive to the ultimate velocity of the organisation. On this subject, I really enjoyed &lt;a href=&quot;https://www.infoq.com/articles/reduce-technical-debt/&quot;&gt;this article on the InfoQ website&lt;/a&gt;, which claims that &amp;quot;In the future, technical debt will become less of an engineering problem and more of an important business prerequisite that helps with delivering more value to our customers and the business.&amp;quot;&lt;/p&gt;
&lt;p&gt;The ideas in this article were sparked by &lt;a href=&quot;https://stackoverflow.blog/2021/10/18/code-quality-a-concern-for-businesses-bottom-lines-and-empathetic-programmers/&quot;&gt;this post on the StackOverflow blog&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2021 Review / 2022 Aims</title>
    <link href="https://example.com/posts/2021-review-2022-aims/"/>
    <updated>2021-12-29T14:21:21Z</updated>
    <id>https://example.com/posts/2021-review-2022-aims/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;2021 continued the trend of being more challenging than any period before it, in terms of maintaining some sort of normality to our lives. However there have been some really good things too. Here&#39;s a review of what I set out to achieve and what I want to achieve this year&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When 2021 dawned I was still a Mid Level Software Engineer at Zopa. That changed in April as I took a new role as Senior JavaScript Engineer at Purple Bricks. It was a great boost for my self confidence and a fantastic team to work with. But 2022 finds me at another turning point: going from that to a split between DevRel and Fullstack Engineer at Webiny. With that change comes some reassessment of where I want my career to go in the next year.&lt;/p&gt;
&lt;h2 id=&quot;what-i-wanted-to-achieve&quot; tabindex=&quot;-1&quot;&gt;What I wanted to achieve &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#what-i-wanted-to-achieve&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I set out to improve how I was doing in these following areas:&lt;/p&gt;
&lt;h3 id=&quot;advocacy-and-mentoring&quot; tabindex=&quot;-1&quot;&gt;Advocacy and mentoring &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#advocacy-and-mentoring&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the start of the year I was trying to build better bridges between disparate teams at Zopa. I enjoyed that a lot. My desire to do more of that got a massive boost when I joined Purple Bricks as one of their 3 Seniors.&lt;/p&gt;
&lt;p&gt;It was fantastic to not only mentor various members of the team, but also help set the direction of the whole chapter. I also enjoyed delivering a training course to the business on GraphQL, and building what was for me the most complex system I&#39;ve built: a messaging app.&lt;/p&gt;
&lt;p&gt;But what I remember most fondly was the moment I told my colleague Helen that this was my first Senior role. &amp;quot;Wh ... what?!&amp;quot; was her response! I&#39;ve been keen to demonstrate that I don&#39;t always have the answers (or even the best answers), and that I often don&#39;t know what I&#39;m doing, and I think that has actually boosted the confidence others have in me, rather than the opposite.&lt;/p&gt;
&lt;h3 id=&quot;follow-through&quot; tabindex=&quot;-1&quot;&gt;Follow through &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#follow-through&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yep, I definitely have had to give this some attention. But as most of the follow through has been on making sure more junior teams aren&#39;t still stuck after I&#39;ve left them with a solution. I think I&#39;ve got better at this, at least I hope I have!&lt;/p&gt;
&lt;h3 id=&quot;not-giving-up&quot; tabindex=&quot;-1&quot;&gt;Not giving up &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#not-giving-up&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;m still bad at this! I&#39;m more persistent definitely, and I&#39;m a lot more comfortable at diving through code I don&#39;t understand and finding ways around problems. But I also realise my personal style is a lot different to my friend David&#39;s, and I&#39;ve become more comfortable with my own aptitudes.&lt;/p&gt;
&lt;p&gt;Aside from these, I&#39;ve really got used to digging into pipeline problems, environment issues, using Kubernetes and Helm, as well as getting better at Javascript in general, routing, graphql, and different rendering options.&lt;/p&gt;
&lt;h2 id=&quot;what-i-want-to-achieve-this-year&quot; tabindex=&quot;-1&quot;&gt;What I want to achieve this year &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#what-i-want-to-achieve-this-year&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There wasn&#39;t much technological focus in last years&#39; ambitions, but I know for certain that there are going to be some strong tech challenges this year!&lt;/p&gt;
&lt;h3 id=&quot;fullstack&quot; tabindex=&quot;-1&quot;&gt;Fullstack &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#fullstack&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&#39;ve been working a lot with NextJS applications at Purple Bricks. That has helped me build a better mental model about static, server and client rendering, and the benefits and hazards of each. Also, I have come to really enjoy the flexibility of NextJS with each of these methods.&lt;/p&gt;
&lt;p&gt;But I still have been predominantly working on the client. I&#39;m really looking forward to working with lambdas at Webiny, and I hope it&#39;ll really help me build my understanding of server side.&lt;/p&gt;
&lt;h3 id=&quot;serverless&quot; tabindex=&quot;-1&quot;&gt;Serverless &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#serverless&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that I understand the principles and benefits of fullstack applications, I can&#39;t wait to discover more about serverless, and how it solves some of these problems. I anticipate it&#39;ll have it&#39;s own set of caveats too, and I can&#39;t wait to understand these more. I&#39;m also looking forward to understanding more about AWS service and APIs.&lt;/p&gt;
&lt;h3 id=&quot;state-management&quot; tabindex=&quot;-1&quot;&gt;State management &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#state-management&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of Webiny&#39;s applications is a page builder, with a lot of heavy state management using Recoil. It&#39;s going to be really great to get more into a state-heavy application and learn more about that world.&lt;/p&gt;
&lt;h3 id=&quot;content-creation&quot; tabindex=&quot;-1&quot;&gt;Content creation &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#content-creation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As of the time of writing, I have never made a TikTok video. I think this is about to change with my taking on a part DevRel role at Webiny. That seems really scary to me at the minute since I know &lt;em&gt;nothing&lt;/em&gt; about video editing let alone how to tell a story in less than 1 minute.&lt;/p&gt;
&lt;h3 id=&quot;community-building&quot; tabindex=&quot;-1&quot;&gt;Community building &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/2021-review-2022-aims/#community-building&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the one I&#39;m really looking forward to. Webiny has so much potential. I can&#39;t wait to see where the team take this product. There&#39;s already a small community with some really great contributors and users, I&#39;m hoping that I can help blow that up to a much larger audience in the next year.&lt;/p&gt;
&lt;p&gt;I&#39;m sure there&#39;s going to be a lot more to learn coming up ... but that&#39;s quite enough to get started with!!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing with Apollo Client mock provider</title>
    <link href="https://example.com/posts/testing-apollo-client-mock-provider/"/>
    <updated>2022-01-02T14:21:21Z</updated>
    <id>https://example.com/posts/testing-apollo-client-mock-provider/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Apollo&#39;s MockProvider is a great tool for testing mutations, however it&#39;s a little bit magical, making errors a little difficult to find. If your testing your error state, this might come in handy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m currently building a UI for a messages app, but encountered issues when testing sending new messages. Here&#39;s my component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SubmitForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setMessage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;submitMessage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMutation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MESSAGE_MUTATION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;br /&gt;            onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token function&quot;&gt;submitMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token literal-property property&quot;&gt;SendMessageInput&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                                &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token function&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Sorry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; there was a problem submitting your message&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;fieldset&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label htmlFor&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Compose message&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;br /&gt;                    type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;br /&gt;                    id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;br /&gt;                    value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                    onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fieldset&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Send message &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loading &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Spinner &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wrote a test suite for this component, all of which worked correctly, until I got to the stage when I was testing the error state:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should render the error state UI&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockErrorMutation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MESSAGE_MUTATION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;SendMessageInput&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;drat&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ThemeProvider theme&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;defaultTheme&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MockedProvider mocks&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mockErrorMutation &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SubmitForm &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;MockedProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ThemeProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputField &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; screen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByLabelText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;compose message&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; screen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Send message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        userEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                screen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;sorry, there was a problem submitting your message&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInTheDocument&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test consistently failed, because all we ever got was the loading state. Yet manual testing passed fine.&lt;/p&gt;
&lt;p&gt;The solution? Async the &lt;code&gt;submitMessage()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;            onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;submitMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token literal-property property&quot;&gt;SendMessageInput&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                                &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token function&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without making this asynchronous it would always fail. Ah well. All&#39;s well that ends well.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>First 2 weeks at Webiny</title>
    <link href="https://example.com/posts/first-two-weeks-at-webiny/"/>
    <updated>2022-03-11T14:21:21Z</updated>
    <id>https://example.com/posts/first-two-weeks-at-webiny/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I&#39;ve been at Webiny two weeks now. I have had the most fun I&#39;ve had in a long time career wise. Here&#39;s what I&#39;ve learned and what my objectives are going to be for the coming few weeks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first week at any company is always difficult. There&#39;s so much to learn, there&#39;s a new culture to adopt, and new personal dynamics to interact with. First steps always falter. But now, two weeks in, I&#39;m beginning to feel more confident. I&#39;ve made some contributions that I&#39;m happy with, and I&#39;m already feeling more settled with my decision to move.&lt;/p&gt;
&lt;p&gt;I don&#39;t quite know what I was expecting from Webiny. I already knew the people here a little, and the reason I joined was because I could see such potential in the project. But looking in from the outside you can never get the whole picture.&lt;/p&gt;
&lt;p&gt;I went in with ideas about organising campaigns, streamlining delivery of content across multiple platforms, doing SWOT analyses, doing some video content ... but when I stepped aboard, I found out that this is a really focused company. They have one product, one target market, and they want to fulfil the requirements of that market well. Through experimenting they&#39;d already found out what works, and have a good idea of what is going to drive engagement, adoption and growth. Which is really reassuring for me: I don&#39;t have to start at &amp;quot;why&amp;quot;, nor do I need to define &amp;quot;how&amp;quot;, I only have to &amp;quot;do&amp;quot;.&lt;/p&gt;
&lt;p&gt;My first task was outlined pretty quickly: Build some starter kits with popular frontend frameworks. This would help me get used to using the Headless CMS part of Webiny (Webiny is much more than that, but we&#39;ll get to that later), give the company some more inbound links from authoritative domains, and help with user onboarding. It also would leverage my familiarity with these frameworks.&lt;/p&gt;
&lt;p&gt;I quickly found a bug: we have a custom rich text renderer package for React, which didn&#39;t compile to common javascript, which meant I couldn&#39;t use it in Next. This was a great opportunity to make my first contribution to Webiny!&lt;/p&gt;
&lt;p&gt;I struggled with figuring out how to customise our babel configuration, and Pavel, the CTO, helped me get through some silly misunderstanding I had about how to do that: how do you customise this babel configuration so that it overrides just this package, not any of the others in our monorepo?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;../../babel.react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; __dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The answer is simply this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaults &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;../../.babel.react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; __dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;defaults&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;defaults&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token string&quot;&gt;&quot;@babel/plugin-transform-modules-commonjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pavel and I laughed about how this got me, and thats pretty indicative of the whole team; they&#39;ve been welcoming, supportive and not critical of my mistakes. Of course, if I was a burden on the team I would expect there to be some further discussions, but you can anticipate a few teething problems from new team mates.&lt;/p&gt;
&lt;h2 id=&quot;contributing-to-open-source-again&quot; tabindex=&quot;-1&quot;&gt;Contributing to open source again &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-two-weeks-at-webiny/#contributing-to-open-source-again&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Contributing to open source is just ... so satisfying. I built something I was pretty proud of at Purplebricks, but it&#39;s something I can&#39;t even show you, and the code is lost to me. I&#39;m pretty sad about that situation.&lt;/p&gt;
&lt;p&gt;On the other hand, I&#39;ve already made contributions to 2 Webiny repos, and have a draft PR open on NextJS docs. Because it&#39;s all public, it seems to me that this code is going to endure and be useful to other people. That is a great motivator for me.&lt;/p&gt;
&lt;h2 id=&quot;community-interaction&quot; tabindex=&quot;-1&quot;&gt;Community interaction &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-two-weeks-at-webiny/#community-interaction&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The other thing I&#39;ve been excited about is getting more involved in the community via the Slack channel, it&#39;s been great to chat to other developers interested in Webiny, and it&#39;s helped me build my domain knowledge too.&lt;/p&gt;
&lt;p&gt;But much more than that, I&#39;ve been engaging on Discord servers, on Slack via &lt;a href=&quot;https://www.tnd.dev/&quot;&gt;The New Dynamic&lt;/a&gt;&#39;s community, as well as HackerNews, Reddit and in other places too.&lt;/p&gt;
&lt;p&gt;This has been great fun so far. I know I can&#39;t expect every interaction to be positive, but most are. This kind of community engagement scratches the itch I had before, when I wasn&#39;t just helping developers out with specific problems but seeing if I could raise a few eyes to the horizon, to see potential where they hadn&#39;t before, and to try new things.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://example.com/posts/first-two-weeks-at-webiny/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First two weeks, as you see here, has been extremely positive. I&#39;m really excited to see where Webiny as a product goes. Also, I&#39;m blogging again ... which means things are looking up for my mental health.&lt;/p&gt;
</content>
  </entry>
</feed>
